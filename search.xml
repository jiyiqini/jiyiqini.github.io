<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 重要技能</title>
    <url>/interviews/android/Android-Resume-3/</url>
    <content><![CDATA[<p>Android面试之《重要技能》总结。对于简单部分，只做总结。至于难点，将做进一步分析与记录。</p>
<span id="more"></span>

<h1 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h1><blockquote>
<p><strong>Android之四大组件</strong>：Activity、Service、BroadcastReceiver、ContentProvider。  </p>
</blockquote>
<h2 id="Activity（活动）"><a href="#Activity（活动）" class="headerlink" title="Activity（活动）"></a>Activity（活动）</h2><p><strong>（1）简介与特点：</strong></p>
<ol>
<li>作用于表现业务功能，即交互。有 UI 界面，不可处理耗时任务。</li>
<li>Activity 间通过 Intent 通信。</li>
<li>必须在 AndroidManifest.xml 中注册配置，使用时系统才可识别。</li>
</ol>
<p><strong>（2）Activity 的 4 种状态：</strong></p>
<ol>
<li>运行中（running/active）：对应 <code>onResume</code> 状态，位于栈顶，交互可见。</li>
<li>暂停（paused）：对应 <code>onPause</code> 状态，可见+不可交互。</li>
<li>停止（stopped）：对应 <code>onStop</code> 状态，不可见+不可交互。</li>
<li>销毁（destroyed）：对应 <code>onDestroy</code> 状态，Activity 被销毁了。</li>
</ol>
<p>对于理解 Activity 的 4 种状态，应结合 <a href="#">Post not found: ??? Activity 生命周期</a> 来理解。</p>
<p><strong>（3）Activity 的生命周期：</strong></p>
<blockquote>
<p>首先，献上官方的 Activity 生命周期图：<br><img src="../../../images/illustration/android/lifecycle-Activity&Fragment.png" alt="lifecycle-Activity&amp;Fragment.png"></p>
</blockquote>
<p><strong>按顺序总结 Activiyt 各生命周期：</strong></p>
<ul>
<li><code>onCreate</code></li>
<li><code>onReStart</code></li>
<li><code>onStart</code></li>
<li><code>onRestoreInstanceState</code>：用于恢复数据。</li>
<li><code>onResume</code></li>
<li><code>onSaveInstanceState</code>：<strong>特别注意</strong>，<code>onSaveInstanceState</code> 始终在 <code>onStop</code> 前（可能在 <code>onPause</code> 前或 <code>onPause~onStop</code>，虽然测试大多数情况在 <code>onPause</code> 前）。用于保存数据。</li>
<li><code>onPause</code></li>
<li><code>onStop</code></li>
<li><code>onDestroy</code></li>
</ul>
<h2 id="Service（服务）"><a href="#Service（服务）" class="headerlink" title="Service（服务）"></a>Service（服务）</h2><p><strong>（1）简介与特点：</strong></p>
<ol>
<li>作用于后台服务，即无接触交互，但无（或说不依赖） UI 界面。不可处理耗时任务。</li>
<li>同 Activity 一样，必须在 AndroidManifest.xml 中注册配置，使用时系统才可识别。</li>
<li>虽说无 UI 交互，适于长期运行任务，但同样不能处理耗时任务（***切记，勿坑~***）。需要手动结合线程，将耗时任务放在线程中处理。否则，就会阻塞主线程。</li>
</ol>
<p><strong>（2）Service 的 2 种启动方式：</strong></p>
<blockquote>
<ol>
<li><strong>ctxObj.startService：</strong></li>
</ol>
<ul>
<li>此类服务可在后台无限期运行。</li>
<li>生命周期：<code>onCreate -&gt; onStartCommand -&gt; onDestroy</code></li>
<li>多次 <code>startService</code>，只会执行一次 <code>onCreate</code>（++共享一个实例++），但会多次执行 <code>onStartCommand</code>。</li>
<li>因启动它的组件（如Activity）与 Service 没有关联，停止需要手动调用 <code>stopService</code> 或 <code>stopSelf</code> 。</li>
</ul>
<ol start="2">
<li><strong>ctxObj.bindService：</strong></li>
</ol>
<ul>
<li>此类服务跟随绑定组件（如<code>Activity</code>）的生命周期，除非中途手动 <code>unbindService</code> 才会提前停止。</li>
<li>生命周期：<code>onCreate -&gt; onBind -&gt; onUnbind -&gt; onDestroy</code></li>
<li>多次 <code>bindService</code>，只会执行一次 <code>onCreate 和 onBind</code>（++共享一个实例++）。</li>
<li>调用 <code>unbindService</code> 后，若该 service 没有与其它 client 绑定时，才会真正地 destroy 掉（Service-Client：1-N，若 Client 还有一个在绑定着该 Service，其就不会真正销毁，除非到最后一个关联者 Client 解绑不再使用后。）</li>
</ul>
</blockquote>
<h2 id="BroadcastReceiver（广播接收者）"><a href="#BroadcastReceiver（广播接收者）" class="headerlink" title="BroadcastReceiver（广播接收者）"></a>BroadcastReceiver（广播接收者）</h2><p><strong>（1）简介与特点：</strong></p>
<ol>
<li>广播接收器，是 Android 中的一种轻量级消息传输-响应机制。</li>
<li>可分静态注册与动态注册。</li>
</ol>
<p><strong>（2）5大类广播：</strong></p>
<blockquote>
<ol>
<li>普通广播（Normal Broadcast）</li>
<li>系统广播（System Broadcast）</li>
<li>有序广播（Ordered Broadcast）</li>
<li>粘性广播（Sticky Broadcast）</li>
<li>App应用内广播（Local Broadcast）</li>
</ol>
</blockquote>
<ol>
<li><strong>普通广播（Normal Broadcast）</strong></li>
</ol>
<p>注：是一种全局广播，哪怕不在同一App，只要监听相同的action也会收到！推荐使用LocalBroadcast！</p>
<blockquote>
<p><strong>Normal Broadcast 的使用</strong>：<code>sendBroadcast(Intent)</code><br><strong>Normal Broadcast 的特点</strong>：</p>
<ul>
<li>此类广播对于所有广播接收器均可接收。</li>
<li>同一级别的接收器接收顺序不确定。</li>
<li>接收器不能对广播进行处理或修改。</li>
<li>接收器不能截断广播，仍继续传播。</li>
</ul>
</blockquote>
<ol start="2">
<li><strong>系统广播（System Broadcast）</strong></li>
</ol>
<p>系统内置许多广播，只要是涉及手机基本操作都有。如：电话、短信、电量、开机、网络变化、拍照等，都会发出相应广播。常见系统广播 action 有：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>action</th>
</tr>
</thead>
<tbody><tr>
<td>网络变化</td>
<td>android.net.conn.CONNECTIVITY_CHANGE</td>
</tr>
<tr>
<td>开关飞行模式</td>
<td>Intent.ACTION_AIRPLANE_MODE_CHANGED</td>
</tr>
<tr>
<td>充电时或电量变化</td>
<td>Intent.ACTION_BATTERY_CHANGED</td>
</tr>
<tr>
<td>电量充足时（即从低变化到饱满状态会发出广播）</td>
<td>Intent.ACTION_BATTERY_OKAY</td>
</tr>
<tr>
<td>系统启动完成后（只广播一次）</td>
<td>Intent.ACTION_BOOT_COMPLETED</td>
</tr>
<tr>
<td>按下拍照时的拍照按键（硬件按键）</td>
<td>Intent.ACTION_CAMERA_BUTTON</td>
</tr>
<tr>
<td>锁屏</td>
<td>Intent.ACTION_CLOSE_SYSTEM_DIALOGS</td>
</tr>
<tr>
<td>设备设置被更改（如：语言Locale、方向Orientation）</td>
<td>Intent.ACTION_CONFIGURATION_CHANGED</td>
</tr>
<tr>
<td>插入耳机时</td>
<td>Intent.ACTION_HEADSET_PLUG</td>
</tr>
<tr>
<td>未正确移除SD卡（正确步骤：设置-SD卡和设备内存-卸载SD卡）</td>
<td>Intent.ACTION_MEDIA_BAD_REMOVAL</td>
</tr>
<tr>
<td>插入外部存储装置（如：插入SD卡）</td>
<td>Intent.ACTION_MEDIA_CHECKING</td>
</tr>
<tr>
<td>成功安装APK</td>
<td>Intent.ACTION_PACKAGE_ADDED</td>
</tr>
<tr>
<td>成功卸载APK</td>
<td>Intent.ACTION_PACKAGE_REMOVED</td>
</tr>
<tr>
<td>屏幕被关闭</td>
<td>Intent.ACTION_SCREEN_OFF</td>
</tr>
<tr>
<td>屏幕被打开</td>
<td>Intent.ACTION_SCREEN_ON</td>
</tr>
<tr>
<td>关闭系统时</td>
<td>Intent.ACTION_SHUTDOWN</td>
</tr>
<tr>
<td>重启设备</td>
<td>Intent.ACTION_REBOOT</td>
</tr>
</tbody></table>
<p>监听这些系统广播太简单了，只需注册相关的action即可。</p>
<ol start="3">
<li><strong>有序广播（Ordered Broadcast）</strong></li>
</ol>
<blockquote>
<p><strong>Ordered Broadcast 的使用</strong>：<code>sendOrderedBroadcast(Intent)</code><br><strong>Ordered Broadcast 的特点</strong>：</p>
<ul>
<li>有序，体现在接收器 <code>intent-filter</code> 的 <code>priority</code> 取值（范围：[-1000,1000]），优先级与设值成正比。</li>
<li>同一级别（priority相同）的接收器接收顺序不确定。</li>
<li>高优先级（high-priority）接收器能对广播进行处理或修改。在 <code>onRecieve</code> 中调用 <code>setResultExtras(Bundle)</code> 即可，后续低优先级（low-priority）接收器在 <code>onReceive</code> 中调用 <code>getResultExtras(Bundle)</code> 获取被修改过的广播内容。若仍用 <code>getExtras()</code> 的话，取到的仍是源头广播。</li>
<li>高优先级（high-priority）接收器能截断广播（在 <code>onReceive</code> 调用 <code>abortBroadcast()</code> 即可！），阻止继续传播。</li>
</ul>
</blockquote>
<p><strong>示例：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// OrderBroadcat例子：</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">// 1. 自定义MyBroadcastReceiver1</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBroadcastReceiver1</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String data <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"action:%s, data:%s, context: %s"</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Bundle bundle <span class="token operator">=</span> null <span class="token operator">!=</span> intent<span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> intent<span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bundle<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"老子修改过的data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setResultExtras</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 自定义MyBroadcastReceiver2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBroadcastReceiver2</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String data <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[2]action:%s, data:%s, context: %s"</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Bundle b <span class="token operator">=</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[2]action:%s, data:%s, context: %s"</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[2]bundle1:%s, getResultExtras:%s"</span><span class="token punctuation">,</span> intent<span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        b<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"二老子修改过的data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setResultExtras</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment" spellcheck="true">//abortBroadcast();//截断继续广播</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 自定义MyBroadcastReceiver3</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBroadcastReceiver3</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String data <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[3]action:%s, data:%s, context: %s"</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Bundle b <span class="token operator">=</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[3]action:%s, data:%s, context: %s"</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">"App"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[3]bundle1:%s, getResultExtras:%s"</span><span class="token punctuation">,</span> intent<span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 2. xml布局文件，一个按钮发送ordered广播</span>
<span class="token operator">&lt;</span>LineaLayout <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">&lt;</span>Button 
        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"发送ordered广播"</span>
        android<span class="token operator">:</span>onclick<span class="token operator">=</span><span class="token string">"performSendOrderedBroadcast"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>

<span class="token comment" spellcheck="true">// 3. 在AndroidManifest.xml中静态注册（当然，动态也可以，这里为了方便测试以减少代码）</span>
<span class="token operator">&lt;</span>manifest xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">></span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">&lt;</span>application<span class="token operator">></span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token operator">&lt;</span>receiver android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".MyBroadcastReceiver1"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter android<span class="token operator">:</span>priority<span class="token operator">=</span><span class="token string">"1000"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.hsong.intent.action.OrderedBroadcastReceiver"</span> <span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">></span>
        <span class="token operator">&lt;</span>receiver android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".MyBroadcastReceiver2"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter android<span class="token operator">:</span>priority<span class="token operator">=</span><span class="token string">"500"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.hsong.intent.action.OrderedBroadcastReceiver"</span> <span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">></span>
        <span class="token operator">&lt;</span>receiver android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".MyBroadcastReceiver3"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter android<span class="token operator">:</span>priority<span class="token operator">=</span><span class="token string">"250"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.hsong.intent.action.OrderedBroadcastReceiver"</span> <span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">></span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>application<span class="token operator">></span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>manifest<span class="token operator">></span>


<span class="token comment" spellcheck="true">// 4. MyActivity类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performSendOrderedBroadcast</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"Ordered广播"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>hsong<span class="token punctuation">.</span>intent<span class="token punctuation">.</span>action<span class="token punctuation">.</span>OrderedBroadcastReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sendOrderedBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>测试与结果：</strong></p>
<pre class=" language-text"><code class="language-text">//receiver1的结果：
[1]action:com.hsong.intent.action.OrderedBroadcastReceiver, data:Ordered广播, context: android.app.ReceiverRestrictedContext@c314c02

//receiver2的结果：
[2]action:com.hsong.intent.action.OrderedBroadcastReceiver, data:Ordered广播, context: android.app.ReceiverRestrictedContext@c314c02
[2]action:com.hsong.intent.action.OrderedBroadcastReceiver, data:老子修改过的data, context: android.app.ReceiverRestrictedContext@c314c02
[2]bundle1:Bundle[{data=Ordered广播}], getResultExtras:Bundle[{data=老子修改过的data}]

//receiver3的结果：若receiver2中的abortBroadcast()调用截断的话，则receiver3不会收到了，其他后面的receivers也一样收不到了。
[3]action:com.hsong.intent.action.OrderedBroadcastReceiver, data:Ordered广播, context: android.app.ReceiverRestrictedContext@c314c02
[3]action:com.hsong.intent.action.OrderedBroadcastReceiver, data:二老子修改过的data, context: android.app.ReceiverRestrictedContext@c314c02
[3]bundle1:Bundle[{data=Ordered广播}], getResultExtras:Bundle[{data=二老子修改过的data}]
</code></pre>
<p>从上可以发现，虽然高优先级的receiver(1)修改的广播续传内容，但是receiver(2)中 intent.getExtras() 的值却是不变的（还是sender发出那些）。如果要获取被前面或者高优先级的receiver修改过的内容的话，应该调用 getResultExtras() 。</p>
<ol start="4">
<li><strong>粘性广播（Sticky Broadcast）</strong></li>
</ol>
<blockquote>
<p><strong>Sticky Broadcast 的使用</strong>：<code>sendStickyBroadcast(Intent)</code><br><strong>Sticky Broadcast 的特点</strong>：</p>
<ul>
<li>使用 <code>sendStickyBroadcast</code> API 还必须在 <code>AndroidManifest.xml</code> 中添加权限 <code>&lt;use-permission android:name=&quot;android.permission.BROADCAST_STICKY&quot;/&gt;</code></li>
<li>此类广播最大特点是，<code>sendStickyBroadcast(Intent)</code> 的 Intent 会一直保留到此广播事件结束（即被 onReceive() 消费掉），且其不像普通广播有 10s 超时 ANR 限制。那仅对于 <em>普通广播</em> 而言，若其 <code>onReceive()</code> 执行太久，超过 10s 就会被系统置为 ***可干掉的 <code>candidate</code> ***，一旦系统资源不够用就会被系统销毁此 <code>candidate广播</code>，不让其执行。</li>
</ul>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// StickyBroadcat例子：</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">// 1. 自定义MyBroadcastReceiver</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBroadcastReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"我收到sticky广播了~"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 2. xml布局文件，一个按钮发送sticky广播，一个注册广播接收器</span>
<span class="token operator">&lt;</span>LineaLayout <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">&lt;</span>Button 
        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"发送sticky广播"</span>
        android<span class="token operator">:</span>onclick<span class="token operator">=</span><span class="token string">"performSendStickyBroadcast"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>Button 
        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"注册广播seceiver"</span>
        android<span class="token operator">:</span>onclick<span class="token operator">=</span><span class="token string">"performRegisterBroadcastReceiver"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>

<span class="token comment" spellcheck="true">// 3. MyActivity类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> MyBroadcastReceiver mReceiver<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performSendStickyBroadcast</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.myintent.stickybroadcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sendStickyBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performRegisterBroadcastReceiver</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filter<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.myintent.stickybroadcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBroadcastReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">registerReceiver</span><span class="token punctuation">(</span>mReceiver<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>mReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>测试与结果：</strong> 当只点击“发送sticky广播”按钮时，没有toast响应。然后，再点击“注册广播seceiver”按钮时，这时就收到之前发送的sticky广播了，即toast提示“我收到sticky广播了~”。即，这种sticky广播就是Intent会一直保留事件结束，哪怕尚未注册receiver。</p>
<ol start="5">
<li><strong>App应用内广播（Local Broadcast）</strong></li>
</ol>
<blockquote>
<p><strong>Local Boradcast 的使用：</strong></p>
<blockquote>
<ul>
<li>注册：<code>LocalBroadcastManager.getInstance(context).registerReceiver(receiver, filter)</code></li>
<li>解注册：<code>LocalBroadcastManager.getInstance(context).unregisterReceiver(receiver)</code></li>
<li>发送：<code>LocalBroadcastManager.getInstance(context).sendBroadcast(Intent)</code></li>
</ul>
<p><strong>Local Boradcast 的特点：</strong><br>因 Android 中的广播是可以跨域的（即跨App），可存在如下问题：</p>
<ol>
<li>other-App 发出与 current-App 的 intent-filter 相匹配的广播时，current-App 会不断收到广播并处理。</li>
<li>current-App 发出与 other-App 的 intent-filter 相匹配的广播时，other-App 会不断收到广播并处理。<br>这样，就出现了 **安全性 &amp;&amp; 效率性 ** 的问题。</li>
</ol>
</blockquote>
<ul>
<li>对于上述 <strong>安全性 &amp;&amp; 效率性</strong> 问题，使用 <strong>App应用内广播</strong> 可解决，可理解为局域广播，只局限于当前App应用内发送与接收。</li>
<li><strong>特别注意：<em>LocalBroadcast 只能动态注册，不可静态注册（即使注册也无效）！</em></strong></li>
</ul>
</blockquote>
<p><em>示例：</em></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// LocalBroadcat例子：</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">// 1. 自定义MyBroadcastReceiver</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBroadcastReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"我收到local广播了~"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 2. xml布局文件，一个按钮发送local广播</span>
<span class="token operator">&lt;</span>LineaLayout <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">&lt;</span>Button 
        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"发送local广播"</span>
        android<span class="token operator">:</span>onclick<span class="token operator">=</span><span class="token string">"performSendLocalBroadcast"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>

<span class="token comment" spellcheck="true">// 3. MyActivity类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> MyBroadcastReceiver mReceiver<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performSendLocalBroadcast</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.myintent.localbroadcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalBroadcastManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filter<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.myintent.localbroadcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBroadcastReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalBroadcastManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>mReceiver<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalBroadcastManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>mReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>小结：</strong></p>
<ul>
<li>对于不同注册方式的广播接收器回调 <code>onReceive(Context context, Intent intent)</code> 中的 <code>context</code> 返回值是不一样的：<blockquote>
<ul>
<li><strong>静态注册的全局广播（Normal/Ordered/Sticky/System）</strong>：<code>android.app.ReceiverRestrictedContext</code></li>
<li><strong>动态注册的全局广播（Normal/Ordered/Sticky/System）</strong>：<code>Activity（即具体send广播的组件）</code></li>
<li><strong>动态注册的应用内广播（LocalBroadcastManager方式）</strong>：<code>android.app.Application</code></li>
</ul>
</blockquote>
</li>
<li>测试发现，当静态和动态都同时注册的话，send 广播后，分分别收到 2 次 <code>onReceive</code> 且各自的 <code>context</code> 类型不同。<strong>并且，动态注册的优先级更高！</strong></li>
<li>测试发现，虽然高优先级的 receiver(1) 修改的广播续传内容，但是 receiver(2) 中 <code>intent.getExtras()</code> 的值却是不变的（还是sender发出那些）。如果要获取被前面或者高优先级的 <code>receiver.setResultExtras(bundle)</code> 修改过的内容的话，应该调用 <code>getResultExtras(flase)</code> 。</li>
<li>若为全局（非<code>LocalBroadcastManager</code>）静态注册的 receiver，无论应用是否处于活动状态，都会进行监听；动态注册的当应用程序关闭后将不再监听。</li>
</ul>
<h2 id="ContentProvider（内容提供者）"><a href="#ContentProvider（内容提供者）" class="headerlink" title="ContentProvider（内容提供者）"></a>ContentProvider（内容提供者）</h2><p>当一个 App 指定的数据集提供给其它应用程序，这就是 <code>ContentProvider</code> 的能力。</p>
<p><strong>（1）简介与特点：</strong></p>
<ol>
<li><code>ContentProvider</code> 实现跨应用间的数据共享。其用于数据的保存（set）和获取（get），并使其对所有应用程序可见。<strong>在Android中，这是实现跨应用共享数据的唯一方式！因为Android没有提供所有应用程序共同访问的公共存储区。</strong></li>
<li>只有需要在多个程序间共享数据，才需要 <code>ContentProvider</code>。如，通讯录数据可被多个应用读取自定义显示在各自的应用里，且必须存储在同一内容提供者中。这样的好处：<strong>统一访问方式！</strong></li>
<li><code>ContentProvider</code> 使用 URI 唯一标识其数据集，且标准以 <strong><code>content://</code></strong> 为前缀，表示该数据由 <code>ContentProvider</code> 管理。</li>
<li>开发人员不会直接使用 <code>ContentProvider</code> 类的对象来存取数据，而是通过 <code>ContentResolver</code> 对象来实现对 <code>ContentProvider</code> 的操作。</li>
</ol>
<p><strong>（2）<code>ContentProvider、ContentResolver、ContentObserver</code> 之间区别：</strong></p>
<blockquote>
<ul>
<li><strong>ContentProvider： 4大组件之内容提供者，主要用于对外提供数据。</strong><br>一个已经实现ContentProvider来提供数据给其它应用来操作，可通过 ContentResolver 来操作别的应用数据，当然在本身应用中也可以。</li>
<li><strong>ContentResolver： 内容解析者，用于获取其它应用 ContentProvider 提供的数据。</strong><pre class=" language-java"><code class="language-java">ContentResolver<span class="token punctuation">.</span><span class="token function">notifyChange</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span> ：发出消息
ContentResolver<span class="token punctuation">.</span><span class="token function">registerContentObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：监听消息
</code></pre>
</li>
<li><strong>ContentObserver： 内容监听器，可以监听数据的变化。</strong><br>目的是观察（捕捉）特定Uri引起的数据库的变化，继而做出相应的处理。类似于数据库里的trigger（触发器），当 ContentObserver 所观察的Uri发生变化，就会触发它。触发器分为 表触发器、行触发器 ，相应地 ContentObserver 也分为 表ContentObserver、行ContentObserver ，当然这与其监听的 Uri MIME Type 有关。</li>
</ul>
<p>总之，一句话：</p>
<blockquote>
<p><strong>使用 <code>ContentResolver</code> 来获取 <code>ContentProvider</code> 提供的数据，同时注册 <code>ContentObserver</code> 监听 <code>Uri</code> 数据变化。</strong></p>
</blockquote>
</blockquote>
<p>学习参考：<a href="https://blog.csdn.net/wenzhi20102321/article/details/53078861">Android内容提供者ContentProvider总结</a></p>
<h1 id="五大存储"><a href="#五大存储" class="headerlink" title="五大存储"></a>五大存储</h1><blockquote>
<p>Android中 5 大存储方式：</p>
<ul>
<li>File</li>
<li>SharedPreference</li>
<li>Sqlite</li>
<li>Network</li>
<li>ContentProvider</li>
</ul>
</blockquote>
<h1 id="七大布局"><a href="#七大布局" class="headerlink" title="七大布局"></a>七大布局</h1><blockquote>
<p>Android中 7 大布局：</p>
<ul>
<li>LinearLayout</li>
<li>RelativeLayout</li>
<li>FrameLayout</li>
<li>ConstraintLayout：AndroidStudio 2.2 新推出，并自 AndroidStudio 2.3 成为默认布局。</li>
<li>AbsoluteLayout（过时）</li>
<li>TableLaout</li>
<li>GridLayout（Android 4.0 新增）</li>
</ul>
</blockquote>
<h2 id="ConstraintLayout（约束布局）"><a href="#ConstraintLayout（约束布局）" class="headerlink" title="ConstraintLayout（约束布局）"></a>ConstraintLayout（约束布局）</h2><blockquote>
<p>ConstraintLayout：AndroidStudio 2.3 起，成为默认布局。为了解决复杂布局时，出现嵌套层级过多引发的性能问题（层级多则绘制更耗时）。</p>
</blockquote>
]]></content>
      <categories>
        <category>面试</category>
        <category>Android面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Android面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 性能优化</title>
    <url>/interviews/android/Android-Resume-4/</url>
    <content><![CDATA[<p>Android面试之《性能优化》总结。对于简单部分，只做总结。至于难点，将做进一步分析与记录。</p>
<span id="more"></span>

<hr>
<p><strong>常见的Android性能优化，大致有如下几大模块（细分小模块）：</strong></p>
<blockquote>
<ul>
<li>稳定性（如：内存溢出/泄漏、崩溃）=&gt; <code>Crash与ANR</code></li>
<li>流畅度（如：卡顿——UI(布局+绘制)、线程优化、响应速度）</li>
<li>耗损（如：耗电、流量、网络）=&gt; <code>代码质量与逻辑</code></li>
<li>安装包（如：APK瘦身）</li>
</ul>
</blockquote>
<h1 id="（一）优化：《稳定性》"><a href="#（一）优化：《稳定性》" class="headerlink" title="（一）优化：《稳定性》"></a>（一）优化：《稳定性》</h1><p>众所周知，Java开发一般不需要手动分配内存和释放内存，这得感谢Java底层机制——JVM及其GC。交由虚拟机帮助分配和释放，但因此导致开发者编程不规范或者不严谨，易出现内存泄漏和内存溢出。</p>
<blockquote>
<p>Android操作系统对整个设备内存做了一个大致的全局把控：  </p>
<ul>
<li>每个App都分配 <code>Dalvik Heap Size</code> ，表示系统分配给每个App内存的最大限制阈值。  </li>
</ul>
<p>此阈值在不同厂商设备是不一样的，查看方式如：</p>
<pre class=" language-bash"><code class="language-bash">➜ ~ adb shell getprop <span class="token operator">|</span> <span class="token function">grep</span> heap
<span class="token punctuation">[</span>dalvik.vm.heapgrowthlimit<span class="token punctuation">]</span>: <span class="token punctuation">[</span>256m<span class="token punctuation">]</span>
<span class="token punctuation">[</span>dalvik.vm.heapmaxfree<span class="token punctuation">]</span>: <span class="token punctuation">[</span>2m<span class="token punctuation">]</span>
<span class="token punctuation">[</span>dalvik.vm.heapminfree<span class="token punctuation">]</span>: <span class="token punctuation">[</span>512k<span class="token punctuation">]</span>
<span class="token punctuation">[</span>dalvik.vm.heapsize<span class="token punctuation">]</span>: <span class="token punctuation">[</span>256m<span class="token punctuation">]</span>
<span class="token punctuation">[</span>dalvik.vm.heapstartsize<span class="token punctuation">]</span>: <span class="token punctuation">[</span>5m<span class="token punctuation">]</span>
<span class="token punctuation">[</span>dalvik.vm.heaptargetutilization<span class="token punctuation">]</span>: <span class="token punctuation">[</span>0.75<span class="token punctuation">]</span>
</code></pre>
<p>总之，Android对每个App限制内存大小：</p>
<blockquote>
<ul>
<li>对应Java代码的 <code>Runtime.getRuntime().maxMemory()</code>。</li>
<li>即 <code>/system/build.prop</code> 中的如下选项值：<ul>
<li><code>dalvik.vm.heapgrowthlimit</code>：当配置清单的 <code>&lt;application android:largeHeap=&quot;false&quot; 或缺省 .../&gt;</code>时，用这个。</li>
<li><code>dalvik.vm.heapsize</code>：当配置清单的 <code>&lt;application android:largeHeap=&quot;true&quot; .../&gt;</code>时，用这个。<br>超出该限制再继续申请，则OOM。</li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<p>所以，Java开发不需要对内存手动分配与释放，但 <strong>需要合理的内存管理</strong> 。</p>
<h2 id="【稳】内存优化点"><a href="#【稳】内存优化点" class="headerlink" title="【稳】内存优化点"></a>【稳】内存优化点</h2><blockquote>
<ol>
<li><em><strong>避免内存泄漏（★★★★★）</strong></em></li>
<li><em><strong>优化内存空间</strong></em><ul>
<li><strong>合理利用对象引用，以助 GC 合理回收。</strong>如：强/软/弱/虚。</li>
<li><strong>减少不必要的内存开销：</strong><ul>
<li><strong>慎用自动装箱</strong>。如：一个 int 占 4bytes，则一个 Integer 占 16bytes。</li>
<li><strong>慎用枚举。</strong> Enum易读且安全，但过度使用在性能上却不如普通常量定义。Android中，枚举内存是常量2~3倍+。</li>
<li><strong>内存复用</strong>：<ul>
<li><strong>充分利用系统内置资源。</strong> 如：<code>strings/colors/icons/animation/simple-layout</code> 等，还能优化apk大小。</li>
<li><strong>充分利用Android特有数据结构。</strong> 如：<code>SparceArray/Pair</code> 等。</li>
<li><strong>视图复用。</strong> 如：<code>ViewHolder</code> 实现 <code>ContentView</code> 复用等。</li>
<li><strong>对象池。</strong> 如：<code>线程池、消息池</code> 等，对象重用以减少对象创建，避免内存抖动等。</li>
<li><strong><code>Bitmap</code>对象复用。</strong> 利用 Bitmap 中的 <code>inBitmap</code> 高级特性，提高系统在 Bitmap 的分配与释放效率，不仅可以复用内存，还能提高读写速度。该特性可以在已经的内存区域中申请一块区域来存放 Bitmap。（★★★★★）=&gt; <em>PS：有待更深研究~~~~</em></li>
</ul>
</li>
</ul>
</li>
<li><strong><code>ListView/RecycleView</code> 优化。</strong></li>
<li><strong><code>LruCache</code> 缓存。</strong>   </li>
<li><strong>图片内存优化：以设置位图规格，根据“采样因子”做压缩，用一些图片缓存方式（如<code>LruCache</code>）对图片进行管理等等。</strong> 由于每个App被分配的 dalvik heap size 有限制，而且图片资源又相对耗内存。所以，解决好图片内存优化，是Android开发中的一大重要模块！！！（参考：<a href="https://blog.csdn.net/haha223545/article/details/95349267%EF%BC%89">https://blog.csdn.net/haha223545/article/details/95349267）</a></li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="1-内存泄漏"><a href="#1-内存泄漏" class="headerlink" title="1. 内存泄漏"></a>1. 内存泄漏</h3><blockquote>
<p><strong>归类一下，常见的内存泄漏有：</strong>  </p>
<ol>
<li>容器中无用对象未清理造成的泄漏</li>
<li>单例/<code>static变量</code>造成的内存泄漏</li>
<li>内部类(<code>匿名、非静态</code>)</li>
<li>资源未关闭/注册未解注册造成的内存泄漏</li>
<li><code>Webview</code> 引起的内存泄漏</li>
<li><code>Handler</code> 引起的内存泄漏</li>
<li>多线程引起的内存泄漏</li>
</ol>
</blockquote>
<h4 id="1-1-容器中无用对象未清理造成的泄漏"><a href="#1-1-容器中无用对象未清理造成的泄漏" class="headerlink" title="1.1 容器中无用对象未清理造成的泄漏"></a>1.1 容器中无用对象未清理造成的泄漏</h4><p>容器中添加对象，当不再需要该对象时，并没有将其引用从容器（集合）中清理掉，就会导致集合容器越来越大。如果该集合容器是 <code>static</code> 的话，情况就更严重。</p>
<p><strong>👉🏻容器引发泄漏的解决方案：</strong></p>
<blockquote>
<p>在 <code>Activity</code> 退出前，将集合里的东西 <code>clear</code>，然后置为 <code>null</code>，再退出程序。如：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xxxList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  xxxList <span class="token operator">=</span> null<span class="token punctuation">;</span>
  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<h4 id="1-2-单例-static变量造成的内存泄漏"><a href="#1-2-单例-static变量造成的内存泄漏" class="headerlink" title="1.2 单例/static变量造成的内存泄漏"></a>1.2 单例/<code>static变量</code>造成的内存泄漏</h4><p><code>static</code> 变量长期维持对象引用，阻止 <code>GC</code> 回收。当 <code>static</code> 变量持有的是大数据对象，如 <code>Bitmap/Context/View/...</code> 等，就更容易引起泄漏等问题。</p>
<p>如，单例中可能会出现 <code>private static Context sContext</code> ，如果该 <code>Context</code> 是 <code>Activity</code> 类型，则就必定出现 <code>leak</code>，此时可以在传入的 <code>Activity Context</code> 参数中，使用 <code>context.getApplicationContext()</code> ，这样就和 <code>Activity</code> 没有关系，也不存在内存泄漏了。</p>
<blockquote>
<p>尽量用 <code>Application Context</code> 代替 <code>Activity Context</code>。</p>
</blockquote>
<h4 id="1-3-内部类-匿名、非静态"><a href="#1-3-内部类-匿名、非静态" class="headerlink" title="1.3 内部类(匿名、非静态)"></a>1.3 内部类(匿名、非静态)</h4><blockquote>
<p>总之，内部类易造成内存泄漏的根本原因是：内部类可持有外部类引用（这也是内部类的特点~~）。  </p>
<p>例如，常见的非静态内部类和匿名内部类，编写不好基本就内存泄漏了：</p>
<ul>
<li><code>Handler</code>、<code>TimerTask</code>、<code>AsyncTask</code>、<code>Thread</code> ……</li>
</ul>
<p><em><strong>👉🏻总之，Android中解决 <code>Activity内部类</code> 内存泄漏的方案为：</strong></em></p>
<ol>
<li>使用 <code>Application Context</code> 代替 <code>Activity Context</code>，让生命周期与APP一样长，就可避免了。</li>
<li>非静态内部类要引用 <code>Actiity</code> ，则优先 <code>软引用</code>。</li>
<li>慎用 <code>static</code> 声明 <code>Context</code> 对象！！！</li>
</ol>
</blockquote>
<h5 id="1-3-1-匿名内部类引发内存泄漏"><a href="#1-3-1-匿名内部类引发内存泄漏" class="headerlink" title="1.3.1 匿名内部类引发内存泄漏"></a>1.3.1 匿名内部类引发内存泄漏</h5><p><em>代码解释：</em></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//可持有 OuterClass 引用。。。</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>匿名内部类 leak 原理同 <code>no-static内部类</code> ，解决方案为：</p>
<blockquote>
<p><strong>改为：静态内部类。</strong></p>
</blockquote>
<h5 id="1-3-2-非静态内部类引发内存泄漏"><a href="#1-3-2-非静态内部类引发内存泄漏" class="headerlink" title="1.3.2 非静态内部类引发内存泄漏"></a>1.3.2 非静态内部类引发内存泄漏</h5><blockquote>
<p>一个 <code>no-static内部类</code> <em><strong>对象实例被声明</strong></em> 成 <code>static</code> ，则其就默认拥有了外部类的实例引用，也即是其生命周期大于外部引用，和整个应用存活的生命周期一样长了。显然，就导致了内存泄漏。  </p>
<p><em>代码解释：</em></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> InnerClass sInnerClazz <span class="token operator">=</span> null<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span>
    sInnerClazz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><em>说明</em>：Activity 每次启动都会使用 InnerClass。而 InnerClass 本身为 no-static 内部类已经持有外部类 OuterClass 的引用了，但在声明对象时用 static 声明了，这又表明了该 no-static-inner-class 又变成与整个应用寿命一样长了，远大于 Activity 了，所以当前 Activity 占用的内存资源根本不可能被正常回收，久而久之就造成了内存泄漏，进而OOM。</p>
</blockquote>
<hr>
<p>总之，无论是匿名内部类还是非静态内部类，都是 <em><strong>因为可持有外部类引用并生命周期大于外部引用的生命周期</strong></em> 。所以，解决办法都是一个方向。</p>
<blockquote>
<p><em><strong>👉🏻匿名内部类、非静态内部类声明成 <code>static</code> 对象引用的解决方案：</strong></em></p>
<ol>
<li>『匿名内部类』：改为 <strong>静态内部类</strong>，如：</li>
<li>『非静态内部类声明成 <code>static</code> 对象引用』：改为 <strong>内部通过 <code>软引用/弱引用</code> 加强。</strong> </li>
</ol>
<p><em><strong>总之，这两种情况的内部类 leak 解决方案，可终极为一个：</strong></em></p>
<blockquote>
<p><strong>优化为：<code>静态内部类 + 软引用/弱引用 内部持有外部引用的严格加强！</code></strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> WeakReference<span class="token operator">&lt;</span>Context<span class="token operator">></span> myContext<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">InnerClass</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          myContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>Context<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> myContext<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<hr>
<h4 id="1-4-资源未关闭-注册未解注册造成的内存泄漏"><a href="#1-4-资源未关闭-注册未解注册造成的内存泄漏" class="headerlink" title="1.4 资源未关闭/注册未解注册造成的内存泄漏"></a>1.4 资源未关闭/注册未解注册造成的内存泄漏</h4><blockquote>
<ul>
<li><strong>资源性对象，诸如 <code>Cursor/File/IO流操作/...</code> 往往都使用了缓冲。且</strong>。当不再使用时，应及时关闭，以便它们的<strong>缓冲（缓存对象）及时回收内存</strong>，而非等待 <code>GC</code> 来处理。<strong>因它们的缓存不仅存在于 JVM 内，还存在于 JVM 之外。所以，如果只是简单的置为 <code>null</code> ，而不关闭它们，就会造成内存泄漏。</strong>  </li>
<li>若事件（诸如 <code>BroadcastReceiver/注册观察者等如EventBus</code>）注册后未解注册，<strong>会导致观察者列表中维持着对象的引用</strong>，阻止 <code>GC</code> 回收。</li>
</ul>
</blockquote>
<p>一般示例写法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xxx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxx <span class="token operator">=</span> null<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> yyy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    yyy<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    yyy <span class="token operator">=</span> null<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="1-5-WebView-引起的内存泄漏"><a href="#1-5-WebView-引起的内存泄漏" class="headerlink" title="1.5 WebView 引起的内存泄漏"></a>1.5 WebView 引起的内存泄漏</h4><p>Android-WebView 除了兼容和性能上的问题外，不同版本和不同定制ROM也有很大差异。<strong>更重要地，<code>WebView</code> 都存在内存泄漏，哪怕在应用中使用过一次，内存就不会被释放掉。</strong> </p>
<blockquote>
<p><strong>解决 <code>WebView</code>内存泄漏方案：</strong> </p>
<ul>
<li><em>为 <code>WebView</code> 所在的 <code>Activity</code> 开启新的独立进程（<code>android:process=&quot;:&lt;process_name&gt;&quot;</code>），与主进程通信则通过 <code>AIDL</code> 方式。且可根据业务需要选择合适时机进行 <code>销毁该独立进程</code>，以达到正常释放内存目的。</em>  <blockquote>
<p><strong>👉🏻终极暴力解决（完美有效）👈🏻：</strong><br><em><strong>在 <code>WebViewActivity.onDestroy()</code> 中 <code>System.exit(0)</code> 杀死当前进程，即直接退出 <code>dvm</code>。</strong></em>  </p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//android.os.Process.killProcess(android.os.Process.myPid());不太管用~</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</li>
</ul>
<p>最后，附上常规的 WebView 优化方案（兼容所有释放）：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 1. 注册的 services/monitors/handlers/... 及时移除并置null。</span>
      <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>mXXXReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      mXXXReceiver <span class="token operator">=</span> null<span class="token punctuation">;</span>
      
    <span class="token comment" spellcheck="true">// 2. 如当前页面有 ImageView，也要及时回收并销毁。如，背景大图，主动回收。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mIVBackground <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Drawable drawable <span class="token operator">=</span> mIVBackground<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>drawable <span class="token keyword">instanceof</span> <span class="token class-name">BitmapDrawable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              BitmapDrawable bitmapDrawable <span class="token operator">=</span> <span class="token punctuation">(</span>BitmapDrawable<span class="token punctuation">)</span> drawable<span class="token punctuation">;</span>
              Bitmap bitmap <span class="token operator">=</span> bitmapDrawable<span class="token punctuation">.</span><span class="token function">getBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>bitmap <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bitmap<span class="token punctuation">.</span><span class="token function">isRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  bitmap<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// ImageView的父组件必须移除此ImageView：</span>
        mIVBackground<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>mIVBackground<span class="token punctuation">)</span><span class="token punctuation">;</span>
      mIVBackground <span class="token operator">=</span> null<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      
      <span class="token comment" spellcheck="true">// 最后，清除 WebView 组件缓存并销毁</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mWebView <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mWebView<span class="token punctuation">.</span><span class="token function">stopLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mWebView<span class="token punctuation">.</span><span class="token function">clearHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mWebView<span class="token punctuation">.</span><span class="token function">removeAllViewsInLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mWebView<span class="token punctuation">.</span><span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mWebView<span class="token punctuation">.</span><span class="token function">setWebViewClient</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mWebView<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mWebView <span class="token operator">=</span> null<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 最后，执行 super.onDestroy 并 System.exit(0) 退出 dvm 进程！</span>
      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//android.os.Process.killProcess(android.os.Process.myPid());不太管用~</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<p><em><strong>PS：特别注意，如果你使用的是腾讯浏览器服务（TBS）<code>X5WebView</code> 的话，则无需像上面那样繁琐，官方API给定一句调用并保证即可一次全部清除完毕：</strong></em></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  QbSdk<span class="token punctuation">.</span><span class="token function">clearAllWebViewCache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p><em><strong>扩展，<code>TBS-X5WebView</code> 使用：</strong></em>(引用自<a href="https://www.jianshu.com/p/93970d419bc7">https://www.jianshu.com/p/93970d419bc7</a>)</p>
<ol>
<li>添加依赖：</li>
</ol>
<pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>
    api <span class="token string">'com.yanzhenjie:permission:2.0.3'</span>
    api <span class="token string">'com.tencent.tbs.tbssdk:sdk:43939'</span> <span class="token comment" spellcheck="true">// 腾讯X5WebView</span>

    implementation <span class="token string">"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"</span>
    implementation <span class="token string">'androidx.core:core-ktx:1.2.0'</span>
    implementation <span class="token string">'androidx.appcompat:appcompat:1.1.0'</span>
    implementation <span class="token string">'com.google.android.material:material:1.1.0'</span>
    implementation <span class="token string">'androidx.constraintlayout:constraintlayout:1.1.3'</span>
    testImplementation <span class="token string">'junit:junit:4.+'</span>
    androidTestImplementation <span class="token string">'androidx.test.ext:junit:1.1.1'</span>
    androidTestImplementation <span class="token string">'androidx.test.espresso:espresso-core:3.2.0'</span>
<span class="token punctuation">}</span>
</code></pre>
<ol start="2">
<li><code>AndroidManifest.xml</code> 配置 <code>service</code>：</li>
</ol>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span>
    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tencent.smtt.export.external.DexClassLoaderProviderService<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dexopt<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:dexopt<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span>
</code></pre>
<ol start="3">
<li><code>Application类</code> 中初始化 <code>TBS</code>： </li>
</ol>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Application<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>export<span class="token punctuation">.</span>external<span class="token punctuation">.</span>TbsCoreSettings<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>QbSdk<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> BaseApplication extends Application <span class="token punctuation">{</span>
    <span class="token annotation builtin">@Override</span>
    <span class="token keyword">public</span> void <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">initX5WebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 初始化x5WebView
     */</span>
    <span class="token keyword">private</span> void <span class="token function">initX5WebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 搜集本地tbs内核信息并上报服务器，服务器返回结果决定使用哪个内核。</span>
        QbSdk<span class="token punctuation">.</span>PreInitCallback cb <span class="token operator">=</span> new QbSdk<span class="token punctuation">.</span><span class="token function">PreInitCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation builtin">@Override</span>
            <span class="token keyword">public</span> void <span class="token function">onViewInitFinished</span><span class="token punctuation">(</span>boolean arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// x5內核初始化完成的回调，为true表示x5内核加载成功，否则表示x5内核加载失败，会自动切换到系统内核。</span>
                LogUtils<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"onViewInitFinished is "</span><span class="token operator">+</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation builtin">@Override</span>
            <span class="token keyword">public</span> void <span class="token function">onCoreInitFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// x5内核初始化接口</span>
        QbSdk<span class="token punctuation">.</span><span class="token function">initX5Environment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 在调用TBS初始化、创建WebView之前进行如下配置</span>
        HashMap map <span class="token operator">=</span> new <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>TbsCoreSettings<span class="token punctuation">.</span>TBS_SETTINGS_USE_SPEEDY_CLASSLOADER<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>TbsCoreSettings<span class="token punctuation">.</span>TBS_SETTINGS_USE_DEXLOADER_SERVICE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QbSdk<span class="token punctuation">.</span><span class="token function">initTbsSettings</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ol start="4">
<li>在 <code>Activity</code> 中使用： </li>
</ol>
<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle
<span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>QbSdk
<span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>WebChromeClient
<span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>WebView
<span class="token keyword">import</span> com<span class="token punctuation">.</span>yanzhenjie<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>AndPermission
<span class="token keyword">import</span> com<span class="token punctuation">.</span>yanzhenjie<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>Permission
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>android<span class="token punctuation">.</span>synthetic<span class="token punctuation">.</span>main<span class="token punctuation">.</span>activity_main<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>

        AndPermission<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">permission</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>WRITE_EXTERNAL_STORAGE<span class="token punctuation">,</span> Permission<span class="token punctuation">.</span>READ_PHONE_STATE<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">onGranted</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token function">onDenied</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true">// 加载进度</span>
        forum_context<span class="token punctuation">.</span>webChromeClient <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">WebChromeClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onProgressChanged</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> WebView<span class="token operator">?</span><span class="token punctuation">,</span> p1<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onProgressChanged</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">)</span>
                LogUtils<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        forum_context<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>javaScriptEnabled <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 开启js</span>
        forum_context<span class="token punctuation">.</span>settingsExtension<span class="token punctuation">.</span><span class="token function">setDisplayCutoutEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 刘海屏适配</span>
        forum_context<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 加载url</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QbSdk<span class="token punctuation">.</span><span class="token function">clearAllWebViewCache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 清除缓存</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ol start="5">
<li><code>activity-布局</code> 文件：</li>
</ol>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.tencent.smtt.sdk.WebView</span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/forum_context<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>
</code></pre>
<hr>
<p>另外，也可动态添加 WebView，如：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动态添加Webview（X5WebView）</span>
LinearLayout<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span> LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
WeakReference weakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用弱引用去持有当前Activity</span>
X5WebView webView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X5WebView</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span> weakReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
webView<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
mWebviewLayout<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>webView<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</blockquote>
<h4 id="1-6-Handler-引起的内存泄漏"><a href="#1-6-Handler-引起的内存泄漏" class="headerlink" title="1.6 Handler 引起的内存泄漏"></a>1.6 Handler 引起的内存泄漏</h4><p><em>代码讲解：</em></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
      Handler mHander <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如上代码就是一个内存泄漏代码，咱们来细说一下： </p>
<blockquote>
<p><strong>首先，<code>mHandler</code> 是一个 <code>non-static-匿名内部类__实例</code> ，所以其一定持有外部类（DemoActivity）的引用。且又因消息队列是在一个 <code>Looper</code> 线程中不断轮询处理消息，那就存在一种情况，当该 <code>DemoActivity</code> 退出时（<em>此时，消息可能延迟、或其他原因还未处理的情况</em>），<code>MessageQueue</code> 中的 <code>Message</code> 持有 <code>mHandler</code> 实例引用，而 <code>mHandler</code> 又持有 <code>DemoActivity</code> 引用，最终导致该 <code>Activity</code> 的内存资源无法及时回收，从而引发内存泄漏。</strong></p>
</blockquote>
<p><strong>👉🏻<code>Handler</code>内存泄漏的解决方案：</strong></p>
<blockquote>
<ol>
<li>在 <code>Activity</code> 销毁（<code>onDestroy()</code>）时，移除 <code>MessageQueue</code> 中的消息，以避免 <code>Looper</code> 线程的 <code>MessageQueue</code> 中有待处理的 <code>Message</code>。如：<blockquote>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span>xxxRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 移除指定消息</span>
  mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 移除所有 Callbacks 和 Messages</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</li>
<li>使用 <code>static-Handler-内部类</code>，然后对 <code>Handler</code> 持有的对象使用 <code>弱引用</code> 。当 GC 时，就可以回收 Handler 持有的对象了。如：<blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> MyHandler mHander <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> WeakReference<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">MyHandler</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>Context<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</li>
</ol>
</blockquote>
<h4 id="1-7-多线程引起的内存泄漏"><a href="#1-7-多线程引起的内存泄漏" class="headerlink" title="1.7 多线程引起的内存泄漏"></a>1.7 多线程引起的内存泄漏</h4><p>常见的由线程引起的 leak 有：<code>Runnable(Thread)</code>、<code>AsyncTask</code> ……</p>
<h5 id="1-7-1-Runnable-Thread"><a href="#1-7-1-Runnable-Thread" class="headerlink" title="1.7.1 Runnable(Thread)"></a>1.7.1 Runnable(Thread)</h5><p>当异步线程持有外部 Activity 的引用，若线程未执行完用户就退出 Activity 了，处理不好线程的归宿就会引发 leak，这是多线程编程中最容易出现的！</p>
<blockquote>
<p><em>👉🏻多线程如 <code>Runnable</code> 的内存泄漏解决方案：<strong>确保 <code>Activity</code> 销毁前终止线程。</strong></em></p>
<p>一般我们是使用 <code>Handler+Thread</code> ，则可通过 <code>mHandler.removeCallbacks(xxxRunnable) 或 mHandler.removeCallbacksAndMessages(null)</code> 来移除异步线程！<br>当然，推荐使用 <code>RxJava</code> 更容易~~</p>
</blockquote>
<h5 id="1-7-2-AsyncTask"><a href="#1-7-2-AsyncTask" class="headerlink" title="1.7.2 AsyncTask"></a>1.7.2 AsyncTask</h5><p><code>AsyncTask = Handler + Thread</code>。leak 原理类同 <code>Runnable</code>，Activity 销毁前 <code>doInBackground()</code> 未得到停止。</p>
<blockquote>
<p><em>👉🏻多线程如 <code>AsyncTask</code> 的内存泄漏解决方案：<strong>推荐使用 <code>cancel() + isCancelled()</code> ！</strong></em></p>
<blockquote>
<ul>
<li>若 AsyncTask 任务 <code>还未开始</code> 且 <code>cancel</code>，则能立即取消任务且不会执行；</li>
<li>若 AsyncTask 任务 <code>已开始</code> 且 <code>cancel</code>，则不能终止线程（直到<code>doInBackground()</code>完毕），<code>cancel</code> 只能让 <code>onPostExecute()</code> 不被执行；<br>因此，<code>cancel</code> 不会终止正在运行的线程，只会给 AsyncTask 设置 <code>cancelled</code> 状态，通知该线程 <code>应该中断</code> 了（注意只是应该）。<br>所以，使用 <code>cancel</code> 是还要检查当前 task 状态（<code>isCancelled()</code>），保证其及时退出：<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> Integer <span class="token function">doInBackground</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// Task被取消了，马上退出</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment" spellcheck="true">// Task被取消了，马上退出</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ul>
</blockquote>
<p><em>PS：<code>AsyncTask</code> 已过时，不使用高级封装前提下（如：<code>RxJava</code>），还不如直接使用 <code>Handler</code> 更好控制。</em></p>
</blockquote>
<h3 id="2-优化内存空间"><a href="#2-优化内存空间" class="headerlink" title="2. 优化内存空间"></a>2. 优化内存空间</h3><h4 id="2-1-合理利用对象引用（强-软-弱-虚）"><a href="#2-1-合理利用对象引用（强-软-弱-虚）" class="headerlink" title="2.1 合理利用对象引用（强/软/弱/虚）"></a>2.1 合理利用对象引用（<code>强/软/弱/虚</code>）</h4><ol>
<li>内部类（非静态+匿名）内存泄漏优化时：可使用 <code>软引用</code> 处理 <code>Activity</code>。</li>
<li>图片优化时：亦可使用 <code>软引用</code> 处理 <code>Bitmap</code>。</li>
<li>自定义App的 <code>Activity任务栈</code> 时：可使用 <code>软引用</code> 存储 <code>Activity</code>，出栈销毁前可判断，也避免内存泄漏。</li>
</ol>
<h4 id="2-2-减少不必要内存开销"><a href="#2-2-减少不必要内存开销" class="headerlink" title="2.2 减少不必要内存开销"></a>2.2 减少不必要内存开销</h4><h5 id="2-2-1-慎用枚举，Google推荐-IntDef-和-StringDef-替代"><a href="#2-2-1-慎用枚举，Google推荐-IntDef-和-StringDef-替代" class="headerlink" title="2.2.1 慎用枚举，Google推荐 @IntDef 和 @StringDef 替代"></a>2.2.1 慎用枚举，Google推荐 <code>@IntDef</code> 和 <code>@StringDef</code> 替代</h5><blockquote>
<p>Google官方推荐在Android中使用 <code>@IntDef</code> 和 <code>@StringDef</code> 替代枚举类型。</p>
</blockquote>
<ul>
<li><p>第一步，添加依赖：</p>
<pre class=" language-groovy"><code class="language-groovy">compile <span class="token string">'com.android.support:support-annotations:25.1.0'</span>
</code></pre>
</li>
<li><p>第二步，定义常量 -&gt; 声明构造方法（<code>@IntDef/@StringDef</code> 包裹所有常量并声明 <code>@Rentention为SOURCE策略</code>）-&gt; <code>@XXX式声明</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>

  <span class="token comment" spellcheck="true">// step-1：先定义 常量</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Jan <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Feb <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Mar <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Apr <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> May <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Jun <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Jul <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Aug <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Sep <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Oct <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Nov <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Dec <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// step-2：声明构造器，用 @IntDef "包住" 常量并 @Retention 定义策略</span>
  <span class="token annotation punctuation">@IntDef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Jan<span class="token punctuation">,</span> Feb<span class="token punctuation">,</span> Mar<span class="token punctuation">,</span> Apr<span class="token punctuation">,</span> May<span class="token punctuation">,</span> Jun<span class="token punctuation">,</span> Jul<span class="token punctuation">,</span> Aug<span class="token punctuation">,</span> Sep<span class="token punctuation">,</span> Oct<span class="token punctuation">,</span> Nov<span class="token punctuation">,</span> Dec<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span>
  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Months</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Months</span> <span class="token keyword">int</span> mNowMonth <span class="token operator">=</span> Jan<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setNowMonth</span><span class="token punctuation">(</span>Jan<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment" spellcheck="true">//声明变量</span>
      <span class="token annotation punctuation">@Months</span> <span class="token keyword">int</span> currentMonth <span class="token operator">=</span> <span class="token function">getCurrentMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">switch</span> <span class="token punctuation">(</span>currentMonth<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">case</span> Jan<span class="token operator">:</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> Feb<span class="token operator">:</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
          <span class="token keyword">default</span><span class="token operator">:</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCurrentMonth</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Months</span> <span class="token keyword">int</span> currentMonth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentMonth <span class="token operator">=</span> currentMonth<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Months</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCurrentMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> mCurrentMonth<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ul>
<p>再如，<code>Toast</code> 源码，就是使用 <code>@IntDef</code> 方式：</p>
<blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// android.widget.Toast.java</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Toast</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"Toast"</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> localLOGV <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/** @hide */</span>
    <span class="token annotation punctuation">@IntDef</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"LENGTH_"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>
            LENGTH_SHORT<span class="token punctuation">,</span>
            LENGTH_LONG
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span>
    <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Duration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Show the view or text notification for a short period of time.  This time
     * could be user-definable.  This is the default.
     * @see #setDuration
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LENGTH_SHORT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Show the view or text notification for a long period of time.  This time
     * could be user-definable.
     * @see #setDuration
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LENGTH_LONG <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
</blockquote>
<h5 id="2-2-2-对象池、线程优化（线程池）"><a href="#2-2-2-对象池、线程优化（线程池）" class="headerlink" title="2.2.2 对象池、线程优化（线程池）"></a>2.2.2 对象池、线程优化（线程池）</h5><p>线程池，即是对象池中的一种。都是为了避免频繁创建对象与销毁对象，造成内存抖动，进而引发 OOM 。所以，使用线程池，是对象可重复利用的表现。</p>
<p>常见的对象池有：</p>
<blockquote>
<ul>
<li>消息池。请用：<code>Message msg = Message.option()</code></li>
<li>线程池。请用：<code>ThreadPoolExecutor 和 ScheduledThreadPoolExecutor</code> 这两个Java中的线程池。</li>
</ul>
</blockquote>
<p>其中，最需要注意的是 <code>线程池</code> 使用。多线程操作与执行，其实是进程的最小颗粒（线程）在对 CPU 时间片获取进行抢占式争夺。如果自己创建 Thread 不光有内存抖动风险，还有 CPU 资源竞争死锁问题。所以，推荐尽量采用线程池创建 Thread 对象。</p>
<h4 id="2-3-ListView-RecycleView-优化"><a href="#2-3-ListView-RecycleView-优化" class="headerlink" title="2.3 ListView/RecycleView 优化"></a>2.3 ListView/RecycleView 优化</h4><p>列表组件优化步骤：</p>
<blockquote>
<ol>
<li>使用ViewHolder模式来提高效率</li>
<li>异步加载：耗时的操作放在异步线程中</li>
<li><code>ListView/RecycleView</code>滑动中请分页加载和停止加载（如：图片、信息填充等）</li>
</ol>
</blockquote>
<p><code>ListView</code> 优化参考：<a href="https://www.jianshu.com/p/f0408a0f0610">ListView的优化</a></p>
<h4 id="2-4-LruCache-缓存"><a href="#2-4-LruCache-缓存" class="headerlink" title="2.4 LruCache 缓存"></a>2.4 LruCache 缓存</h4><blockquote>
<p>LruCache，位于<code>android-support-v4/android.uti.LrueCache</code>包下。</p>
</blockquote>
<p>LruCache算法，又称为近期最少使用算法。</p>
<p>LruCache 中 Lru 算法的实际上是通过 <code>LinkedHashMap </code>来实现的。<code>LinkedHashMap</code> 继承于 <code>HashMap</code>，它使用了一个双向链表来存储 <code>Map</code> 中的 <code>Entry</code> 顺序关系，对于 <code>get、put、remove</code> 等操作，<code>LinkedHashMap</code> 除了要做 <code>HashMap</code> 做的事情，还做些调整 <code>Entry</code> 顺序链表的工作。</p>
<p>LruCache 中将 <code>LinkedHashMap</code> 的顺序设置为 <code>LRU</code> 顺序来实现 <code>LRU</code> 缓存，<em><strong>每次调用 <code>get</code>(也就是从内存缓存中取图片)，则将该对象移到链表的尾端。调用 <code>put</code> 插入新的对象也是存储在链表尾端，这样当内存缓存达到设定的最大值时，将链表头部的对象（近期最少用到的）移除</strong></em>。</p>
<h4 id="2-5-图片内存优化（Bitmap）"><a href="#2-5-图片内存优化（Bitmap）" class="headerlink" title="2.5 图片内存优化（Bitmap）"></a>2.5 图片内存优化（<code>Bitmap</code>）</h4><p>大图占用内存，容易 <code>OOM</code>。故，</p>
<blockquote>
<p><em><strong>👉🏻图片内存优化一般策略：</strong></em>  </p>
<p><strong>1. 等比（或指定缩小因子）缩小图片：</strong>  </p>
<pre class=" language-java"><code class="language-java">BitmapFactory<span class="token punctuation">.</span>Options options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapFactory<span class="token punctuation">.</span>Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
options<span class="token punctuation">.</span>inSampleSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图片宽高都为原来的 1/2，即图片为原来的 1/4</span>
</code></pre>
<p><strong>2. 对图片使用软引用，并及时 <code>recycle</code> ：</strong>  </p>
<pre class=" language-java"><code class="language-java"> SoftReference<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span> bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span>Bitmap<span class="token operator">></span><span class="token punctuation">(</span>xxxBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token keyword">if</span><span class="token punctuation">(</span>bitmap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
       <span class="token keyword">if</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bitmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
           bitmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
           bitmap <span class="token operator">=</span> null<span class="token punctuation">;</span>  
       <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<h5 id="（一）Bitmap-优化①——『尺寸压缩』（inSampleSize-采样率方式），避免OOM（★★★★★）"><a href="#（一）Bitmap-优化①——『尺寸压缩』（inSampleSize-采样率方式），避免OOM（★★★★★）" class="headerlink" title="（一）Bitmap 优化①——『尺寸压缩』（inSampleSize 采样率方式），避免OOM（★★★★★）"></a><strong>（一）Bitmap 优化①——『尺寸压缩』（<code>inSampleSize 采样率方式</code>），避免OOM（★★★★★）</strong></h5><p>Android图片编程中，编码不好就会容易出现如下：</p>
<pre class=" language-text"><code class="language-text">java.lang.OutofMemoryError:bitmap size exceeds VM budget
</code></pre>
<hr>
<p>Bitmap 图片的优化压缩有多种方式，且应对于不同场景，例如常用的有：</p>
<ol>
<li>质量压缩（<code>不会改变尺寸</code>）。<code>boolean isAlreadyCompressedToStream = bitmapObj.compress(CompressFormat format, int quality, OutputStream stream)</code></li>
<li>尺寸压缩（<code>改变尺寸宽高</code>）：有 <code>采样率inSampleSize</code>、直接创建<code>Bitmap.createBitmap(提供width和height...)</code> 等方式。</li>
<li>LibJpeg 压缩。</li>
</ol>
<p><em>ps：本篇主要对图片尺寸 <code>采样率inSampleSize</code> 压缩做详解，其它另外篇幅再做分析。</em></p>
<hr>
<p>这是由于 Android 系统给每个 App DVM 分配内存有限制大小，如果加载 Bitmap ，极容易出现 OOM（Out of Memory）。</p>
<blockquote>
<p><em><strong>所以，如何高效加载 <code>Bitmap</code> 就有必要了，基核心思想为：</strong></em>  </p>
<ul>
<li><strong>原因</strong>：使用 <code>ImageView</code> 来显示图片，大多数情况下 <code>ImageView</code> 并没有原始图片尺寸那么大。若这时把整个原始图片加载并设置给 <code>ImageView</code> 的话，是没有必要的，况且 <code>ImageView</code> 也无法显示出原图。  </li>
<li><strong>解决方案</strong>：<em><strong>可按一定 <code>采样率</code> 将图片缩小再加载进 <code>内存</code> ，最后再设置给 <code>ImageView</code> 。这样图片在 <code>ImageView</code> 上既能显示，又能降低内存并一定程度避免 <code>OOM</code> ，自然而然提升了 <code>Bitmap</code> 的加载性能！</strong></em></li>
</ul>
<p><em><strong>👉🏻首先，把如何高效加载 <code>Bitmap</code> 的核心流程归纳一下：</strong></em>  </p>
<ol>
<li>首先，设置参数 <code>BitmapFactory.Options.inJustDecodeBounds = true</code>（<em><strong>true：只加载图片信息并不加载进入 <code>dvm</code> 内存！</strong></em>）并加载图片；</li>
<li>从 <code>Options</code> 中取出图片 <strong>原始宽高</strong>，即对应 <code>options.outWidth、options.outHeight</code> 属性；</li>
<li>根据 <code>采样率规则</code> 并结合 <code>目标ImageView</code> 所需大小计算出 <code>采样率 inSampleSize</code> ；</li>
<li>最后，归置参数 <code>BitmapFactory.options.inJustDecodeBounds = false</code>（<em><strong>false：会加载图片且计入 <code>dvm</code> 内存！</strong></em>），然后 <code>BitmapFactory.decodeXXX(...)</code> 得到压缩后的 <code>Bitmap</code>，并用于设置给 <code>ImageView</code> 显示。</li>
</ol>
</blockquote>
<hr>
<h5 id="1-加载-Bitmap-的方式（共-4-种：BitmapFactory-decodeXXX-）"><a href="#1-加载-Bitmap-的方式（共-4-种：BitmapFactory-decodeXXX-）" class="headerlink" title="1. 加载 Bitmap 的方式（共 4 种：BitmapFactory.decodeXXX(...)）"></a>1. 加载 Bitmap 的方式（共 4 种：<code>BitmapFactory.decodeXXX(...)</code>）</h5><p>加载 <code>Bitmap</code> 主要由工厂类 <code>BitmapFactory</code> 提供，名为 <code>BitmapFactory.decodeXXX(...) --&gt; BitmapFactory.nativeDecodeXXX(...)</code>，主要有 4 类：</p>
<blockquote>
<ul>
<li><code>BitmapFactory.decodeFile(...)</code>：从 <code>文件</code> 加载得到 <code>Bitmap</code> 对象。</li>
<li><code>BitmapFactory.decodeResource(...)</code>：从 <code>资源</code> 加载得到 <code>Bitmap</code> 对象。</li>
<li><code>BitmapFactory.decodeStream(...)</code>：从 <code>输入流</code> 加载得到 <code>Bitmap</code> 对象。</li>
<li><code>BitmapFactory.decodeByteArray(...)</code>：从 <code>字节数组</code> 加载得到 <code>Bitmap</code> 对象。<br>其中，<code>decodeFile/decodeResource</code> 间接调用了 <code>decodeStream</code>（但是 resource-&gt;stream 还多了个中间步骤）。且这 4 类方法都分别对应有 native 方法 <code>BitmapFactory.nativeDecodeXXX(...)</code>。<pre class=" language-text"><code class="language-text">decodeFile --> decodeStream
decodeResource --> decodeResourceStream..在此设置处理一些options --> decodeStream
</code></pre>
</li>
</ul>
</blockquote>
<h5 id="2-BitmapFactory-Options-参数"><a href="#2-BitmapFactory-Options-参数" class="headerlink" title="2. BitmapFactory.Options 参数"></a>2. BitmapFactory.Options 参数</h5><h5 id="①-inSampleSize-参数"><a href="#①-inSampleSize-参数" class="headerlink" title="① inSampleSize 参数"></a>① inSampleSize 参数</h5><p>以上加载的 4 种方式，都支持带 <code>Options</code> 参数的重载方法，即 <code>BitmapFactory.decodeXXX(..., @Nullable Options opts)</code> （当然，对应的 native 肯定是有 <code>Options</code> 参数的）。</p>
<blockquote>
<p>Bitmap 缩放处理都是通过 <code>Options</code> 参数实现。主要用到了 <code>inSampleSize</code>，即采样率。通过设置 <code>采样率</code> ，以达到 <code>对**图片像素**的**宽、高**进行缩放</code>：   </p>
<ul>
<li><strong>当 <code>inSampleSize ≤ 1</code> 时，即采样后图片大小仍为图片原始大小尺寸。<code>&lt;1</code>，也按 <code>=1</code> 处理。</strong></li>
<li><strong>当 <code>inSampleSize &gt; 1</code> 时，即采样后的图片将会缩小，缩放比为 <code>1/inSampleSize的2次方</code>（<em>因：宽和高都分别缩小了 <code>inSmapleSize</code>！！！</em>）</strong></li>
</ul>
<p><em>例如，一张 1024*1024 像素的图片，采用 ARGB8888 格式存储，那么内存大小 1024×1024×4=4MB。如果 inSampleSize=2，那么采样后的图片内存大小：512×512×4=1MB。</em></p>
</blockquote>
<blockquote>
<p><strong>注意，官方 API 对 <code>inSampleSize</code> 的说明：</strong>  </p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * If set to a value > 1, requests the decoder to subsample the original
 * image, returning a smaller image to save memory. The sample size is
 * the number of pixels in either dimension that correspond to a single
 * pixel in the decoded bitmap. For example, inSampleSize == 4 returns
 * an image that is 1/4 the width/height of the original, and 1/16 the
 * number of pixels. Any value &lt;= 1 is treated the same as 1. Note: the
 * decoder uses a final value based on powers of 2, any other value will
 * be rounded down to the nearest power of 2.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> inSampleSize<span class="token punctuation">;</span>
</code></pre>
<p>大体意思这样的，<code>inSampleSize</code> 取值为 <code>2的幂</code>（如：1，2，4，8……）。如果 <code>inSampleSize</code> 不为2的指数的话，就会 <strong>向下取整为2的指数</strong>（如，<code>inSampleSize=3</code> ，则最终会自动向下取值，最终值为 <code>inSampleSize=2</code>）。</p>
</blockquote>
<hr>
<p><strong>使用 <code>inSampleSize</code> 的注意事项：</strong><br><strong>1. 采样率 <code>inSampleSize</code> 是对像素 <code>宽和高</code> 两个都做缩放，所以是成指数形式（<code>1/(inSampleSize*inSmpleSize)</code>）。</strong><br><strong>2. 通常，<code>inSampleSize</code> 是根据对实际宽高/目标所需宽高，以此公式分别计算得出宽和高的缩放比。</strong><br><strong><em>3. 注意，</em>最终取的缩放比应该是其中最小的，即 <code>inSampleSize=Math.min(widthInSampleSize, heightInSampleSize)</code>，以避免绽放图片太小，设置到 <code>ImageView</code> 中不能铺满从而拉伸导致像素模糊！！！</strong></p>
<p><em>🥵示例，ImageView 大小为 100*100 px，而图片原始大小 200*300 px。则计算得出，宽缩放比为2，高缩放比为3。最终 <code>inSampleSize=2</code>，那么缩放后图片为 100*150，仍然适合 ImageView。若 <code>inSampleSize=3</code>，缩放后图片为 66.7*100</em>，显示其中的宽比 ImageView 所需的目标尺寸 100px 的宽还小，铺不满就会横向拉伸填充，导致看起来像素模糊了！</p>
<hr>
<h5 id="②-inJustDecodeBounds-参数"><a href="#②-inJustDecodeBounds-参数" class="headerlink" title="② inJustDecodeBounds 参数"></a>② inJustDecodeBounds 参数</h5><p>要避免 Bitmap 大图加载到内存导致 OOM，我们就需要一定的采样规则得到采样因子 <code>inSampleSize</code>。而 <code>inSampleSize</code> 的计算公式又是：</p>
<blockquote>
<p><strong>计算公式</strong>：<code>inSampleSize = 原图宽(opts.outWidth)或高(opts.outHeight)/目标显示宽/高</code></p>
</blockquote>
<p>要想得到原图宽和高信息，但又不能预先加载图片以避免分配像素内存，有什么方法呢？</p>
<blockquote>
<p>答：官方的 <code>BitmapFactory.Options.inJustDecodeBounds</code> 参数已经提供便捷了，设置 <code>inJustDecodeBounds = false</code> 即可。  </p>
<blockquote>
<p>该 <code>inJustDecodeBounds</code> 参数字面译为“仅仅解码尺寸界限”，然后就会得到 <code>outXXX</code> 系列 Bitmap 属性 XXX。</p>
<p><code>options.outXXX</code> 有：</p>
<ul>
<li><code>&lt;int&gt; outWidth/outHeight</code>：原图宽/高</li>
<li><code>&lt;ColorSpace&gt; outColorSpace</code>：</li>
<li><code>&lt;Bitmap.Config&gt; outConfig</code>：</li>
</ul>
</blockquote>
</blockquote>
<h5 id="3-高效加载-Bitmap-的核心流程"><a href="#3-高效加载-Bitmap-的核心流程" class="headerlink" title="3. 高效加载 Bitmap 的核心流程"></a>3. 高效加载 <code>Bitmap</code> 的核心流程</h5><blockquote>
<p><em><strong>👉何高效加载 <code>Bitmap</code> 的核心流程：</strong></em><br><strong>一、质量压缩。</strong><br>即对图片质量（<code>存储大小</code>），一般应用于存 <code>储于SD卡、二进制网络传输（如聊天传输图片、上传至服务器）等有大小限制场景</code> 等时，压缩一定质量图片以节约磁盘空间。</p>
<blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Write a compressed version of the bitmap to the specified outputstream.
 * If this returns true, the bitmap can be reconstructed by passing a
 * corresponding inputstream to BitmapFactory.decodeStream(). Note: not
 * all Formats support all bitmap configs directly, so it is possible that
 * the returned bitmap from BitmapFactory could be in a different bitdepth,
 * and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque
 * pixels).
 *
 * @param format   The format of the compressed image
 * @param quality  Hint to the compressor, 0-100. The value is interpreted
 *                 differently depending on the {@link CompressFormat}.
 * @param stream   The outputstream to write the compressed data.
 * @return true if successfully compressed to the specified stream.
 */</span>
<span class="token annotation punctuation">@WorkerThread</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compress</span><span class="token punctuation">(</span>CompressFormat format<span class="token punctuation">,</span> <span class="token keyword">int</span> quality<span class="token punctuation">,</span> OutputStream stream<span class="token punctuation">)</span>
解释参数：
<span class="token operator">-</span> format：想要压缩成的图片格式，如 `JPEG<span class="token operator">/</span>PNG<span class="token operator">/</span>WebP<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`
<span class="token operator">-</span> quality：保留质量。压缩质量比取值 <span class="token number">0</span><span class="token operator">~</span><span class="token number">100</span>，表示将要保留 <span class="token number">0</span><span class="token operator">~</span><span class="token number">100</span><span class="token operator">%</span>（即压缩掉或称丢失质量 `<span class="token number">1</span><span class="token operator">-</span>quality<span class="token operator">%</span>`）。如，<span class="token number">80</span>表示保留原图<span class="token number">80</span><span class="token operator">%</span>的质量，压缩丢掉<span class="token number">20</span><span class="token operator">%</span>质量。
<span class="token operator">-</span> stream：输出流，表示将压缩过后的 Bitmap 以二进制流形式存储。可用于写入sd卡、或者聊天网络图片传输限制（假如wechat聊天只允许发送25kb以下图片）
</code></pre>
</blockquote>
<p><strong>二、尺寸压缩。</strong><br>即对图片尺寸大小进行缩放（<code>内存大小</code>），应用于加载到内存中，减小占用内存，避免 OOM。</p>
<ol>
<li>首先，设置参数 <code>BitmapFactory.Options.inJustDecodeBounds = true</code>（<em><strong>true：只加载图片信息并不加载进入 <code>dvm</code> 内存！</strong></em>）并加载图片信息（故，返回的 Bitmap 是 null！）；</li>
<li>从 <code>Options</code> 中取出图片 <strong>原始宽高</strong>，即对应 <code>options.outWidth、options.outHeight</code> 属性（注意，这个过程就叫采样！）；</li>
<li>根据 <code>采样率规则</code> 并结合 <code>目标ImageView</code> 所需大小计算出 <code>采样率 inSampleSize</code> ；</li>
<li>最后，归置参数 <code>BitmapFactory.options.inJustDecodeBounds = false</code>（<em><strong>false：会加载图片且计入 <code>dvm</code> 内存！</strong></em>），然后 <code>BitmapFactory.decodeXXX(...)</code> 得到压缩后的 <code>Bitmap</code>，并用于设置给 <code>ImageView</code> 显示。</li>
</ol>
</blockquote>
<h5 id="4-高效加载-Bitmap-的代码实现"><a href="#4-高效加载-Bitmap-的代码实现" class="headerlink" title="4. 高效加载 Bitmap 的代码实现"></a>4. 高效加载 <code>Bitmap</code> 的代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Bitmap <span class="token function">decodeSampledBitmapFromResource</span><span class="token punctuation">(</span>Resources res<span class="token punctuation">,</span> <span class="token keyword">int</span> resId<span class="token punctuation">,</span> <span class="token keyword">int</span> reqWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> reqHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BitmapFactory<span class="token punctuation">.</span>Options options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapFactory<span class="token punctuation">.</span>Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    options<span class="token punctuation">.</span>inJustDecodeBounds <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加载图片</span>
    BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> resId<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算缩放比</span>
    options<span class="token punctuation">.</span>inSampleSize <span class="token operator">=</span> <span class="token function">calculateInSampleSize</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> reqHeight<span class="token punctuation">,</span> reqWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    options<span class="token punctuation">.</span>inJustDecodeBounds <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新加载图片</span>
    <span class="token keyword">return</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> resId<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateInSampleSize</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span>Options options<span class="token punctuation">,</span>
    <span class="token keyword">int</span> reqHeight<span class="token punctuation">,</span> <span class="token keyword">int</span> reqWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> options<span class="token punctuation">.</span>outHeight<span class="token punctuation">;</span>
    <span class="token keyword">int</span> width <span class="token operator">=</span> options<span class="token punctuation">.</span>outWidth<span class="token punctuation">;</span>
    <span class="token keyword">int</span> inSampleSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>height <span class="token operator">></span> reqHeight<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>width <span class="token operator">></span> reqWidth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> halfHeight <span class="token operator">=</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> halfWidth <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 计算缩放比，是2的指数</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>halfHeight <span class="token operator">/</span> inSampleSize<span class="token punctuation">)</span> <span class="token operator">>=</span> reqHeight<span class="token punctuation">)</span> 
                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>halfWidth <span class="token operator">/</span> inSampleSize<span class="token punctuation">)</span> <span class="token operator">>=</span> reqWidth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            inSampleSize <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> inSampleSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 调用：</span>
mImageView<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span><span class="token function">decodeSampledBitmapFromResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="【稳】异常拦截优化"><a href="#【稳】异常拦截优化" class="headerlink" title="【稳】异常拦截优化"></a>【稳】异常拦截优化</h2><p>请求服务端数据过程中，访问接口和解析返回数据都可能出错，我们可通过拦截器在这两层拦截错误。</p>
<ul>
<li>在访问接口时，我们不用设置拦截器，因为一旦出现错误，Retrofit会自动抛出异常。比如，常见请求异常404，500，503等等。</li>
<li>在解析数据时，我们设置一个拦截器，判断Result里面的code是否为成功，如果不成功，则要根据与服务器约定好的错误码来抛出对应的异常。比如，token失效，禁用同账号登陆多台设备，缺少参数，参数传递异常等等。</li>
</ul>
<h1 id="（二）优化：《流畅度》"><a href="#（二）优化：《流畅度》" class="headerlink" title="（二）优化：《流畅度》"></a>（二）优化：《流畅度》</h1><p>交互，是面向用户最直接的体验。<strong>流畅度 = 不卡顿、丝滑、快速。</strong> 可从如下 2 大方面入手：</p>
<ul>
<li><strong>UI绘制</strong>：“层级深、页面复杂、刷新不合理”，这些将会导致卡顿，更多表现在UI、启动、跳转到页面的绘制上。</li>
<li><strong>数据处理</strong>：“数据处理量大”，有：1. 主线程处理数据。2. 数据处理占用 CPU 高，导致主线程拿不到时间片。3. 内存增加导致 <code>GC</code> 频繁，从而引起卡顿。</li>
</ul>
<blockquote>
<p><em><strong>Android系统每隔 <code>16.6ms(1/60fps)</code> 就会发出一个 <code>VSYNC信号</code> ，以触发对 UI 渲染。如渲染成功，这样就能达到流畅画面所需的 <code>60FPS（每秒刷新60帧）</code> 。也就是说，60fps 用户感觉不到卡。</strong></em> 例如，若某操作耗时 20ms ，系统得到 VSYNC 信号时就无法正常渲染，就会出现丢帧从而表现卡顿。  </p>
<p><strong>☞总结卡顿原因：</strong></p>
<ol>
<li><strong>绘制任务重，绘制一帧时间长。</strong></li>
<li><strong>主线程太忙，根据系统传递的 <code>VSYNC信号</code> 来时尚未准备好数据从而导致丢帧。</strong></li>
</ol>
</blockquote>
<p>所以，流畅度则从如下几方面优化：</p>
<h2 id="【流】1-布局优化"><a href="#【流】1-布局优化" class="headerlink" title="【流】1. 布局优化"></a>【流】1. 布局优化</h2><p>Google 官方建议 view 布局层级不宜超过 <code>10</code> 且 建议用 <code>RelativeLayout</code> 替代 <code>LinearLayout</code> 作为根布局，AndroidStudio 2.3 起使用 <code>ConstraintLayout</code> 默认根布局。</p>
<blockquote>
<ul>
<li><strong>布局复用</strong>，使用 <code>&lt;include&gt;标签</code> 重用 layout。</li>
<li><strong>提高显示速度</strong>，使用 <code>&lt;ViewStub&gt;</code> 延迟 view 加载，尤其用在 empty-view 空数据占位显示（不显示出来，就不占内存空间）。</li>
<li><strong>减少层级</strong>，使用 <code>&lt;merge&gt;标签</code> 替换父级布局，尤其布局只有一个控件的大多数情况下。</li>
<li><strong>注意使用 <code>wrap_content</code> ，会增加 <code>measure</code> 计算成本</strong>。</li>
<li><strong>删除控件中无用属性</strong>。</li>
</ul>
</blockquote>
<h2 id="【流】2-渲染优化"><a href="#【流】2-渲染优化" class="headerlink" title="【流】2. 渲染优化"></a>【流】2. 渲染优化</h2><p>什么是 <code>过渡绘制（overdraw）</code> ？答：<em>在屏幕上某一像素在同一帧时间内被绘制了多次</em>。尤其是在多层重叠UI结构里，若不可见UI也做绘制操作，就会导致某些像素区域被绘制多次，就会浪费 <code>CPU</code> 和 <code>GPU</code> 资源。</p>
<p><strong>如何检测是否过渡绘制：开发者选项 - 调试GPU过渡绘制 - 显示过渡绘制区域</strong></p>
<blockquote>
<p><strong>避免过渡绘制，优化：</strong>  </p>
<ul>
<li>布局优化。移除 xml 中非必须的背景、移除 Window 默认背景、减少透明度的使用、layout层级扁平化或使用 <code>ConstraintLayout</code> 、按需显示占位背景图片。</li>
<li>自定义view优化。使用 <code>canvas.clipRect() 和 canvas.quickReject()</code> 来帮助系统识别那些可见的区域，只有在此区域内才会被绘制。</li>
</ul>
</blockquote>
<h3 id="1-移除背景-Background"><a href="#1-移除背景-Background" class="headerlink" title="1. 移除背景 Background"></a>1. 移除背景 Background</h3><blockquote>
<ul>
<li><strong>移除 <code>Theme.Window.Background</code></strong><br>Activity是依附于 Window 显示的，通常使用 <code>theme</code> 时都会包含默认的 <code>background</code>。而我们的 <code>layout</code> 布局文件中可能又有自己的背景，从而导致了过绘:<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.AppCompat.Light.NoActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
   &lt;item name=<span class="token string">"android:windowBackground"</span>>@color/background_material_light&lt;/item>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p><strong>解决，把 <code>theme</code> 的 <code>background</code> 去除</strong>：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.AppCompat.Light.NoActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
   &lt;item name=<span class="token string">"android:windowBackground"</span>>@null&lt;/item>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<p>或者，在 <code>Activity.onCreate</code> 中去除 window 背景：</p>
<pre class=" language-java"><code class="language-java"><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</blockquote>
</li>
<li><strong>移除 <code>子控件.Background</code></strong><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>
         <span class="token attr-name">...</span>
          <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/alert_edit_bg1<span class="token punctuation">"</span></span>
         <span class="token attr-name">...</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span><span class="token punctuation">/></span></span>
</code></pre>
其实，这情况在实际开发中很难避免。我们只有尽可能根据情况来决定是否取消背景。<strong>如子view有背景且和父view背景不一样，则可以取消父view背景。</strong></li>
</ul>
</blockquote>
<h3 id="2-layout层级扁平化"><a href="#2-layout层级扁平化" class="headerlink" title="2. layout层级扁平化"></a>2. layout层级扁平化</h3><h4 id="2-1-使用嵌套少的布局"><a href="#2-1-使用嵌套少的布局" class="headerlink" title="2.1 使用嵌套少的布局"></a>2.1 使用嵌套少的布局</h4><blockquote>
<ul>
<li>相同层级下，<code>FrameLayout</code> 效率最高，其次是 <code>LinearLayout</code>。</li>
<li>能用 RelativeLayout/ConstraintLayout 就优先使用，而不是一味使用 LinearLayout。</li>
</ul>
</blockquote>
<p><strong>《<code>RelativeLayout</code> 和 <code>LinearLayout</code> 性能对比》：</strong></p>
<ol>
<li><p>RelativeLayout 会让子View调用 ++2次++  <code>onMeasure</code>，LinearLayout 在 <strong>有weight</strong> 时，也会调用子View  ++2次++  <code>onMeasure</code>。</p>
<blockquote>
<ul>
<li>RelativeLayout 会对 子view 做 2 次 measure。</li>
<li>如果不使用 weight 属性，LinearLayout 会在当前方向上进行 1 次 measure，完成了再对设置过 weight 属性的 子view 做第 2 次 measure。可见，weight 属性对性能有影响，小心使用。</li>
</ul>
</blockquote>
</li>
<li><p>RelativeLayout 的子View如果高度和 RelativeLayout 不同，则会引发效率问题，当子View很复杂时，这个问题会更加严重。如果可以，<strong>尽量使用 <code>padding</code> 代替 <code>margin</code></strong> 。 </p>
<blockquote>
<p>系统的 view 的 measure 方法里对绘制过程做了一个优化：如果我们或者我们的子view没有要求强制刷新，而父view给子view的传入值也没有变化（也就是说子view的位置没变化），就不会做无谓的measure。但是 RelativeLayout 会做 2 次 measure，而在做横向的测量时，纵向的测量结果尚未完成，只好暂时使用 <code>myHeight</code> 传入子view系统，假如子view的 height 不等于（<code>设置了margin</code>）myHeight 的高度，那么 measure 中上面代码所做得优化将不起作用，所以 ++<strong>尽量使用 <code>padding</code> 代替 <code>margin</code></strong>++。 </p>
</blockquote>
</li>
<li><p>在不影响层级深度的情况下,使用 LinearLayout 和 FrameLayout 而不是 RelativeLayout。 采用 RelativeLayout 并不会降低层级深度，所以此时 ++<strong>在根节点上用 LinearLayout 是效率最高的</strong>++。而之所以给开发者默认新建了个 RelativeLayout 是希望开发者能采用尽量少的View层级来表达布局以实现性能最优，因为复杂的View嵌套对性能的影响会更大一些。</p>
</li>
<li><p>能用两层 LinearLayout，尽量用一个 RelativeLayout，在时间上此时 RelativeLayout 耗时更小。另外 LinearLayout 慎用 layout_weight ，也将会增加一倍耗时操作。由于使用 LinearLayout 的 layout_weight，大多数时间是不一样的，这会降低测量的速度。这只是一个如何合理使用Layout的案例，必要的时候，你要小心考虑是否用 layout_weight。总之减少层级结构，才是王道，让 onMeasure 做延迟加载，用 <code>viewStub/include</code> 等一些技巧。</p>
</li>
<li><p>XML布局嵌套影响性能的原因：<strong>实际不是什么 measure/layout/draw，而是在于 “LayoutInflater.from().inflate()” 将xml转换为java代码时，当层级越复杂时，其性能就越低下。</strong></p>
</li>
</ol>
<h4 id="2-2-使用-lt-include-gt-、-lt-merge-gt-、-lt-ViewStub-gt-标签优化-xml"><a href="#2-2-使用-lt-include-gt-、-lt-merge-gt-、-lt-ViewStub-gt-标签优化-xml" class="headerlink" title="2.2 使用 &lt;include&gt;、&lt;merge&gt;、&lt;ViewStub&gt; 标签优化 xml"></a>2.2 使用 <code>&lt;include&gt;、&lt;merge&gt;、&lt;ViewStub&gt;</code> 标签优化 xml</h4><blockquote>
<p><code>&lt;include&gt;、&lt;merge&gt;、&lt;ViewStub&gt;</code> 是官方推荐优化 xml 的标签。</p>
</blockquote>
<ul>
<li><p><strong><code>&lt;merge&gt;</code></strong> ：</p>
<p><code>&lt;merge&gt;</code> 多用于替换 <code>FrameLayout</code> 或当一个布局包含另一个布局时，<code>&lt;merge&gt;</code> 以消除视图层次结构中多余的视图组。</p>
<blockquote>
<p>PS：通过 AndroidStudio 的 <code>Tools - Layout Inspector</code> 来查看布局层级。</p>
<ul>
<li>若 xml 根布局是 <code>FrameLayout</code>，直接替换成 <code>&lt;merge&gt;</code> 就能减少一个布局深度。</li>
<li>若您的主布局文件是垂直布局，引入一个垂直布局的 <code>&lt;include&gt;</code>，这时就可以将 <code>&lt;include&gt;</code> 的根布局替换成 <code>&lt;merge&gt;</code> 。</li>
</ul>
</blockquote>
</li>
<li><p><strong><code>&lt;ViewStub&gt;</code>（延迟加载）</strong>：</p>
<p><code>&lt;ViewStub&gt;</code> 是一个 <strong>不可见、大小为0(即不占布局位置)、占用资源极小</strong> 的 view，能为 xml 加载时减小压力。</p>
<blockquote>
<p><code>&lt;ViewStub&gt;</code> 常用于 <em><strong>进度条、空/错误占位消息</strong></em> 等无需第一时间显示的view，当 <code>inflate()</code> 或 <code>setVisiblity</code> 后才会被对应的 layout 替换并显示。  </p>
<p><strong>注：<code>&lt;ViewStub&gt;</code> 暂不支持 <code>&lt;merge&gt;</code> 标签？？</strong></p>
<p><em>来自官方介绍：</em><br><img src="../../../images/illustration/android/ViewStub-Introduce.png" alt="ViewStub-Introduce.png"></p>
<ul>
<li><strong>注：<em>ViewStub 调用 <code>inflate()</code> 方法后，ViewStub被替换为以 <code>inflateId</code> 为 Id 的视图。</em></strong></li>
</ul>
</blockquote>
</li>
</ul>
<p><em>使用示例：</em></p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- main layout.xml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span><span class="token punctuation">></span></span>
  ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ViewStub</span>
    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/viewStub<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>inflateId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/NoDataLayoutReplacedId_afterInflate<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120dp<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60dp<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/layout_no_data<span class="token punctuation">"</span></span>
  <span class="token punctuation">/></span></span>
  ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- view stub layout --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span><span class="token punctuation">></span></span>
  ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Textview</span>
    <span class="token attr-name">...</span>
    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/noData_tv<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>No Data Found<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FrameLayout</span><span class="token punctuation">></span></span>
</code></pre>
<p><em>调用并显示 ViewStub：</em></p>
<pre class=" language-java"><code class="language-java">ViewStub mViewStub <span class="token operator">=</span> <span class="token punctuation">(</span>ViewStub<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>viewStub<span class="token punctuation">)</span><span class="token punctuation">;</span>
mViewStub<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或 mViewStub.setVisible(View.VISIBLE) ，调用后，ViewStub 从当前父布局移除但其 @layout 的布局沿用其 layout_params 参数（如示例中：width/height/...分别为120dp/60dp/...）。用 @layout 的布局替换了 ViewStub</span>
<span class="token comment" spellcheck="true">//View mNoDataFoundLayout = mViewStub.inflate(); //报错！因为 mViewStub 在 inflate() 完后被移除并替换，不存在了。</span>

<span class="token comment" spellcheck="true">// 注：ViewStub.inflate() 只能调用一次，否则抛找不到异常！如果要用，则用 inflateId 来作为对应 @layout 引用的布局。</span>
<span class="token comment" spellcheck="true">// TextView mTvNoDataFound = mViewStub.findViewById(R.id.noData_tv); //错误！</span>

ViewGroup mNoDataFoundLayout <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>NoDataLayoutReplacedId_afterInflate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inflate() 调用后，则布局完全被替换，则可用 @androi:inflateId 来作为替换布局引用id~~~</span>
ViewGroup mNoDataFoundLayout2 <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>NoDataLayoutReplacedId_afterInflate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时，多次调用也不会错。因为相当于 main-layout 中已经把 ViewStub 用该布局替换了，和平常使用一样。</span>
TextView mTvNoDataFound <span class="token operator">=</span> mNoDataFoundLayout<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>noData_tv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-3-减少自定义-view-过渡绘制（使用clipRect-、quickReject-）"><a href="#2-3-减少自定义-view-过渡绘制（使用clipRect-、quickReject-）" class="headerlink" title="2.3 减少自定义 view 过渡绘制（使用clipRect()、quickReject()）"></a>2.3 减少自定义 view 过渡绘制（使用<code>clipRect()</code>、<code>quickReject()</code>）</h4><blockquote>
<ul>
<li><code>canvas.clipRect()</code>：指定矩形区域，只有在此区域内才会被绘制，以此节约 CPU及GPU 资源。<pre class=" language-java"><code class="language-java">canvas<span class="token punctuation">.</span><span class="token function">clipRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//指定(0,0)到(200,200)矩形区域为绘制区域</span>
</code></pre>
</li>
<li><code>canvas.quickReject()</code>：判断画布是否与指定矩形相交，以此决定是否需要绘制该画布。<pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> isNeedSkipDraw <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">quickReject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RectF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Canvas<span class="token punctuation">.</span>EdgeType<span class="token punctuation">.</span>AA<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>另外，<code>onDraw()</code> 中不要做耗时操作且创建局部对象，如：new Paint()等，应放到构造方法初始化。</li>
</ul>
</blockquote>
<h1 id="（三）优化：《耗损》"><a href="#（三）优化：《耗损》" class="headerlink" title="（三）优化：《耗损》"></a>（三）优化：《耗损》</h1><p>网络问题，归结如下几方面：</p>
<blockquote>
<p><strong>1. 流量耗费。</strong> 过多未经处理的网络请求，会消耗用户更多的流量。<em><strong>高流量消耗会导致经常处于非wifi场景下用户卸载App。</strong></em><br><strong>2. 电量消耗。</strong> 电量消耗快且多，也会增加应用卸载率。<br><strong>3. 用户体验差。</strong> 长期的网络请求超时，尽管使用‘加载进度提示’来从视觉上提升用户体验，但对于玩机爱好者和专业用户而言，是自欺欺人、治标不治本的。于我本人而言，除了丑陋的UI和卡顿，网络请求超时是我最讨厌的，且会立马卸载掉。</p>
</blockquote>
<h2 id="【耗】网络优化（★★★★★）"><a href="#【耗】网络优化（★★★★★）" class="headerlink" title="【耗】网络优化（★★★★★）"></a>【耗】网络优化（★★★★★）</h2><blockquote>
<p>网络优化，主要从这几方面进行：<strong>1.速度 2.成功率 3.流量</strong></p>
<p><strong>1. DNS 优化（IP直连和HttpDns）</strong><br><strong>2. 连接优化（协议层优化）</strong><br><strong>3. 数据传输优化</strong>  </p>
</blockquote>
<h3 id="1-DNS-优化（IP直连和HttpDns）"><a href="#1-DNS-优化（IP直连和HttpDns）" class="headerlink" title="1. DNS 优化（IP直连和HttpDns）"></a>1. DNS 优化（IP直连和HttpDns）</h3><p>网络访问时，第一步就是 DNS 解析，默认使用 <code>运营商的LocalDNS</code> 服务。DNS 完整的解析流程很长，<code>先从本地系统缓存取，若没有就到“最近的 DNS 服务器”取；若没有再到“主域名服务器”取。</code> 每一层都有缓存，但为了域名解析的实时性，每一层缓存都有过期时间。</p>
<blockquote>
<p><strong>传统的 DNS 解析机制有几个缺点</strong>：</p>
<ul>
<li>若缓存时间设置太长，则域名更新不及时；若缓存时间设置太短，则大量 DNS 解析请求影响请求速度；</li>
<li>域名劫持。易被攻击劫持，或被运营商劫持。把域名解析到第三方 IP 地址，据统计劫持率达7%；</li>
<li>DNS 解析过程不受控制，无法保证解析到最快的IP；</li>
<li>一次请求只能解析一个域名。</li>
<li>DNS 解析失败率占互联网失败中很大一种，而且首次解析一般需要几百毫秒。</li>
</ul>
</blockquote>
<p><strong>☞优化方案：</strong></p>
<blockquote>
<ol>
<li>DNS 解析易失败且首次耗时，则可以：<strong>使用 IP 直连，省去 DNS 解析过程，节省这些时间。</strong></li>
<li>使用 <code>HttpDns</code>。HttpDns 是基于 HTTP 协议的域名解析，利用 HTTP 协议与 DNS 服务器的 80 端口进行交互。替代了基于 DNS 协议向 <code>运营商 Local DNS</code> 发起解析请求的传统方式，有效避免 <code>Local DNS</code> 被域名劫持和跨网访问等问题，提高域名域名解析效率。<blockquote>
<p><code>HttpDns</code>：即开发者基于 HTTP 协议，自己实现一套 HttpDns 服务，且由自己去维护一份域名与 IP 的地址簿，而不是使用统一的 DNS 服务器。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前各大云服务商，阿里云和腾讯云等都提供自己的 HttpDns 服务，于普通开发者，只需付出少量费用，去集支持 HttpDns 的 SDK，即可使用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，在使用 <code>OkHttp</code> 时默认使用的是系统的 DNS 服务，可通过这 <code>OkHttp</code> 中的 <code>.dns()</code> 接口，自定义配置 HttpDns。</p>
</blockquote>
</li>
</ol>
</blockquote>
<h3 id="2-连接优化（协议层优化）"><a href="#2-连接优化（协议层优化）" class="headerlink" title="2. 连接优化（协议层优化）"></a>2. 连接优化（协议层优化）</h3><blockquote>
<ol>
<li>启用 <code>keep-alive</code> 来缓存（节省建立时间），<code>OkHttp</code> 已默认打开，但需要服务器支持。</li>
<li>使用 <code>Http2</code> 来复用请求连接（引入了“多工”、头信息压缩、服务器推送等特性）。</li>
</ol>
</blockquote>
<p>随着 HTTP 协议技术不断迭代升级（0.9、1.0、1.1、2等），都经过了一次又一次的优化。例如：<br><strong>HTTP 1.1 引入“持久连接”，多个请求被复用，无需重建 TCP 连接，而 TCP 连接在移动互联网场景下成本很高，节省了时间与资源、流量。</strong></p>
<h3 id="3-数据传输优化"><a href="#3-数据传输优化" class="headerlink" title="3. 数据传输优化"></a>3. 数据传输优化</h3><blockquote>
<ul>
<li><strong><code>gzip</code>压缩，<code>okhttp</code> 默认支持接收 gzip 压缩。</strong></li>
<li>使用 <code>protoful buffer</code> 格式代替 <code>json，xml</code></li>
<li>图片处理。使用 <code>webp</code> 代替 <code>png/jpg</code></li>
<li>判断网络环境（WiFi/2G/3G/4G/5G/6G/…），下发不同图片。</li>
<li>HTTP 开启缓存/本地缓存</li>
<li>请求合并</li>
</ul>
</blockquote>
<h4 id="3-1-gzip-压缩"><a href="#3-1-gzip-压缩" class="headerlink" title="3.1 gzip 压缩"></a>3.1 <code>gzip</code> 压缩</h4><p>HTTP 协议上的 gzip 编码是一种用来改进 web 应用性能的技术，用来减少传输数据量大小。因此，减少传输数据量有两个好处：</p>
<ul>
<li>减少流量消耗。</li>
<li>减小传输时间。</li>
</ul>
<p>对于 post 请求，body 可以做 gzip 压缩的，header 也可以做数据压缩。返回数据的 body 也可以做 gzip 压缩，body 数据体积可以缩小到原来的 30% 左右。</p>
<h4 id="3-2-protoful-buffer-数据格式"><a href="#3-2-protoful-buffer-数据格式" class="headerlink" title="3.2 protoful buffer 数据格式"></a>3.2 <code>protoful buffer</code> 数据格式</h4><p>相比 json/xml ，<strong>protoful 是列序化后的二进制数据，google推出新的数据交换格式。优点是“体积更小、传输效率更快，且支持多语言”，缺点是“不直观，使用不如 json/xml 方便”。</strong>。</p>
<h4 id="3-3-图片处理，webp-图片格式"><a href="#3-3-图片处理，webp-图片格式" class="headerlink" title="3.3 图片处理，webp 图片格式"></a>3.3 图片处理，<code>webp</code> 图片格式</h4><p>webp 在移动数据传输中，图片占比仍很大，webp具有更优的图像数据压缩算法，在拥有肉眼无法识别的图像质量前提下。优点是 <strong>“更小图片体积，同时具备无损和有损的压缩模式、Alpha 透明及动画特性，在 JPEG 和 PNG 上的转化效果都很棒、稳定和统一。”</strong> </p>
<blockquote>
<p><strong>一、图片下载</strong>   </p>
<ul>
<li><strong>使用 <code>WebP</code> 格式：</strong> 同样的照片，WebP 格式大幅度节省流量。相对 JPEG，流量能节省近 25%~30%；相对 PNG，流量能节省近 80%。关键是使用 WebP 格式图片质量没有改变。</li>
<li><strong>使用缩略图：</strong> App中需要加载的图片按需加载，列表中的图片根据需要的尺寸加载合适的缩略图即可，只有用户看大图时再加载原图。既节省流量，也节省内存。如，某些某公司的图片存储服务在原图链接之后拼接宽高参数，根据参数的不同返回相应的图片。  </li>
</ul>
<p><em><strong>例如</strong></em>，针对网络情况，返回不同的图片数据，一种是高清大图，一种是正常图片，一种是缩略小图。当用户处于wifi下给控件设置高清大图，当4g或者3g模式下加载正常图片，当弱网条件下加载缩略图。</p>
<p><strong>二、图片上传</strong><br>图片（文件）的上传失败率比较高，不仅仅因为大文件，同时 <strong>带宽、时延、稳定性</strong> 等因素在此场景下的影响也更加明显；</p>
<ul>
<li>避免整文件传输，采用分片传输；</li>
<li>根据网络类型以及传输过程中的变化动态的修改分片大小；</li>
<li>每个分片失败重传的机会。</li>
</ul>
</blockquote>
<p>备注：图片上传是一项看似简单、共性很多但实际上复杂、需要细分的工作。移动互联网的场景和有线的场景是有很多区别的，例如移动网络的质量/带宽经常会发生“跳变”，但有线网络却是“渐变”。</p>
<h4 id="3-4-判断网络环境（WiFi-2G-3G-4G-5G-6G-…）"><a href="#3-4-判断网络环境（WiFi-2G-3G-4G-5G-6G-…）" class="headerlink" title="3.4 判断网络环境（WiFi/2G/3G/4G/5G/6G/…）"></a>3.4 判断网络环境（WiFi/2G/3G/4G/5G/6G/…）</h4><p>判断网络环境，就是指请求大量数据前可先向服务器上报设备当前的网络环境，服务器根据设备的网络环境，下发不同质量的图片，或屏蔽一些非关键数据，以保证在网络不佳的情况下也能有较流畅的体验。</p>
<h4 id="3-5-请求合并"><a href="#3-5-请求合并" class="headerlink" title="3.5 请求合并"></a>3.5 请求合并</h4><p>即将多个请求合并为一个进行请求，如果某个页面内请求过多，也可以考虑做一定的请求合并。</p>
<p><strong>总之，节省网络和流量还可从其它：</strong></p>
<blockquote>
<ol>
<li>断点续传，文件、图片等的下载，采用断点续传，不浪费用户之前消耗过的流量；</li>
<li>重试策略，一次网络请求的失败，需要多次的重试来断定最终的失败，可以参考Volley的重试机制实现。</li>
<li>Protocol Buffer，是Google的一种数据交换的格式，它独立于语言，独立于平台。相较于目前常用的Json，数据量更小，意味着传输速度也更快。</li>
<li><strong>尽量避免客户端的轮询，而使用服务器推送的方式；</strong>（PS：此种方式，我以前公司用到过，手动轮询确实不是好方法）</li>
<li>数据更新采用增量，而不是全量，仅将变化的数据返回，客户端进行合并，减少流量消耗；</li>
</ol>
</blockquote>
<h1 id="（四）优化：《包体积》"><a href="#（四）优化：《包体积》" class="headerlink" title="（四）优化：《包体积》"></a>（四）优化：《包体积》</h1><h2 id="【包】APK瘦身"><a href="#【包】APK瘦身" class="headerlink" title="【包】APK瘦身"></a>【包】APK瘦身</h2><p>原则上，安装包大小对使用无影响，但是从用户角度来说就有影响了。若安装包越大，则用户下载门槛就越高。特别是在移动网络情况下，如果包越大，耗流量越多，用户可能就会从犹豫到放弃（ <em>PS：我个人基本是这种情况，除非非常大众使用的App会坚持一下~</em> ）。所以，<strong>减小包体积，可提高用户下载量和体验。</strong></p>
<p><strong>分析一个apk包的主要信息构成：</strong></p>
<blockquote>
<p>一、AndroidStudio，<code>Build - Analyze APK...</code> 来分析一个apk信息，示例（如：酷安）：<br><img src="../../../images/illustration/android/Analyze-APK(CoolMarket.apk).png" alt="Analyze-APK(CoolMarket.apk).png"></p>
<ul>
<li><strong>lib文件夹</strong>：存放的第三方库，如：*.so，*.aar，*.jar等。</li>
<li><strong>res文件夹</strong>：resource缩写，存放资源文件（xml/strings/colors/pic/…），会自动生成对应 ID 并映射到 <code>.R</code> 文件，访问资源直接使用ID。</li>
<li><strong>classes.dex</strong>。 Dalvik 字节码程序，让 DVM 可执行。通常情况下，Android应用在打包时通过 AndroidSDK 中的 <code>dx</code> 工具将 <code>Java字节码class</code> 转换为 <code>Dalvik字节码</code>。</li>
<li><strong>assets文件夹</strong>：存放一次配置文件、资源文件、fonts文件等。assets不会自动生成对应ID，而是通过 <code>AssetManager</code> 类的接口获取。</li>
<li><strong>META-INF</strong>：保存应用的签名信息，此签名信息可验证 APK 文件完整性。</li>
<li><strong>resources.arsc</strong>：记录资源文件和其ID之间的映射关系，用来根据资源ID找资源。</li>
<li><strong>AndroidManifest.xml</strong>：Android应用的配置清单文件，一些组件的注册信息、权限等。</li>
</ul>
</blockquote>
<p><strong>优化一个apk包的体积大小：</strong></p>
<blockquote>
<p>一个apk包的主要占比情况如上组成，则可根据从如下几方面优化：</p>
<ul>
<li><strong>代码混淆</strong>。使用 <code>proGuard</code> 代码混淆工具，它包括 <em><strong>压缩、优化、混淆</strong></em> 等功能。</li>
<li><strong>资源优化</strong>。例如使用 <code>Android Link</code> 删除冗余资源，使用微信一款工具叫啥（?）来对诸如 <code>string命名长度</code> 等方面优化。</li>
<li><strong>图片优化</strong>。例如使用 <code>AAPT</code> 对 PNG 格式图片做压缩，降低图片色彩位数等，使用 <code>WebP</code> 图片格式。</li>
<li><strong>避免重复功能的库</strong>。</li>
<li><strong>插件化</strong>。例如，某些功能模块放在服务器上，按需动态下载安装，可以减少用户初始安装包大小，以增加下载量和用户体验。</li>
</ul>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://blog.csdn.net/haha223545/category_7889161.html">CSDN-Android-性能优化</a></li>
<li><a href="https://www.jianshu.com/p/4d6c38e1f5b8">简书-关于Android性能优化，该从哪些方面入手？</a></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
        <category>Android面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Android面试</tag>
        <tag>Android性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的 Hexo 报错与解决</title>
    <url>/dev-tools/hexo/Hexo-Issues/</url>
    <content><![CDATA[<p>hexo 使用过程中，经常遇到一些稀奇古怪的问题。经查阅后解决，现将这些常见的错误与处理策略一一记录。</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://leunggeorge.github.io/2017/07/09/%E6%89%A7%E8%A1%8Chexo%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/">执行 hexo 时的一些报错处理</a></li>
</ul>
<h1 id="Deprecated：use-date-for-updated"><a href="#Deprecated：use-date-for-updated" class="headerlink" title="Deprecated：use_date_for_updated"></a>Deprecated：<code>use_date_for_updated</code></h1><p>因安装一些模块，中途又跟踪提示 fix ，最后莫名其妙地把 hexo 从 <code>4.2.0</code> 升级到了 <code>5.4.0</code> ，在使用 hexo 操作（<code>hexo server</code>, etc.）时，出现如下警告提示：</p>
<pre class=" language-text"><code class="language-text">Deprecated config detected: "use_date_for_updated" is deprecated, please use "updated_option" instead. See https://hexo.io/docs/configuration for more details.
</code></pre>
<blockquote>
<p><strong>原因：</strong> 提示 <code>use_date_for_updated</code> 过时。<br><strong>解决办法：</strong>： 根据提示，用 <code>updated_option</code> 替换即可。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 修改文件：&lt;hexo-blog>/_config.yml</span>
<span class="token comment" spellcheck="true"># Date / Time format</span>
<span class="token comment" spellcheck="true">## Use post's date for updated date unless set in front-matter</span>
<span class="token key atrule">updated_option</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre>
</blockquote>
]]></content>
      <categories>
        <category>技术篇</category>
        <category>工具指南</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>报错</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>如何美化 hexo+next 个人博客？(入门篇2)</title>
    <url>/dev-tools/hexo/How-To-Config/</url>
    <content><![CDATA[<p>Hexo博客搭建成功后，其实我们就已经可以愉快地进行写文章了。但是，由于个人喜好，我们可能需要自定义设置一下创建的博客系统。这样，既也助于我们有更好的心情去编写文章，又能吸引更多访客的阅读。So，我们来看看如何进行常见的个性化设置吧？</p>
<span id="more"></span>

<!-- [toc] -->

<blockquote>
<p><strong>更多参考：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/dta0502/article/details/89607895">Hexo-Yilia 进阶笔记(CSDN)</a></li>
<li><a href="https://tding.top/archives/9a232bbe.html">Hexo-Yilia 进阶笔记(Hexo)</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1684713?from=article.detail.1626165">Hexo-Matery 主题美化</a></li>
</ul>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初始创建好的 <code>Hexo+next</code> 基本可以用，也简洁。但是，我们还是有需要进一步美化一下。</p>
<p>无非就是主题与排版，围绕的核心配置文件不外乎：</p>
<blockquote>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span>/<span class="token punctuation">{</span>your_hexo_blog<span class="token punctuation">}</span>
   ├────────_config.yml <span class="token comment" spellcheck="true">#全局配置</span>
   ├────────themes/hexo-theme-next/_config.yml <span class="token comment" spellcheck="true">#next主题配置：后面的大多数都在这里配置</span>
</code></pre>
</blockquote>
<p>现在，就按我自己的喜好做如下个性化配置吧！（例如：<a href="https://jiyiqini.github.io/">我的个人博客</a>）</p>
<p><em>PS: 本文是基于 Hexo+next 讲解的。</em></p>
<h1 id="新增网站头信息（Site）"><a href="#新增网站头信息（Site）" class="headerlink" title="新增网站头信息（Site）"></a>新增网站头信息（Site）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 位于 ../&lt;your_hexo_blog>/_config.yml#Site：</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 博客标题。例如：“我的学习之旅”
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'博客副标题，用于简单描述。'</span>
<span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'作者个人描述，例如一个座右铭：好好学习，天天向上。'</span>
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> 关键字 <span class="token comment" spellcheck="true">#默认为空</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 作者名称
<span class="token key atrule">language</span><span class="token punctuation">:</span> 博客语言类型。<span class="token comment" spellcheck="true">#例如：zh-CN</span>
<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">'时区'</span> <span class="token comment" spellcheck="true">#默认为空，表示当前用户所在时区</span>
</code></pre>
<h1 id="配置“关于-分类-标签-搜索-404”等常见入口"><a href="#配置“关于-分类-标签-搜索-404”等常见入口" class="headerlink" title="配置“关于/分类/标签/搜索/404”等常见入口"></a>配置“关于/分类/标签/搜索/404”等常见入口</h1><blockquote>
<p>基本步骤：  </p>
<ol>
<li><code>hexo new page xxx</code> –&gt; 编辑对应的 <code>index.md</code> 内容  </li>
<li><code>../themes/theme-hexo-next/_config.yml$menu</code> 中开启：  <pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Menu Settings</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Usage: `Key: /link/ || icon`</span>
<span class="token comment" spellcheck="true"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span>
<span class="token comment" spellcheck="true"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span>
<span class="token comment" spellcheck="true"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -> archives).</span>
<span class="token comment" spellcheck="true"># External url should start with http:// or https://</span>
<span class="token key atrule">menu</span><span class="token punctuation">:</span>
<span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>home
<span class="token key atrule">about</span><span class="token punctuation">:</span> /about/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>user
<span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>tags
<span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>th
<span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>archive
<span class="token comment" spellcheck="true">#schedule: /schedule/ || fa fa-calendar</span>
<span class="token comment" spellcheck="true">#sitemap: /sitemap.xml || fa fa-sitemap</span>
<span class="token comment" spellcheck="true">#commonweal: /404/ || fa fa-heartbeat</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Enable / Disable menu icons / item badges.</span>
<span class="token key atrule">menu_settings</span><span class="token punctuation">:</span>
<span class="token key atrule">icons</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true">#是否启用图标</span>
<span class="token key atrule">badges</span><span class="token punctuation">:</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true">#是否显示角标数（栏目下文章数目）</span>
</code></pre>
</li>
</ol>
</blockquote>
<ul>
<li><p><strong>关于：</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建 about</span>
$ hexo new page about

<span class="token comment" spellcheck="true"># 编辑内容（../source/about/index.md）</span>
---
title: 关于介绍              <span class="token comment" spellcheck="true">#当前页标题</span>
date: 2020-05-16 18:04:21   <span class="token comment" spellcheck="true">#当前文件创建时间</span>
comments: <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">#禁用评论</span>
---
<span class="token punctuation">..</span>.更多详细介绍，根据markdown语法编写即可<span class="token punctuation">..</span>.
</code></pre>
</li>
<li><p><strong>分类：</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建 categories</span>
$ hexo new page categories

<span class="token comment" spellcheck="true"># 编辑内容（../source/categories/index.md）</span>
---
title: 文章分类              <span class="token comment" spellcheck="true">#当前页标题</span>
date: 2020-05-16 13:21:33   <span class="token comment" spellcheck="true">#当前文件创建时间</span>
categories: Testing         <span class="token comment" spellcheck="true">#分类名</span>
type: <span class="token string">"categories"</span>          <span class="token comment" spellcheck="true">#设置页面类型</span>
comments: <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">#禁止评论</span>
---
<span class="token punctuation">..</span>.更多详细介绍，根据markdown语法编写即可<span class="token punctuation">..</span>.
</code></pre>
</li>
<li><p><strong>标签：</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建 tags</span>
$ hexo new page tags

<span class="token comment" spellcheck="true"># 编辑内容（../source/tags/index.md）</span>
---
title: 文章分类              <span class="token comment" spellcheck="true">#当前页标题</span>
date: 2020-05-16 13:21:07   <span class="token comment" spellcheck="true">#当前文件创建时间</span>
type: <span class="token string">"tags"</span>                <span class="token comment" spellcheck="true">#设置页面类型</span>
comments: <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">#禁止评论</span>
---
<span class="token punctuation">..</span>.更多详细介绍，根据markdown语法编写即可<span class="token punctuation">..</span>.
</code></pre>
</li>
<li><p><strong>404：</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建 404</span>
$ hexo new page 404

<span class="token comment" spellcheck="true"># 编辑内容（../source/404/index.md）</span>
---
title: 404                  <span class="token comment" spellcheck="true">#404 Not Found：该页无法显示</span>
date: 2020-05-16 14:11:34   <span class="token comment" spellcheck="true">#当前文件创建时间</span>
comments: <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">#禁止评论</span>
permalink: /404
type: <span class="token string">"404"</span>
layout: <span class="token string">"404"</span>
---
<span class="token punctuation">..</span>.更多详细介绍，根据markdown语法编写即可<span class="token punctuation">..</span>.
</code></pre>
</li>
<li><p><strong>搜索：</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hexo 站点目录下执行安装命令：</span>
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 编辑global配置（../&lt;your_hexo_blog>/_config.yml#search）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Search</span>
search:
  path: search.xml    <span class="token comment" spellcheck="true">#索引文件的路径，相对于站点根目录</span>
  field: post         <span class="token comment" spellcheck="true">#搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</span>
  content: <span class="token boolean">true</span>
  format: html
  limit: 10000        <span class="token comment" spellcheck="true">#限制搜索的条目数</span>
</code></pre>
</li>
</ul>
<h1 id="配置字体"><a href="#配置字体" class="headerlink" title="配置字体"></a>配置字体</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 编辑global配置（../&lt;your_hexo_blog>/_config.yml#Font-Settings），若没有则添加。</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>

<span class="token comment" spellcheck="true"># Font-Settings</span>
<span class="token key atrule">font</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># Use custom fonts families or not.</span>
  <span class="token comment" spellcheck="true"># Depended options: `external` and `family`.</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

  <span class="token comment" spellcheck="true"># Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font options:</span>
  <span class="token comment" spellcheck="true"># `external: true` will load this font family from `host` above.</span>
  <span class="token comment" spellcheck="true"># `family: Times New Roman`. Without any quotes.</span>
  <span class="token comment" spellcheck="true"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span>

  <span class="token comment" spellcheck="true"># Global font settings used for all elements inside &lt;body>.</span>
  <span class="token key atrule">global</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> 
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for site title (.site-title).</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span> 

  <span class="token comment" spellcheck="true"># Font settings for headlines (&lt;h1> to &lt;h6>).</span>
  <span class="token key atrule">headings</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> Roboto Slab
    <span class="token key atrule">size</span><span class="token punctuation">:</span> 

  <span class="token comment" spellcheck="true"># Font settings for posts (.post-body).</span>
  <span class="token key atrule">posts</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for &lt;code> and code blocks.</span>
  <span class="token key atrule">codes</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>
    
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 编辑theme配置（../themes/theme-hexo-next/_config.yml#font），默认在</span>
<span class="token comment" spellcheck="true"># next主题配置中也有Font Settings。</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Font Settings</span>
<span class="token comment" spellcheck="true"># See: https://theme-next.org/docs/theme-settings/#Fonts-Customization</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Find fonts on Google Fonts (https://www.google.com/fonts)</span>
<span class="token comment" spellcheck="true"># All fonts set here will have the following styles:</span>
<span class="token comment" spellcheck="true">#   light | light italic | normal | normal italic | bold | bold italic</span>
<span class="token comment" spellcheck="true"># Be aware that setting too much fonts will cause site running slowly</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># To avoid space between header and sidebar in scheme Pisces / Gemini, Web Safe fonts are recommended for `global` (and `title`):</span>
<span class="token comment" spellcheck="true"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>

<span class="token key atrule">font</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

  <span class="token comment" spellcheck="true"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font options:</span>
  <span class="token comment" spellcheck="true"># `external: true` will load this font family from `host` above.</span>
  <span class="token comment" spellcheck="true"># `family: Times New Roman`. Without any quotes.</span>
  <span class="token comment" spellcheck="true"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span>

  <span class="token comment" spellcheck="true"># Global font settings used for all elements inside &lt;body>.</span>
  <span class="token key atrule">global</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> Lato
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for site title (.site-title).</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for headlines (&lt;h1> to &lt;h6>).</span>
  <span class="token key atrule">headings</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for posts (.post-body).</span>
  <span class="token key atrule">posts</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for &lt;code> and code blocks.</span>
  <span class="token key atrule">codes</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>
</code></pre>
<h1 id="配置个人信息栏（头像、内联链接、友情链接等）"><a href="#配置个人信息栏（头像、内联链接、友情链接等）" class="headerlink" title="配置个人信息栏（头像、内联链接、友情链接等）"></a>配置个人信息栏（头像、内联链接、友情链接等）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.头像。编辑theme配置（../themes/hexo-theme-next/_config.yml#avatar）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Sidebar Avatar</span>
<span class="token key atrule">avatar</span><span class="token punctuation">:</span>
  <span class="token key atrule">url</span><span class="token punctuation">:</span> /images/avatar.jpg   <span class="token comment" spellcheck="true">#将个人头像图片放在 ../themes/hexo-theme-next/source/images/ 下。例如：avatar.jpg</span>
  <span class="token key atrule">rounded</span><span class="token punctuation">:</span> <span class="token boolean important">true             </span><span class="token comment" spellcheck="true">#头像是否显示为圆图</span>
  <span class="token key atrule">rotated</span><span class="token punctuation">:</span> <span class="token boolean important">true             </span><span class="token comment" spellcheck="true">#鼠标悬浮在头像上，是否启用头像旋转的特效</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.社交链接。编辑theme配置（../themes/hexo-theme-next/_config.yml#social）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Usage: `Key: permalink || icon`</span>
<span class="token comment" spellcheck="true"># Key is the link label showing to end users.</span>
<span class="token comment" spellcheck="true"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span>
<span class="token key atrule">social</span><span class="token punctuation">:</span>
  <span class="token key atrule">GitHub</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/jiyiqini <span class="token punctuation">|</span><span class="token punctuation">|</span> fab fa<span class="token punctuation">-</span>github  <span class="token comment" spellcheck="true">#Github，填写个人github主页地址</span>
  <span class="token key atrule">E-Mail</span><span class="token punctuation">:</span> mailto<span class="token punctuation">:</span>sh1426574360@163.com <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>envelop  <span class="token comment" spellcheck="true">#E-Mail，填写个人邮箱地址</span>
  <span class="token comment" spellcheck="true">#Weibo: https://weibo.com/2949425821 || fab fa-weibo</span>
  <span class="token comment" spellcheck="true">#Google: https://plus.google.com/yourname || fab fa-google</span>
  <span class="token comment" spellcheck="true">#Twitter: https://twitter.com/yourname || fab fa-twitter</span>
  <span class="token comment" spellcheck="true">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span>
  <span class="token comment" spellcheck="true">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span>
  <span class="token comment" spellcheck="true">#YouTube: https://youtube.com/yourname || fab fa-youtube</span>
  <span class="token comment" spellcheck="true">#Instagram: https://instagram.com/yourname || fab fa-instagram</span>
  <span class="token comment" spellcheck="true">#Skype: skype:yourname?call|chat || fab fa-skype</span>

<span class="token key atrule">social_icons</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true          </span><span class="token comment" spellcheck="true">#是否开启社交链接icon</span>
  <span class="token key atrule">icons_only</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">transition</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3.友情链接。编辑theme配置（../themes/hexo-theme-next/_config.yml#links_settings）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">links_settings</span><span class="token punctuation">:</span>
  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>link
  <span class="token key atrule">title</span><span class="token punctuation">:</span> 友情链接
  <span class="token comment" spellcheck="true"># Available values: block | inline</span>
  <span class="token key atrule">layout</span><span class="token punctuation">:</span> inline    <span class="token comment" spellcheck="true">#友情链接排版（block竖排列 inline横排列）</span>
<span class="token key atrule">links</span><span class="token punctuation">:</span>
    <span class="token key atrule">简书</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.jianshu.com/u/xxxx    <span class="token comment" spellcheck="true">#简书博客</span>
    <span class="token key atrule">掘金</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//juejin.im/user/xxx        <span class="token comment" spellcheck="true">#掘金博客</span>
    <span class="token key atrule">更多其它</span><span class="token punctuation">:</span> 其它链接地址<span class="token punctuation">...</span>
</code></pre>
<h1 id="配置GitHub角标"><a href="#配置GitHub角标" class="headerlink" title="配置GitHub角标"></a>配置GitHub角标</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># GitHub链接主页。编辑theme配置（../themes/hexo-theme-next/_config.yml#github_banner）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># `Follow me on GitHub` banner in the top-right corner.</span>
<span class="token key atrule">github_banner</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                              </span><span class="token comment" spellcheck="true">#是否启动右上角的github-banner，默认关闭</span>
  <span class="token key atrule">permalink</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/jiyiqini    <span class="token comment" spellcheck="true">#你的github主页地址</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span> 小主，关注我吧~                       <span class="token comment" spellcheck="true">#当鼠标放在该banner上，提示的文本。</span>
</code></pre>
<h1 id="配置back2top与阅读进度"><a href="#配置back2top与阅读进度" class="headerlink" title="配置back2top与阅读进度"></a>配置back2top与阅读进度</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.回到顶部。编辑theme配置（../themes/hexo-theme-next/_config.yml#back2top）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">back2top</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true          </span><span class="token comment" spellcheck="true">#是否开启回到顶部功能</span>
  <span class="token key atrule">sidebar</span><span class="token punctuation">:</span> <span class="token boolean important">false        </span><span class="token comment" spellcheck="true">#是否显示在侧边。选择false吧，让它单独在另外一侧好看些～</span>
  <span class="token key atrule">scrollpercent</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true">#滚动进度百分比是否显示在“回到顶部按钮”的文本中</span>
  
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.阅读进度。编辑theme配置（../themes/hexo-theme-next/_config.yml#back2top）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">reading_progress</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true          </span><span class="token comment" spellcheck="true">#是否开启阅读进度</span>
  <span class="token key atrule">position</span><span class="token punctuation">:</span> top         <span class="token comment" spellcheck="true">#阅读进度条的位置：top | bottom</span>
  <span class="token key atrule">color</span><span class="token punctuation">:</span> "<span class="token comment" spellcheck="true">#37c6c0"      #自定义进度条颜色</span>
  <span class="token key atrule">height</span><span class="token punctuation">:</span> 3px           <span class="token comment" spellcheck="true">#自定义进度条高度</span>
</code></pre>
<h1 id="配置code-style"><a href="#配置code-style" class="headerlink" title="配置code-style"></a>配置code-style</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 插入代码配置。编辑theme配置（../themes/hexo-theme-next/_config.yml#codeblock）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">codeblock</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># Code Highlight theme</span>
  <span class="token comment" spellcheck="true"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span>
  <span class="token comment" spellcheck="true"># See: https://github.com/chriskempson/tomorrow-theme</span>
  <span class="token key atrule">highlight_theme</span><span class="token punctuation">:</span> normal
  <span class="token comment" spellcheck="true"># Add copy button on codeblock</span>
  <span class="token key atrule">copy_button</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true">#是否开启复制代码功能</span>
    <span class="token key atrule">show_result</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true">#是否显示复制成功提示</span>
    <span class="token key atrule">style</span><span class="token punctuation">:</span> mac          <span class="token comment" spellcheck="true">#代码显示样式，可选：default | flat | mac</span>
</code></pre>
<h1 id="配置footer"><a href="#配置footer" class="headerlink" title="配置footer"></a>配置footer</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 阅读进度。编辑theme配置（../themes/hexo-theme-next/_config.yml#footer）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">footer</span><span class="token punctuation">:</span>
  <span class="token key atrule">since</span><span class="token punctuation">:</span> <span class="token number">2020   </span><span class="token comment" spellcheck="true">#建立博客的年份。若未填写，则默认为当前年份。例如：我是2020年搭建的博客，故写2020</span>
  <span class="token key atrule">counter</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#是否开启游客访问历史记录</span>

  <span class="token comment" spellcheck="true"># Icon between year and copyright info.</span>
  <span class="token key atrule">icon</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>heart   <span class="token comment" spellcheck="true"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span>
    <span class="token key atrule">animated</span><span class="token punctuation">:</span> <span class="token boolean important">false     </span><span class="token comment" spellcheck="true"># If you want to animate the icon, set it to true.</span>
    <span class="token key atrule">color</span><span class="token punctuation">:</span> "<span class="token comment" spellcheck="true">#ff0000"    # Change the color of icon, using Hex Code.</span>

  <span class="token comment" spellcheck="true"># If not defined, `author` from Hexo `_config.yml` will be used.</span>
  <span class="token key atrule">copyright</span><span class="token punctuation">:</span> 

  <span class="token comment" spellcheck="true"># Powered by Hexo &amp; NexT</span>
  <span class="token key atrule">powered</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#例如：“由 Hexo &amp; NexT.Gemini 强力驱动”</span>

  <span class="token comment" spellcheck="true"># Beian ICP and gongan information for Chinese users. See: http://www.beian.miit.gov.cn, http://www.beian.gov.cn</span>
  <span class="token key atrule">beian</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">icp</span><span class="token punctuation">:</span>
    <span class="token key atrule">gongan_id</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># The digit in the num of gongan beian.</span>
    <span class="token key atrule">gongan_num</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># The full num of gongan beian.</span>
    <span class="token key atrule">gongan_icon_url</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span>
</code></pre>
<h1 id="配置字数统计与预览时间"><a href="#配置字数统计与预览时间" class="headerlink" title="配置字数统计与预览时间"></a>配置字数统计与预览时间</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.当前博客站点目录下，执行安装命令：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ npm i <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>wordcount

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.阅读进度。编辑theme配置（../themes/hexo-theme-next/_config.yml#post_wordcount）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Post wordcount display settings</span>
<span class="token comment" spellcheck="true"># Dependencies: https://github.com/willin/hexo-wordcount</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token key atrule">post_wordcount</span><span class="token punctuation">:</span>
  <span class="token key atrule">item_text</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">wordcount</span><span class="token punctuation">:</span> <span class="token boolean important">true       </span><span class="token comment" spellcheck="true">#字数统计</span>
  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true">#预览时间</span>
  <span class="token key atrule">totalcount</span><span class="token punctuation">:</span> <span class="token boolean important">true      </span><span class="token comment" spellcheck="true">#总字数,显示在页面底部</span>
  <span class="token key atrule">separated_meta</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3.配置显示样式。编辑post.swig配置（../themes/hexo-theme-next/layout/_macro/post.swig）</span>
<span class="token comment" spellcheck="true"># 在合适的位置插入布局代码，例如在categories之后和LeanCloud之前，另换一行显示：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token punctuation">...</span>
<span class="token punctuation">{</span><span class="token comment" spellcheck="true"># 字数阅读统计功能 #}</span>
<span class="token punctuation">{</span>%<span class="token punctuation">-</span> if theme.post_wordcount.item_text %<span class="token punctuation">}</span>
&lt;div<span class="token punctuation">></span>
  &lt;span title="<span class="token punctuation">{</span><span class="token punctuation">{</span> __('post.wordcount') <span class="token punctuation">}</span><span class="token punctuation">}</span>"<span class="token punctuation">></span>本文约 <span class="token punctuation">{</span><span class="token punctuation">{</span> wordcount(post.content)<span class="token punctuation">}</span><span class="token punctuation">}</span> 字，&lt;/span<span class="token punctuation">></span>
  &lt;span title="<span class="token punctuation">{</span><span class="token punctuation">{</span> __('post.min2read') <span class="token punctuation">}</span><span class="token punctuation">}</span>"<span class="token punctuation">></span>阅读大概 <span class="token punctuation">{</span><span class="token punctuation">{</span> min2read(post.content)<span class="token punctuation">}</span><span class="token punctuation">}</span> 分钟&lt;/span<span class="token punctuation">></span>
&lt;/div<span class="token punctuation">></span>
<span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span>
<span class="token punctuation">...</span>
</code></pre>
<h1 id="添加文末结束标语（passage-end-tag）"><a href="#添加文末结束标语（passage-end-tag）" class="headerlink" title="添加文末结束标语（passage-end-tag）"></a>添加文末结束标语（passage-end-tag）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1. 在 ../themes/next/layout/_macro/ 下新建 passage-end-tag.swig。</span>
<span class="token comment" spellcheck="true"># 填充内容如下：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
&lt;div<span class="token punctuation">></span>
    <span class="token punctuation">{</span>% if not is_index %<span class="token punctuation">}</span>
        &lt;div style="text<span class="token punctuation">-</span>align<span class="token punctuation">:</span>center;color<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#ccc;font-size:14px;"></span>
        <span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span> 本文结束<span class="token important">&amp;nbsp</span>;&lt;i class="fa fa<span class="token punctuation">-</span>paw"<span class="token punctuation">></span>&lt;/i<span class="token punctuation">></span><span class="token important">&amp;nbsp</span>;感谢阅读 <span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>
        &lt;/div<span class="token punctuation">></span>
    <span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span>
&lt;/div<span class="token punctuation">></span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2. 打开 ../themes/next/layout/_macro/post.swig 文件，在 post-body（即：END POST BODY）之后，添加如下:</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token punctuation">{</span><span class="token comment" spellcheck="true"># 文末部分，即 END POST BODY 之后#}</span>
<span class="token punctuation">{</span>%<span class="token punctuation">-</span> if not is_index %<span class="token punctuation">}</span>
  <span class="token punctuation">...</span>
  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">#每篇文章末尾统一添加“本文结束”标记#}</span>
  <span class="token punctuation">{</span>% if theme.passage_end_tag.enable %<span class="token punctuation">}</span>
    <span class="token punctuation">{</span>% include 'passage<span class="token punctuation">-</span>end<span class="token punctuation">-</span>tag.swig' %<span class="token punctuation">}</span>
  <span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span>
  <span class="token punctuation">...</span>
<span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3. 在主题配置文件下添加配置，在 ../themes/next/_config.yml 文件中添加开关：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 文章末尾添加“本文结束”标记</span>
<span class="token key atrule">passage_end_tag</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre>
<h1 id="添加评论功能（Valine）"><a href="#添加评论功能（Valine）" class="headerlink" title="添加评论功能（Valine）"></a>添加评论功能（Valine）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.注册LeanCloud，获取AppId和AppKey。</span>
<span class="token comment" spellcheck="true"># 在合适的位置插入布局代码，例如在categories之后和LeanCloud之前，另换一行显示：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
1. 注册LeanCloud账户。
2. 实名制（姓名、手机号、身份证号）
3. 创建应用，随便取个应用名。例如：Jiyiqini<span class="token punctuation">-</span>Hexo<span class="token punctuation">-</span>Blogs
4. 实名制和创建应用成功后，会得到分配的AppId和AppKey。然后进行下面一步～

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.配置Valine。编辑theme配置（../themes/hexo-theme-next/_config.yml#valine）</span>
<span class="token comment" spellcheck="true"># 在合适的位置插入布局代码，例如在categories之后和LeanCloud之前，另换一行显示：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Valine评论系统</span>
<span class="token comment" spellcheck="true"># See: https://leancloud.cn/dashboard/applist.html#/apps</span>
<span class="token comment" spellcheck="true"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span>
<span class="token key atrule">valine</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">appid</span><span class="token punctuation">:</span> xxxx<span class="token punctuation">-</span>xxxx      <span class="token comment" spellcheck="true">#在LeanCloud应用注册获取AppId</span>
  <span class="token key atrule">appkey</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>yyyy     <span class="token comment" spellcheck="true">#在LeanCloud应用注册获取AppKey</span>
  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">true          </span><span class="token comment" spellcheck="true">#是否启用邮件通知</span>
  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false         </span><span class="token comment" spellcheck="true">#是否启用验证码</span>
  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> 发表评论或建议 <span class="token comment" spellcheck="true">#默认评论区hint("Just go go")</span>
  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> monsterid     <span class="token comment" spellcheck="true"># Gravatar style.头像风格，默认为mm，可进入网址：https://valine.js.org/visitor.html查看头像设置，这里有许多头像风格，进行设置</span>
  <span class="token key atrule">guest_info</span><span class="token punctuation">:</span> nick<span class="token punctuation">,</span>mail<span class="token punctuation">,</span>link <span class="token comment" spellcheck="true"># 自定义评论框头部（Custom comment header）</span>
  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10          </span><span class="token comment" spellcheck="true">#分页大小阈值，例如：达到10条评论后分页</span>
  <span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>cn       <span class="token comment" spellcheck="true">#语言，可选: en, zh-cn</span>
  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">false        </span><span class="token comment" spellcheck="true">#Article reading statistic.是否允许游客评论，进入官网查看设置：https://valine.js.org/visitor.html</span>
  <span class="token key atrule">comment_count</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true">#If false, comment count will only be displayed in post page, not in home page</span>
  <span class="token key atrule">recordIP</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true">#Whether to record the commenter IP</span>
  <span class="token key atrule">serverURLs</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true">#When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span>
  <span class="token comment" spellcheck="true">#post_meta_order: 0</span>
  <span class="token comment" spellcheck="true">#background: /medias/comment_bg.png</span>
  
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3.在需要的文章Front-Matter前，按需配置是否支持评论</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true">#例如：分类（../source/categories/index.md）</span>
<span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 文章分类
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-05-16 13:21:33</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Testing
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span>
<span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false             </span><span class="token comment" spellcheck="true">#禁止评论</span>
<span class="token punctuation">---</span>
</code></pre>
<blockquote>
<p><strong>类似参考：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_43827595/article/details/101450966">hexo yilia主题添加评论系统详细教程</a></li>
</ul>
</blockquote>
<h1 id="添加卡通看板娘（Live2D）"><a href="#添加卡通看板娘（Live2D）" class="headerlink" title="添加卡通看板娘（Live2D）"></a>添加卡通看板娘（Live2D）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.当前博客站点目录下，执行安装命令（安装live2d）：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ npm install <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>helper<span class="token punctuation">-</span>live2d

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.当前博客站点目录下，执行安装命令（安装例如模型shizuku）：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ npm install live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3.设置显示。编辑theme配置（../themes/theme-hexo-next/layout/_layout.swig）</span>
<span class="token comment" spellcheck="true"># 添加：在&lt;/body>前一行添加 {{ live2d() }}</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
&lt;<span class="token tag">!DOCTYPE</span> html<span class="token punctuation">></span>
&lt;html lang="<span class="token punctuation">{</span><span class="token punctuation">{</span> config.language <span class="token punctuation">}</span><span class="token punctuation">}</span>"<span class="token punctuation">></span>
&lt;head<span class="token punctuation">></span><span class="token punctuation">...</span>&lt;/head<span class="token punctuation">></span>
&lt;body<span class="token punctuation">></span>
    <span class="token punctuation">...</span>
    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">#### 添加：卡通看板娘 ####}</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> live2d() <span class="token punctuation">}</span><span class="token punctuation">}</span>
&lt;/body<span class="token punctuation">></span>
&lt;/html<span class="token punctuation">></span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 4.配置Live2D。编辑global配置（../&lt;your_hexo_blog>/_config.yml#Live2D）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Live2D</span>
<span class="token comment" spellcheck="true"># https://github.com/EYHN/hexo-helper-live2d</span>
<span class="token comment" spellcheck="true"># Refer: https://fjkang.github.io/2017/12/08/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%90%8C%E7%89%A9/</span>
<span class="token comment" spellcheck="true"># live2d:</span>
<span class="token comment" spellcheck="true">#   model: z16 # 模型名称 默认值: z16</span>
<span class="token comment" spellcheck="true">#   width: 150 # 宽度 默认值: 150</span>
<span class="token comment" spellcheck="true">#   height: 300 # 高度 默认值: 300</span>
<span class="token comment" spellcheck="true">#   scaling: 1 # 分辨率缩放倍率 默认值: 2</span>
<span class="token comment" spellcheck="true">#   opacityDefault: 0.7 # 初始的透明度 默认值: 0.7</span>
<span class="token comment" spellcheck="true">#   opacityHover: 1 # 鼠标悬浮时的透明度 默认值: 1</span>
<span class="token comment" spellcheck="true">#   mobileShow: true # 是否在移动设备上显示 默认值: true</span>
<span class="token comment" spellcheck="true">#   mobileScaling: 0.5 # 移动设备缩放倍率 默认值: 0.5</span>
<span class="token comment" spellcheck="true">#   position: right # 模型左右侧放置位置 默认值: right</span>
<span class="token comment" spellcheck="true">#   horizontalOffset: 0 # 元素的水平偏移 默认值: 0</span>
<span class="token comment" spellcheck="true">#   verticalOffset: -20 # 元素的底部偏移 默认值: -20</span>
<span class="token comment" spellcheck="true">#   id: live2dcanvas # 元素的id 默认值: live2dcanvas</span>
<span class="token comment" spellcheck="true">#   deviceJsSource: local # current-device 脚本的来源 默认值: local</span>

<span class="token comment" spellcheck="true"># Live2D</span>
<span class="token comment" spellcheck="true"># https://github.com/EYHN/hexo-helper-live2d</span>
<span class="token comment" spellcheck="true"># Refer: http://yearito.cn/posts/hexo-theme-beautify.html</span>
<span class="token key atrule">live2d</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/
  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/
  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ Relative)

  <span class="token comment" spellcheck="true"># 脚本加载源</span>
  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment" spellcheck="true">#默认从本地加载脚本</span>
  <span class="token comment" spellcheck="true"># scriptFrom: jsdelivr # 从 jsdelivr CDN 加载脚本</span>
  <span class="token comment" spellcheck="true"># scriptFrom: unpkg # 从 unpkg CDN 加载脚本</span>
  <span class="token comment" spellcheck="true"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 从自定义地址加载脚本</span>
  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true">#开启true。只在有 {{ live2d() }} 标签的页面上加载 / 在所有页面上加载</span>
  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false        </span><span class="token comment" spellcheck="true">#是否在控制台打印日志</span>

  <span class="token comment" spellcheck="true"># 选择看板娘模型</span>
  <span class="token key atrule">model</span><span class="token punctuation">:</span>
    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku  <span class="token comment" spellcheck="true"># npm package的名字。这里使用的shizuku模型（npm i live2d-widget-model-shizuku）</span>
    <span class="token comment" spellcheck="true"># use: wanko # /live2d_models/ 目录下的模型文件夹名称</span>
    <span class="token comment" spellcheck="true"># use: ./wives/wanko # 站点根目录下的模型文件夹名称</span>
    <span class="token comment" spellcheck="true"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 自定义网络数据源</span>
  <span class="token key atrule">display</span><span class="token punctuation">:</span>
    <span class="token key atrule">position</span><span class="token punctuation">:</span> left  <span class="token comment" spellcheck="true">#显示在左边还是右边</span>
    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">100      </span><span class="token comment" spellcheck="true">#宽度</span>
    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">180     </span><span class="token comment" spellcheck="true">#高度</span>
  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>
    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">react</span><span class="token punctuation">:</span>
    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true">#默认透明度</span>
</code></pre>
<h1 id="添加鼠标点击特效（❤️、爆炸）"><a href="#添加鼠标点击特效（❤️、爆炸）" class="headerlink" title="添加鼠标点击特效（❤️、爆炸）"></a>添加鼠标点击特效（❤️、爆炸）</h1><p>☞ <strong>添加步骤：</strong></p>
<blockquote>
<ol>
<li><code>../themes/next/source/js</code> 下创建特效js. </li>
<li><code>../themes/next/layout/_layout.swig#head</code> 部分引用js和其它辅助js。</li>
</ol>
</blockquote>
<p>1.主题配置项：<code>../themes/theme-hexo-next/_config.yml#cursor_effect</code></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Customize different effects while clicking cursor.</span>
<span class="token comment" spellcheck="true"># type values: love 浮出爱心 | explosion 爆炸 | ...</span>
<span class="token key atrule">cursor_effect</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> love
</code></pre>
<p>2.配置：<code>../themes/theme-hexo-next/layout/_custom/custom.swig</code></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">{</span>% if theme.cursor_effect.enable %<span class="token punctuation">}</span>
    <span class="token punctuation">{</span>% if theme.cursor_effect.type == "love" %<span class="token punctuation">}</span>
      &lt;script src="/js/effects/cursor/love.min.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>
    <span class="token punctuation">{</span>% elseif theme.cursor_effect.type == "explosion" %<span class="token punctuation">}</span>
      &lt;canvas class="fireworks" style="position<span class="token punctuation">:</span> <span class="token key atrule">fixed;left</span><span class="token punctuation">:</span> <span class="token key atrule">0;top</span><span class="token punctuation">:</span> <span class="token key atrule">0;z-index</span><span class="token punctuation">:</span> 1; pointer<span class="token punctuation">-</span><span class="token key atrule">events</span><span class="token punctuation">:</span> none;" <span class="token punctuation">></span>&lt;/canvas<span class="token punctuation">></span>
      &lt;script src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>
      &lt;script src="/js/effects/cursor/explosion.min.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>
    <span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span>
<span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span>
</code></pre>
<p>3.配置：<code>/themes/theme-hexo-next/layout/_layout.swig</code></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">{</span>% include '_custom/custom.swig' %<span class="token punctuation">}</span>
</code></pre>
<ul>
<li><p><em>示例特效js：红心（love.min.js）</em></p>
<pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span>function<span class="token punctuation">(</span>e,t,a<span class="token punctuation">)</span><span class="token punctuation">{</span>function n<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c<span class="token punctuation">(</span><span class="token string">".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}"</span><span class="token punctuation">)</span>,o<span class="token punctuation">(</span><span class="token punctuation">)</span>,r<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>function r<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>var e<span class="token operator">=</span>0<span class="token punctuation">;</span>e<span class="token operator">&lt;</span>d.length<span class="token punctuation">;</span>e++<span class="token punctuation">)</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.alpha<span class="token operator">&lt;=</span>0?<span class="token punctuation">(</span>t.body.removeChild<span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.el<span class="token punctuation">)</span>,d.splice<span class="token punctuation">(</span>e,1<span class="token punctuation">))</span>:<span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.y--,d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.scale+<span class="token operator">=</span>.004,d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.alpha-<span class="token operator">=</span>.013,d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.el.style.cssText<span class="token operator">=</span><span class="token string">"left:"</span>+d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.x+<span class="token string">"px;top:"</span>+d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.y+<span class="token string">"px;opacity:"</span>+d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.alpha+<span class="token string">";transform:scale("</span>+d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.scale+<span class="token string">","</span>+d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.scale+<span class="token string">") rotate(45deg);background:"</span>+d<span class="token punctuation">[</span>e<span class="token punctuation">]</span>.color+<span class="token string">";z-index:99999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>requestAnimationFrame<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span>function o<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>var t<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span>typeof e.onclick<span class="token operator">&amp;&amp;</span>e.onclick<span class="token punctuation">;</span>e.onclick<span class="token operator">=</span>function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span>,i<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>function i<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>var a<span class="token operator">=</span>t.createElement<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.className<span class="token operator">=</span><span class="token string">"heart"</span>,d.push<span class="token punctuation">(</span><span class="token punctuation">{</span>el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>,t.body.appendChild<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span>function c<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>var a<span class="token operator">=</span>t.createElement<span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token punctuation">;</span>try<span class="token punctuation">{</span>a.appendChild<span class="token punctuation">(</span>t.createTextNode<span class="token punctuation">(</span>e<span class="token punctuation">))</span><span class="token punctuation">}</span>catch<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>a.styleSheet.cssText<span class="token operator">=</span>e<span class="token punctuation">}</span>t.getElementsByTagName<span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>.appendChild<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span>function s<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>return<span class="token string">"rgb("</span>+~~<span class="token punctuation">(</span>255*Math.random<span class="token punctuation">(</span><span class="token punctuation">))</span>+<span class="token string">","</span>+~~<span class="token punctuation">(</span>255*Math.random<span class="token punctuation">(</span><span class="token punctuation">))</span>+<span class="token string">","</span>+~~<span class="token punctuation">(</span>255*Math.random<span class="token punctuation">(</span><span class="token punctuation">))</span>+<span class="token string">")"</span><span class="token punctuation">}</span>var d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e.requestAnimationFrame<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>return e.requestAnimationFrame<span class="token operator">||</span>e.webkitRequestAnimationFrame<span class="token operator">||</span>e.mozRequestAnimationFrame<span class="token operator">||</span>e.oRequestAnimationFrame<span class="token operator">||</span>e.msRequestAnimationFrame<span class="token operator">||</span>function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>setTimeout<span class="token punctuation">(</span>e,1e3/60<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>,n<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>window,document<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p><em>示例特效js：爆炸（explosion.min.js）</em></p>
<pre class=" language-bash"><code class="language-bash"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> updateCoords<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>pointerX<span class="token operator">=</span><span class="token punctuation">(</span>e.clientX<span class="token operator">||</span>e.touches<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.clientX<span class="token punctuation">)</span>-canvasEl.getBoundingClientRect<span class="token punctuation">(</span><span class="token punctuation">)</span>.left,pointerY<span class="token operator">=</span>e.clientY<span class="token operator">||</span>e.touches<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.clientY-canvasEl.getBoundingClientRect<span class="token punctuation">(</span><span class="token punctuation">)</span>.top<span class="token punctuation">}</span>function setParticuleDirection<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>var t<span class="token operator">=</span>anime.random<span class="token punctuation">(</span>0,360<span class="token punctuation">)</span>*Math.PI/180,a<span class="token operator">=</span>anime.random<span class="token punctuation">(</span>50,180<span class="token punctuation">)</span>,n<span class="token operator">=</span><span class="token punctuation">[</span>-1,1<span class="token punctuation">]</span><span class="token punctuation">[</span>anime.random<span class="token punctuation">(</span>0,1<span class="token punctuation">)</span><span class="token punctuation">]</span>*a<span class="token punctuation">;</span>return<span class="token punctuation">{</span>x:e.x+n*Math.cos<span class="token punctuation">(</span>t<span class="token punctuation">)</span>,y:e.y+n*Math.sin<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>function createParticule<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span><span class="token punctuation">{</span>var a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a.x<span class="token operator">=</span>e,a.y<span class="token operator">=</span>t,a.color<span class="token operator">=</span>colors<span class="token punctuation">[</span>anime.random<span class="token punctuation">(</span>0,colors.length-1<span class="token punctuation">)</span><span class="token punctuation">]</span>,a.radius<span class="token operator">=</span>anime.random<span class="token punctuation">(</span>16,32<span class="token punctuation">)</span>,a.endPos<span class="token operator">=</span>setParticuleDirection<span class="token punctuation">(</span>a<span class="token punctuation">)</span>,a.draw<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx.beginPath<span class="token punctuation">(</span><span class="token punctuation">)</span>,ctx.arc<span class="token punctuation">(</span>a.x,a.y,a.radius,0,2*Math.PI,<span class="token operator">!</span>0<span class="token punctuation">)</span>,ctx.fillStyle<span class="token operator">=</span>a.color,ctx.fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>,a<span class="token punctuation">}</span>function createCircle<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span><span class="token punctuation">{</span>var a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a.x<span class="token operator">=</span>e,a.y<span class="token operator">=</span>t,a.color<span class="token operator">=</span><span class="token string">"#F00"</span>,a.radius<span class="token operator">=</span>0.1,a.alpha<span class="token operator">=</span>0.5,a.lineWidth<span class="token operator">=</span>6,a.draw<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx.globalAlpha<span class="token operator">=</span>a.alpha,ctx.beginPath<span class="token punctuation">(</span><span class="token punctuation">)</span>,ctx.arc<span class="token punctuation">(</span>a.x,a.y,a.radius,0,2*Math.PI,<span class="token operator">!</span>0<span class="token punctuation">)</span>,ctx.lineWidth<span class="token operator">=</span>a.lineWidth,ctx.strokeStyle<span class="token operator">=</span>a.color,ctx.stroke<span class="token punctuation">(</span><span class="token punctuation">)</span>,ctx.globalAlpha<span class="token operator">=</span>1<span class="token punctuation">}</span>,a<span class="token punctuation">}</span>function renderParticule<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>var t<span class="token operator">=</span>0<span class="token punctuation">;</span>t<span class="token operator">&lt;</span>e.animatables.length<span class="token punctuation">;</span>t++<span class="token punctuation">)</span><span class="token punctuation">{</span>e.animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span>.target.draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>function animateParticules<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>var a<span class="token operator">=</span>createCircle<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span>,n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberOfParticules<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>n.push<span class="token punctuation">(</span>createParticule<span class="token punctuation">(</span>e,t<span class="token punctuation">))</span><span class="token punctuation">}</span>anime.timeline<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span><span class="token punctuation">{</span>targets:n,x:function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>return e.endPos.x<span class="token punctuation">}</span>,y:function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>return e.endPos.y<span class="token punctuation">}</span>,radius:0.1,duration:anime.random<span class="token punctuation">(</span>1200,1800<span class="token punctuation">)</span>,easing:<span class="token string">"easeOutExpo"</span>,update:renderParticule<span class="token punctuation">}</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span><span class="token punctuation">{</span>targets:a,radius:anime.random<span class="token punctuation">(</span>80,160<span class="token punctuation">)</span>,lineWidth:0,alpha:<span class="token punctuation">{</span>value:0,easing:<span class="token string">"linear"</span>,duration:anime.random<span class="token punctuation">(</span>600,800<span class="token punctuation">)</span><span class="token punctuation">}</span>,duration:anime.random<span class="token punctuation">(</span>1200,1800<span class="token punctuation">)</span>,easing:<span class="token string">"easeOutExpo"</span>,update:renderParticule,offset:0<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>function debounce<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span><span class="token punctuation">{</span>var a<span class="token punctuation">;</span><span class="token keyword">return</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>var n<span class="token operator">=</span>this,i<span class="token operator">=</span>arguments<span class="token punctuation">;</span>clearTimeout<span class="token punctuation">(</span>a<span class="token punctuation">)</span>,a<span class="token operator">=</span>setTimeout<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e.apply<span class="token punctuation">(</span>n,i<span class="token punctuation">)</span><span class="token punctuation">}</span>,t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>var canvasEl<span class="token operator">=</span>document.querySelector<span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span><span class="token punctuation">{</span>var ctx<span class="token operator">=</span>canvasEl.getContext<span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span>,numberOfParticules<span class="token operator">=</span>30,pointerX<span class="token operator">=</span>0,pointerY<span class="token operator">=</span>0,tap<span class="token operator">=</span><span class="token string">"mousedown"</span>,colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"#FF1461"</span>,<span class="token string">"#18FF92"</span>,<span class="token string">"#5A87FF"</span>,<span class="token string">"#FBF38C"</span><span class="token punctuation">]</span>,setCanvasSize<span class="token operator">=</span>debounce<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>canvasEl.width<span class="token operator">=</span>2*window.innerWidth,canvasEl.height<span class="token operator">=</span>2*window.innerHeight,canvasEl.style.width<span class="token operator">=</span>window.innerWidth+<span class="token string">"px"</span>,canvasEl.style.height<span class="token operator">=</span>window.innerHeight+<span class="token string">"px"</span>,canvasEl.getContext<span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span>.scale<span class="token punctuation">(</span>2,2<span class="token punctuation">)</span><span class="token punctuation">}</span>,500<span class="token punctuation">)</span>,render<span class="token operator">=</span>anime<span class="token punctuation">(</span><span class="token punctuation">{</span>duration:1/0,update:function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx.clearRect<span class="token punctuation">(</span>0,0,canvasEl.width,canvasEl.height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document.addEventListener<span class="token punctuation">(</span>tap,function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sidebar"</span><span class="token operator">!=</span><span class="token operator">=</span>e.target.id<span class="token operator">&amp;&amp;</span><span class="token string">"toggle-sidebar"</span><span class="token operator">!=</span><span class="token operator">=</span>e.target.id<span class="token operator">&amp;&amp;</span><span class="token string">"A"</span><span class="token operator">!=</span><span class="token operator">=</span>e.target.nodeName<span class="token operator">&amp;&amp;</span><span class="token string">"IMG"</span><span class="token operator">!=</span><span class="token operator">=</span>e.target.nodeName<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>render.play<span class="token punctuation">(</span><span class="token punctuation">)</span>,updateCoords<span class="token punctuation">(</span>e<span class="token punctuation">)</span>,animateParticules<span class="token punctuation">(</span>pointerX,pointerY<span class="token punctuation">))</span><span class="token punctuation">}</span>,<span class="token operator">!</span>1<span class="token punctuation">)</span>,setCanvasSize<span class="token punctuation">(</span><span class="token punctuation">)</span>,window.addEventListener<span class="token punctuation">(</span><span class="token string">"resize"</span>,setCanvasSize,<span class="token operator">!</span>1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> updateCoords<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>pointerX<span class="token operator">=</span><span class="token punctuation">(</span>e.clientX<span class="token operator">||</span>e.touches<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.clientX<span class="token punctuation">)</span>-canvasEl.getBoundingClientRect<span class="token punctuation">(</span><span class="token punctuation">)</span>.left,pointerY<span class="token operator">=</span>e.clientY<span class="token operator">||</span>e.touches<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.clientY-canvasEl.getBoundingClientRect<span class="token punctuation">(</span><span class="token punctuation">)</span>.top<span class="token punctuation">}</span>function setParticuleDirection<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>var t<span class="token operator">=</span>anime.random<span class="token punctuation">(</span>0,360<span class="token punctuation">)</span>*Math.PI/180,a<span class="token operator">=</span>anime.random<span class="token punctuation">(</span>50,180<span class="token punctuation">)</span>,n<span class="token operator">=</span><span class="token punctuation">[</span>-1,1<span class="token punctuation">]</span><span class="token punctuation">[</span>anime.random<span class="token punctuation">(</span>0,1<span class="token punctuation">)</span><span class="token punctuation">]</span>*a<span class="token punctuation">;</span>return<span class="token punctuation">{</span>x:e.x+n*Math.cos<span class="token punctuation">(</span>t<span class="token punctuation">)</span>,y:e.y+n*Math.sin<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>function createParticule<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span><span class="token punctuation">{</span>var a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a.x<span class="token operator">=</span>e,a.y<span class="token operator">=</span>t,a.color<span class="token operator">=</span>colors<span class="token punctuation">[</span>anime.random<span class="token punctuation">(</span>0,colors.length-1<span class="token punctuation">)</span><span class="token punctuation">]</span>,a.radius<span class="token operator">=</span>anime.random<span class="token punctuation">(</span>16,32<span class="token punctuation">)</span>,a.endPos<span class="token operator">=</span>setParticuleDirection<span class="token punctuation">(</span>a<span class="token punctuation">)</span>,a.draw<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx.beginPath<span class="token punctuation">(</span><span class="token punctuation">)</span>,ctx.arc<span class="token punctuation">(</span>a.x,a.y,a.radius,0,2*Math.PI,<span class="token operator">!</span>0<span class="token punctuation">)</span>,ctx.fillStyle<span class="token operator">=</span>a.color,ctx.fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>,a<span class="token punctuation">}</span>function createCircle<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span><span class="token punctuation">{</span>var a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a.x<span class="token operator">=</span>e,a.y<span class="token operator">=</span>t,a.color<span class="token operator">=</span><span class="token string">"#F00"</span>,a.radius<span class="token operator">=</span>0.1,a.alpha<span class="token operator">=</span>0.5,a.lineWidth<span class="token operator">=</span>6,a.draw<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx.globalAlpha<span class="token operator">=</span>a.alpha,ctx.beginPath<span class="token punctuation">(</span><span class="token punctuation">)</span>,ctx.arc<span class="token punctuation">(</span>a.x,a.y,a.radius,0,2*Math.PI,<span class="token operator">!</span>0<span class="token punctuation">)</span>,ctx.lineWidth<span class="token operator">=</span>a.lineWidth,ctx.strokeStyle<span class="token operator">=</span>a.color,ctx.stroke<span class="token punctuation">(</span><span class="token punctuation">)</span>,ctx.globalAlpha<span class="token operator">=</span>1<span class="token punctuation">}</span>,a<span class="token punctuation">}</span>function renderParticule<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>var t<span class="token operator">=</span>0<span class="token punctuation">;</span>t<span class="token operator">&lt;</span>e.animatables.length<span class="token punctuation">;</span>t++<span class="token punctuation">)</span><span class="token punctuation">{</span>e.animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span>.target.draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>function animateParticules<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>var a<span class="token operator">=</span>createCircle<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span>,n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberOfParticules<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>n.push<span class="token punctuation">(</span>createParticule<span class="token punctuation">(</span>e,t<span class="token punctuation">))</span><span class="token punctuation">}</span>anime.timeline<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span><span class="token punctuation">{</span>targets:n,x:function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>return e.endPos.x<span class="token punctuation">}</span>,y:function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>return e.endPos.y<span class="token punctuation">}</span>,radius:0.1,duration:anime.random<span class="token punctuation">(</span>1200,1800<span class="token punctuation">)</span>,easing:<span class="token string">"easeOutExpo"</span>,update:renderParticule<span class="token punctuation">}</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span><span class="token punctuation">{</span>targets:a,radius:anime.random<span class="token punctuation">(</span>80,160<span class="token punctuation">)</span>,lineWidth:0,alpha:<span class="token punctuation">{</span>value:0,easing:<span class="token string">"linear"</span>,duration:anime.random<span class="token punctuation">(</span>600,800<span class="token punctuation">)</span><span class="token punctuation">}</span>,duration:anime.random<span class="token punctuation">(</span>1200,1800<span class="token punctuation">)</span>,easing:<span class="token string">"easeOutExpo"</span>,update:renderParticule,offset:0<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>function debounce<span class="token punctuation">(</span>e,t<span class="token punctuation">)</span><span class="token punctuation">{</span>var a<span class="token punctuation">;</span><span class="token keyword">return</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>var n<span class="token operator">=</span>this,i<span class="token operator">=</span>arguments<span class="token punctuation">;</span>clearTimeout<span class="token punctuation">(</span>a<span class="token punctuation">)</span>,a<span class="token operator">=</span>setTimeout<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e.apply<span class="token punctuation">(</span>n,i<span class="token punctuation">)</span><span class="token punctuation">}</span>,t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>var canvasEl<span class="token operator">=</span>document.querySelector<span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span><span class="token punctuation">{</span>var ctx<span class="token operator">=</span>canvasEl.getContext<span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span>,numberOfParticules<span class="token operator">=</span>30,pointerX<span class="token operator">=</span>0,pointerY<span class="token operator">=</span>0,tap<span class="token operator">=</span><span class="token string">"mousedown"</span>,colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"#FF1461"</span>,<span class="token string">"#18FF92"</span>,<span class="token string">"#5A87FF"</span>,<span class="token string">"#FBF38C"</span><span class="token punctuation">]</span>,setCanvasSize<span class="token operator">=</span>debounce<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>canvasEl.width<span class="token operator">=</span>2*window.innerWidth,canvasEl.height<span class="token operator">=</span>2*window.innerHeight,canvasEl.style.width<span class="token operator">=</span>window.innerWidth+<span class="token string">"px"</span>,canvasEl.style.height<span class="token operator">=</span>window.innerHeight+<span class="token string">"px"</span>,canvasEl.getContext<span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span>.scale<span class="token punctuation">(</span>2,2<span class="token punctuation">)</span><span class="token punctuation">}</span>,500<span class="token punctuation">)</span>,render<span class="token operator">=</span>anime<span class="token punctuation">(</span><span class="token punctuation">{</span>duration:1/0,update:function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ctx.clearRect<span class="token punctuation">(</span>0,0,canvasEl.width,canvasEl.height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document.addEventListener<span class="token punctuation">(</span>tap,function<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sidebar"</span><span class="token operator">!=</span><span class="token operator">=</span>e.target.id<span class="token operator">&amp;&amp;</span><span class="token string">"toggle-sidebar"</span><span class="token operator">!=</span><span class="token operator">=</span>e.target.id<span class="token operator">&amp;&amp;</span><span class="token string">"A"</span><span class="token operator">!=</span><span class="token operator">=</span>e.target.nodeName<span class="token operator">&amp;&amp;</span><span class="token string">"IMG"</span><span class="token operator">!=</span><span class="token operator">=</span>e.target.nodeName<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>render.play<span class="token punctuation">(</span><span class="token punctuation">)</span>,updateCoords<span class="token punctuation">(</span>e<span class="token punctuation">)</span>,animateParticules<span class="token punctuation">(</span>pointerX,pointerY<span class="token punctuation">))</span><span class="token punctuation">}</span>,<span class="token operator">!</span>1<span class="token punctuation">)</span>,setCanvasSize<span class="token punctuation">(</span><span class="token punctuation">)</span>,window.addEventListener<span class="token punctuation">(</span><span class="token string">"resize"</span>,setCanvasSize,<span class="token operator">!</span>1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<h1 id="添加背景线条特效（canvas-nest）"><a href="#添加背景线条特效（canvas-nest）" class="headerlink" title="添加背景线条特效（canvas-nest）"></a>添加背景线条特效（canvas-nest）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1. 当前博客站点目录下，../themes/next/_config.yml 配置文件中开启 canvas_nest</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># https://github.com/hustcc/canvas-nest.js</span>
<span class="token comment" spellcheck="true"># https://github.com/theme-next/theme-next-canvas-nest</span>
<span class="token comment" spellcheck="true"># 配置详见： https://github.com/hustcc/canvas-nest.js#configuration</span>
<span class="token comment" spellcheck="true"># 动态线条效果，会向鼠标集中</span>
<span class="token key atrule">canvas_nest</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                 </span><span class="token comment" spellcheck="true"># 打开这个开关</span>
  <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">'0,0,250'</span>             <span class="token comment" spellcheck="true"># color of lines, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)</span>
  <span class="token key atrule">pointColor</span><span class="token punctuation">:</span> <span class="token string">'156,39,176'</span>     <span class="token comment" spellcheck="true"># color of points, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)</span>
  <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token string">'0.5'</span>               <span class="token comment" spellcheck="true"># the opacity of line (0~1), default: 0.5.</span>
  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token string">'99'</span>                  <span class="token comment" spellcheck="true"># the number of lines, default: 99.</span>
  <span class="token key atrule">zIndex</span><span class="token punctuation">:</span> <span class="token string">'-1'</span>                 <span class="token comment" spellcheck="true"># z-index property of the background, default: -1.</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2. 完成第1步，还需要提供2个js文件：canvas-nest-nomobile.min.js、canvas-nest.min.js ，</span>
<span class="token comment" spellcheck="true"># 将其放到 "../themes/hexo-theme-next/source/lib/canvas-nest" 目录下，否则会报错。</span>
<span class="token comment" spellcheck="true"># 参考依赖：Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ git clone https<span class="token punctuation">:</span>//github.com/theme<span class="token punctuation">-</span>next/theme<span class="token punctuation">-</span>next<span class="token punctuation">-</span>canvas<span class="token punctuation">-</span>nest.git source/lib/canvas<span class="token punctuation">-</span>nest
$ 最后，重新编译部署即可：hexo clean &amp;&amp; hexo g <span class="token punctuation">-</span>d

<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">-</span>

<span class="token comment" spellcheck="true"># 另外，还有一种方法也会使线条特效生效，但打开浏览器控制台还是提示 </span>
<span class="token comment" spellcheck="true"># source/lib/canvas-nest/canvas-nest-nomobile.min.js、canvas-nest.min.js </span>
<span class="token comment" spellcheck="true"># 这2个js找不到的错误。故，还是推荐上面的方法。</span>
1. 当前博客站点目录下，创建文件 &lt;your_hexo_blog<span class="token punctuation">></span>/source/_data/footer.swig
2. footer.swig内容为：&lt;script color="0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>255" opacity="0.5" zIndex="<span class="token punctuation">-</span>1" count="99" src="https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/canvas<span class="token punctuation">-</span>nest.js@1/dist/canvas<span class="token punctuation">-</span>nest.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>
3. 在“../themes/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>next/_config.yml”配置中找到 custom_file_path 节点，打开注释 “footer<span class="token punctuation">:</span> source/_data/footer.swig” 这一行。
</code></pre>
<h1 id="添加站内搜索功能（searchdb）"><a href="#添加站内搜索功能（searchdb）" class="headerlink" title="添加站内搜索功能（searchdb）"></a>添加站内搜索功能（searchdb）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1. 安装 hexo-generator-searchdb 插件</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ npm install <span class="token punctuation">-</span>g hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>searchdb <span class="token punctuation">-</span><span class="token punctuation">-</span>save <span class="token comment" spellcheck="true"># 干脆全局安装吧 -g</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2. 博客根站点下，即 &lt;your_hexo_blog>/_config.yml 配置 search：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Search</span>
<span class="token key atrule">search</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml    <span class="token comment" spellcheck="true">#索引文件的路径，相对于站点根目录</span>
  <span class="token key atrule">field</span><span class="token punctuation">:</span> post         <span class="token comment" spellcheck="true">#搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</span>
  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">format</span><span class="token punctuation">:</span> html
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000        </span><span class="token comment" spellcheck="true">#限制搜索的条目数</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3. next主题下，即 &lt;your_hexo_blog>/themes/hexo-theme-next/_config.yml 配置 Local Search：打开开关</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">local_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 打开开关</span>
  <span class="token comment" spellcheck="true"># If auto, trigger search by changing input.</span>
  <span class="token comment" spellcheck="true"># If manual, trigger search by pressing enter key or search button.</span>
  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> auto
  <span class="token comment" spellcheck="true"># Show top n results per article, show all results by setting to -1</span>
  <span class="token key atrule">top_n_per_article</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token comment" spellcheck="true"># Unescape html strings to the readable one.</span>
  <span class="token key atrule">unescape</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment" spellcheck="true"># Preload the search data when the page loads.</span>
  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 4. 本以为到第3步就ok了，可惜还是不行。最后，还需要把 algolia_search 关掉。即 &lt;your_hexo_blog>/themes/hexo-theme-next/_config.yml 配置 algolia_search：关闭它。</span>
<span class="token comment" spellcheck="true"># Algolia Search</span>
<span class="token comment" spellcheck="true"># For more information: https://www.algolia.com</span>
<span class="token key atrule">algolia_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 关闭这个</span>
  <span class="token punctuation">...</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>

$ 最后，重新编译部署即可：hexo clean &amp;&amp; hexo g <span class="token punctuation">-</span>d
</code></pre>
<h1 id="添加打赏功能（Reward）"><a href="#添加打赏功能（Reward）" class="headerlink" title="添加打赏功能（Reward）"></a>添加打赏功能（Reward）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1. 编辑主题配置文件，即：&lt;your_hexo_blog>/themes/hexo-theme-next/_config.yml 。 开启赞赏功能、提供收款码图片等。</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Reward (Donate)</span>
<span class="token comment" spellcheck="true"># Front-matter variable (unsupport animation).</span>
<span class="token key atrule">reward_settings</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># If true, reward will be displayed in every article by default.</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">animation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">comment</span><span class="token punctuation">:</span> 若对您有帮助？求鼓励，求支持！   <span class="token comment" spellcheck="true"># 打赏按钮上方的文字</span>

<span class="token comment" spellcheck="true"># 注：为了隐私及通常，此处的赞赏码图片我不放在主题下的images里（hexo-next默认是这里）。</span>
<span class="token comment" spellcheck="true"># 我新建 images 在根站点的 source 下，即：&lt;hexo_blog>/source/images，与 _post/categories/tags/about/404 等目录平级。</span>
<span class="token key atrule">reward</span><span class="token punctuation">:</span>
  <span class="token key atrule">wechatpay</span><span class="token punctuation">:</span> ../../images/private/wechatpay.png   <span class="token comment" spellcheck="true">#/images/wechatpay.png</span>
  <span class="token key atrule">alipay</span><span class="token punctuation">:</span> ../../images/private/alipay.png         <span class="token comment" spellcheck="true">#/images/alipay.png</span>
  <span class="token comment" spellcheck="true">#paypal: /images/paypal.png</span>
  <span class="token comment" spellcheck="true">#bitcoin: /images/bitcoin.png</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2. 修改默认“打赏”按钮文字，即：&lt;hexo_blog>/themes/hexo-theme-next/languages/zh-CN.yml</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">reward</span><span class="token punctuation">:</span>
  <span class="token key atrule">donate</span><span class="token punctuation">:</span> 打赏支持
  <span class="token punctuation">...</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3. 简单美化打赏位置，即：&lt;hexo_blog>/themes/hexo-theme-next/layout/_macro/post.swig ，如：添加一个虚线分隔，或者移动赞赏区域位置。</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token punctuation">...</span>
<span class="token punctuation">{</span>%<span class="token punctuation">-</span> if post.reward_settings.enable %<span class="token punctuation">}</span>
  &lt;hr<span class="token punctuation">></span>
  <span class="token punctuation">{</span><span class="token punctuation">{</span> partial('_partials/post/post<span class="token punctuation">-</span>reward.swig') <span class="token punctuation">}</span><span class="token punctuation">}</span>
  &lt;hr<span class="token punctuation">></span>
<span class="token punctuation">{</span>%<span class="token punctuation">-</span> endif %<span class="token punctuation">}</span>
<span class="token punctuation">...</span>
</code></pre>
<hr>
<h1 id="Front-Matter-系列使用指南"><a href="#Front-Matter-系列使用指南" class="headerlink" title="Front-Matter 系列使用指南"></a>Front-Matter 系列使用指南</h1><p>通常，文章开头的 <code>fron-matter模板</code> 示例为：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 标题
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 子标题
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-05-17 01:07:05</span>
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token number">100  </span><span class="token comment" spellcheck="true">#文章置顶权重，越大越靠前。不填写，默认通过创建时间倒序</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类1<span class="token punctuation">,</span>1子类A<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类1<span class="token punctuation">,</span>1子类B<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类2<span class="token punctuation">,</span>2子类A<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类2<span class="token punctuation">,</span>2子类B<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类2<span class="token punctuation">,</span>2子类C<span class="token punctuation">]</span>
<span class="token punctuation">-</span> 分类3
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>关键字1<span class="token punctuation">,</span>关键字2<span class="token punctuation">,</span>关键字N<span class="token punctuation">...</span><span class="token punctuation">]</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签1<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签2<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签N<span class="token punctuation">...</span><span class="token punctuation">]</span>
<span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token punctuation">---</span>
</code></pre>
<h2 id="categories（分类）"><a href="#categories（分类）" class="headerlink" title="categories（分类）"></a>categories（分类）</h2><p>Hexo+next 默认不支持多级分类，但可以通过 <code>[a,b,c,...]</code> 或 <code>- - 空格缩进</code> 2种形式来实现分类层级。</p>
<ul>
<li><p><strong>☞格式1：</strong></p>
<blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>父分类1<span class="token punctuation">,</span>父分类1的子分类1<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>父分类1<span class="token punctuation">,</span>父分类1的子分类2<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>父分类2<span class="token punctuation">,</span>父分类2的子分类1<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>父分类2<span class="token punctuation">,</span>父分类2的子分类2<span class="token punctuation">]</span>
<span class="token punctuation">-</span> 分类3
</code></pre>
</blockquote>
</li>
<li><p><strong>☞格式2：</strong></p>
<blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 父分类1
  <span class="token punctuation">-</span> 父分类1的子分类1
  <span class="token punctuation">-</span> 父分类1的子分类2
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 父分类2
  <span class="token punctuation">-</span> 父分类2的子分类1
  <span class="token punctuation">-</span> 父分类2的子分类2
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 分类3
</code></pre>
</blockquote>
</li>
</ul>
<h2 id="tags（标签）"><a href="#tags（标签）" class="headerlink" title="tags（标签）"></a>tags（标签）</h2><ul>
<li><p><strong>☞格式1：</strong></p>
<blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签1<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签2<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签N<span class="token punctuation">...</span><span class="token punctuation">]</span>
</code></pre>
</blockquote>
</li>
<li><p><strong>☞格式2：</strong></p>
<blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 标签1
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 标签2
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 标签N<span class="token punctuation">...</span>
</code></pre>
</blockquote>
</li>
</ul>
<h2 id="scaffolds（模板）"><a href="#scaffolds（模板）" class="headerlink" title="scaffolds（模板）"></a>scaffolds（模板）</h2><ul>
<li><p><code>draft.md</code>：对应 <code>hexo new draft &#39;NewDraftName&#39; &gt; ./source/NewDraftName/index.md</code>    </p>
<blockquote>
<pre class=" language-text"><code class="language-text">#模板填充例如：
---
title: {{ title }}
tags:
---
</code></pre>
</blockquote>
</li>
<li><p><code>page.md</code>：对应 <code>hexo new page &#39;NewPageName&#39; &gt; ./source/NewPageName/index.md</code></p>
<blockquote>
<pre class=" language-text"><code class="language-text">#模板填充例如：
---
title: {{ title }}      #标题
date: {{ date }}        #创建日期时间
comments: false         #禁止评论
---
</code></pre>
</blockquote>
</li>
<li><p><code>post.md</code>：对应 <code>hexo new &#39;NewPostName&#39; &gt; ./source/_post/NewPostName.md</code></p>
<blockquote>
<pre class=" language-text"><code class="language-text">#模板填充例如：
---
title: {{ title }}
date: {{ date }}
comments: true
categories: 
- [cat1,cat1-1]
- [cat2]
#keywords: [关键字1,关键字2]
#top: 10000 #置顶权重
tags: 
- [tag1] 
- [tag2] 
---

摘要....

<!-- more -->

正文...
</code></pre>
</blockquote>
</li>
</ul>
<h1 id="hexo-内置标签插件"><a href="#hexo-内置标签插件" class="headerlink" title="hexo 内置标签插件"></a>hexo 内置标签插件</h1><h2 id="如何引用站内文章？（pos-link）"><a href="#如何引用站内文章？（pos-link）" class="headerlink" title="如何引用站内文章？（pos_link）"></a>如何引用站内文章？（pos_link）</h2><p>在 hexo-markdown 中如何引用站内文章，使用内置的标签插件 <code>post_link</code> 实现：</p>
<blockquote>
<pre class=" language-text"><code class="language-text">语法：
{% post_link 文章文件名（不要后缀） 文章标题（可选，默认使用引用文章title） %}

示例：
{% post_link dev-tools/hexo/How-To-Config %}
{% post_link dev-tools/hexo/How-To-Config 《嘿嘿，引用名字我修改了》%}
</code></pre>
</blockquote>
]]></content>
      <categories>
        <category>技术篇</category>
        <category>工具指南</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>个性化</tag>
        <tag>美化</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建 Hexo+Github/Gitee 个人博客（入门篇1）</title>
    <url>/dev-tools/hexo/Setup-Tutorial/</url>
    <content><![CDATA[<p>如今各类博客系统一大堆，所谓萝卜白菜各有所爱。由于个人看重 hexo 的简洁性和免费托管 <a href="https://github.com/">Github</a>/<a href="https://gitee.com/">Gitee</a> 的原因，将决定折腾学习 hexo，以便后期学写技术博客、备忘笔记、和记录生活点滴。废话不多说，基于网上学习教程，个人做了如下总结。</p>
<span id="more"></span>

<!-- [toc] -->

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://hexo.io/zh-cn/">Hexo官网</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li>
<li><a href="https://www.jianshu.com/p/8681ab76da08">用hexo+github搭建属于自己的博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/136552969">部署Hexo踩过的坑—node14.0配置hexo</a></li>
<li><a href="https://segmentfault.com/a/1190000002632530">hexo常用命令笔记</a></li>
<li><a href="https://hexo.io/docs/one-command-deployment">One-Command Deployment</a></li>
<li><a href="https://blog.csdn.net/weixin_45667885/article/details/101084532">Hexo同时部署在GitHub、Coding、Gitee</a></li>
<li><a href="https://gavincrown.gitee.io/2020/07/06/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%92%8CGitee/">Hexo博客部署到GitHub和Gitee</a></li>
</ul>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>越来越多的人使用 GitHub/Gitee Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。虽然。hexo 搭建过程比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>
<p>本文就详细介绍下如何使用 Hexo + GitHub/Gitee 搭建免费个人博客网站的教程。</p>
<p><em>PS：Github 和 Gitee 基本类似，主要区别为 Gitee 为国内开发，服务器在国内相比较访问比较快速，所以本篇讲解如何同时部署 hexo 到 Github/Gitee。</em></p>
<hr>
<p>开始前，再介绍一下：</p>
<ul>
<li><h2 id="GitHub-Gitee-Pages-是什么？"><a href="#GitHub-Gitee-Pages-是什么？" class="headerlink" title="GitHub/Gitee Pages 是什么？"></a><a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages">GitHub/Gitee Pages 是什么？</a></h2><p>  GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。同理，Gitee Pages 是 Gitee 官方主的托管服务。</p>
</li>
<li><h2 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a><a href="https://hexo.io/zh-cn/">Hexo 是什么？</a></h2><p>  Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
</li>
<li><h2 id="Hexo-GitHub-Gitee-文章发布原理"><a href="#Hexo-GitHub-Gitee-文章发布原理" class="headerlink" title="Hexo + GitHub/Gitee 文章发布原理"></a>Hexo + GitHub/Gitee 文章发布原理</h2><p>  在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub/Gitee 上完成博文的发布。</p>
</li>
</ul>
<pre class=" language-text"><code class="language-text">graph LR
A(撰写文章.md) --> |hexo g| B(Hexo生成静态网页)
B --> |hexo d| C(部署到Github Pages)
C --> |访客| D(该博客首页xxx.github.io)
</code></pre>
<p><img src="http://pic3.zhimg.com/80/v2-a193a47cf70fe6ecf156e5f3d34920ea_1440w.jpg"></p>
<ul>
<li><h2 id="Hexo-的优缺点"><a href="#Hexo-的优缺点" class="headerlink" title="Hexo 的优缺点"></a>Hexo 的优缺点</h2><p>  <strong>优点</strong>：免费托管在 GitHub/Gitee，安全省心；静态站点，轻量快速；可自由定制；迁移方便……</p>
<p>  <strong>不足</strong>：发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>
</li>
<li><h2 id="托管与博客地址一览表"><a href="#托管与博客地址一览表" class="headerlink" title="托管与博客地址一览表"></a>托管与博客地址一览表</h2><table>
<thead>
<tr>
<th align="center">托管平台</th>
<th align="center">访问博客地址格式</th>
<th align="center">示例</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://github.com/">https://github.com</a></td>
<td align="center">https://用户名.github.io</td>
<td align="center"><a href="https://jiyiqini.github.io/">https://jiyiqini.github.io</a></td>
<td align="center">国内访问慢</td>
</tr>
<tr>
<td align="center"><a href="https://gitee.com/">https://gitee.com</a></td>
<td align="center">https://用户名.gitee.io</td>
<td align="center"><a href="https://jiyiqini.gitee.io/">https://jiyiqini.gitee.io</a></td>
<td align="center">国内访问快</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><p>由于 Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，打开 terminal ，依次输入 <code>node -v、npm -v、 git --version</code> 并回车，出现程序版本号即可。</p>
<h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1. 搭建环境"></a>1. 搭建环境</h2><ul>
<li><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><p>  忽略。具体请下载安装包或终端命令安装均可。</p>
</li>
<li><h3 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h3><p>  忽略。具体请下载安装包或终端命令安装均可。</p>
</li>
<li><h3 id="申请-github、gitee-账号"><a href="#申请-github、gitee-账号" class="headerlink" title="申请 github、gitee 账号"></a>申请 github、gitee 账号</h3><p>  忽略。本文着重讲解hexo，请自行网上查阅。</p>
</li>
<li><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>  具体过程请看如下。</p>
</li>
</ul>
<h2 id="2-连接-github-gitee-与-SSH-key"><a href="#2-连接-github-gitee-与-SSH-key" class="headerlink" title="2. 连接 github/gitee 与 SSH-key"></a>2. 连接 github/gitee 与 SSH-key</h2><h3 id="Step1：SSH-key（方便多环境管理不同SSH-Key，此处以配置多个ssk-key为例）"><a href="#Step1：SSH-key（方便多环境管理不同SSH-Key，此处以配置多个ssk-key为例）" class="headerlink" title="Step1：SSH-key（方便多环境管理不同SSH-Key，此处以配置多个ssk-key为例）"></a>Step1：SSH-key（方便多环境管理不同SSH-Key，此处以配置多个ssk-key为例）</h3><pre class=" language-bash"><code class="language-bash">1，分别生成不同使用环境的SSH-Key：

<span class="token comment" spellcheck="true"># 例1，生成 github、gitgee 使用的 ssh-key，并单独命名管理为 github_id_rsa</span>
<span class="token comment" spellcheck="true"># 例2，生成 公司(例如：gitlab) 使用的 ssh-key，并单独命名管理为 gitlab_id_rsa</span>
$ ssh-keygen -t rsa -C <span class="token string">"your_email@your_github.com"</span> -f ~/.ssh/github_id_rsa
$ ssh-keygen -t rsa -C <span class="token string">"your_email@your_gitee.com"</span>  -f ~/.ssh/gitee_id_rsa
$ ssh-keygen -t rsa -C <span class="token string">"your_email@your_gitlab.com"</span> -f ~/.ssh/gitlab_id_rsa
$ <span class="token punctuation">..</span>.

最终，在 ~/.ssh/ 目录会生成 私钥和公钥（分别为：github_id_rsa/github_id_rsa.pub、gitee_id_rsa/gitee_id_rsa.pub、gitlab_id_rsa/gitlab_id_rsa.pub）。然后，我们将公钥中的内容粘帖到各自服务器的 SSH-key 的配置中即可。

2，添加私钥：

$ ssh-add ~/.ssh/github_id_rsa  <span class="token comment" spellcheck="true">#输出例如：Identity added: id_rsa (sh14****60@163)</span>
$ ssh-add ~/.ssh/gitee_id_rsa   <span class="token comment" spellcheck="true">#输出例如：Identity added: id_rsa (sh14****60@163)</span>
$ ssh-add ~/.ssh/gitlab_id_rsa  <span class="token comment" spellcheck="true">#输出例如：Identity added: github_id_rsa (sh14****60@163)</span>
$ <span class="token punctuation">..</span>.

如果执行ssh-add时提示<span class="token string">"Could not open a connection to your authentication agent"</span>，可以现执行命令：

$ ssh-agent <span class="token function">bash</span>

然后，再运行ssh-add命令：

<span class="token comment" spellcheck="true"># 可以通过 ssh-add -l 来显示私钥列表</span>
$ ssh-add -l
<span class="token comment" spellcheck="true"># 输出（对应ssh-add添加的密钥），例如：</span>
<span class="token comment" spellcheck="true"># 3072 SHA256:IFMBBfvZvSb1+Gmrs******9HaY2f5x******Sw+atVY sh14****60@163.com (RSA)</span>
<span class="token comment" spellcheck="true"># 3072 SHA256:IFMBBfvZvF+d+Bgtf******9HaY2f5x******BstddYZ sh14****60@163.com (RSA)</span>
<span class="token comment" spellcheck="true"># 3072 SHA256:Z65IEans5+7mZ5Fj8******lbYa2Qk******UP54oUeE sh14****60@163.com (RSA)</span>

<span class="token comment" spellcheck="true"># 可以通过 ssh-add -D 来清空私钥列表</span>
$ ssh-add -D

ssh-add命令是把专用密钥添加到ssh-agent的高速缓存中。该命令位置在/usr/bin/ssh-add，参数选项有：

-D：删除ssh-agent中的所有密钥. 
-d：从ssh-agent中的删除密钥 
-e pkcs11：删除PKCS<span class="token comment" spellcheck="true">#11共享库pkcs1提供的钥匙。 </span>
-s pkcs11：添加PKCS<span class="token comment" spellcheck="true">#11共享库pkcs1提供的钥匙。 </span>
-L：显示ssh-agent中的公钥 
-l：显示ssh-agent中的密钥 
-t life：对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥 -X：对ssh-agent进行解锁 
-x：对ssh-agent进行加锁

3，创建并修改config配置文件：

<span class="token comment" spellcheck="true"># 在 ~/.ssh 目录下新建一个 config 文件：</span>
$ <span class="token function">touch</span> config

添加内容：

<span class="token comment" spellcheck="true"># github</span>
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/github_id_rsa

<span class="token comment" spellcheck="true"># gitee</span>
Host gitee.com
    HostName gitee.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/gitee_id_rsa

<span class="token comment" spellcheck="true"># gitlab</span>
Host gitlab.com
    HostName gitlab.com <span class="token comment" spellcheck="true">#这里填你们公司的git网址即可</span>
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/gitlab_id_rsa

<span class="token comment" spellcheck="true"># 更多ssh-key添加...</span>

4，测试：

$ <span class="token function">ssh</span> -T git@github.com
$ <span class="token function">ssh</span> -T git@gitee.com

<span class="token comment" spellcheck="true"># 若出错的话，别急！通过debug来查看解决吧。(其中-v 是输出编译信息，然后根据编译信息自己去解决问题吧)：</span>
$ <span class="token function">ssh</span> -vT git@github.com

若输出：  

Hi <span class="token operator">&lt;</span>your_ssh_user_name<span class="token operator">></span><span class="token operator">!</span> You've successfully authenticated, but <span class="token operator">&lt;</span>GitHub<span class="token operator">|</span>GITEE.COM<span class="token operator">|</span><span class="token punctuation">..</span>.<span class="token operator">></span> does not provide shell access.  

则表示成功的连上 github 了。也可以试试链接公司的 gitlab 。这样，就可以在不同的仓库，用不同的账号登录了~~~
</code></pre>
<h3 id="Step2：在托管平台上添加公钥授权："><a href="#Step2：在托管平台上添加公钥授权：" class="headerlink" title="Step2：在托管平台上添加公钥授权："></a>Step2：在托管平台上添加公钥授权：</h3><ul>
<li><p>Github 添加公钥授权：</p>
<pre class=" language-bash"><code class="language-bash">1，Github -<span class="token operator">></span> Settings -<span class="token operator">></span> SSH and GPG keys
2，SSH keys选项 -<span class="token operator">></span> New SSH key。
3，Title：随便取个名字即可，如：SSH-key_myGithub。
4，Key：将之前创建的 github 公钥（即 github_id_rsa.pub）里的内容，全复制粘贴进去。
5，点击“Add SSH key”，保存。
</code></pre>
</li>
<li><p>Gitee 添加公钥授权：</p>
<pre class=" language-bash"><code class="language-bash">1，Gitee -<span class="token operator">></span> 设置 -<span class="token operator">></span> 安全设置<span class="token comment" spellcheck="true">#SSH公钥。</span>
2，SSH公钥 -<span class="token operator">></span> 添加公钥。
3，标题：随便取个名字即可。如：SSH-key_myGitee。
4，公钥：将之前创建的 gitee 公钥（即 gitee_id_rsa.pub）里的内容，全复制粘贴进去。
5，点击“确定”，保存。
</code></pre>
</li>
</ul>
<h3 id="Step3：验证连接"><a href="#Step3：验证连接" class="headerlink" title="Step3：验证连接"></a>Step3：验证连接</h3><pre class=" language-bash"><code class="language-bash">1，进入终端。
2，输入命令：ssh -T git@github.com <span class="token comment" spellcheck="true"># gitee：ssh -T git@gitee.com</span>
3，若出现 “Are you sure……”，输入 <span class="token function">yes</span> 回车确认。
4，最后输出 “Hi <span class="token operator">&lt;</span>your_ssh_user_name<span class="token operator">></span><span class="token operator">!</span> You've successfully authenticated, but <span class="token operator">&lt;</span>GitHub<span class="token operator">|</span>GITEE.COM<span class="token operator">></span> does not provide shell access.  ”，表示成功连接。
</code></pre>
<h2 id="3-创建-Github-Gitee-Pages-仓库"><a href="#3-创建-Github-Gitee-Pages-仓库" class="headerlink" title="3. 创建 Github/Gitee Pages 仓库"></a>3. 创建 Github/Gitee Pages 仓库</h2><h3 id="Github-Pages-仓库"><a href="#Github-Pages-仓库" class="headerlink" title="Github Pages 仓库"></a>Github Pages 仓库</h3><pre class=" language-bash"><code class="language-bash">1，GitHub 主页右上角加号 -<span class="token operator">></span> New repository。
2，Repository name 中输入“用户名.github.io”。
3，勾选 Public。必须 Public 才能使用。 
4，勾选 “Initialize this repository with a README”。
5，填好后点击 Create repository 创建。
6，创建后默认自动启用 HTTPS，博客地址为：https://用户名.github.io。
</code></pre>
<p>例如，我的博客：<a href="https://jiyiqini.github.io/">https://jiyiqini.github.io</a></p>
<h3 id="Gitee-Pages-仓库"><a href="#Gitee-Pages-仓库" class="headerlink" title="Gitee Pages 仓库"></a>Gitee Pages 仓库</h3><pre class=" language-bash"><code class="language-bash">1，Gitee 主页右上角加号 -<span class="token operator">></span> 新建仓库。
2，仓库名称中输入“用户名”。
3，勾选“开源”或“私有”均可。对于个人博客嘛，私有吧。
4，勾选“初始化仓库”，其它看情况可选（如：设置模板、选择分支模型）。
5，创建完成后，点击该仓库的 “服务” -<span class="token operator">></span> Gitee Pages <span class="token operator">></span> 勾选“强制使用HTTPS” -<span class="token operator">></span> 启动。博客地址为：https://用户名.gitee.io。
</code></pre>
<p>例如，我的博客：<a href="https://jiyiqini.gitee.io/">https://jiyiqini.gitee.io</a></p>
<p><strong>注意事项：</strong></p>
<ul>
<li>Github repo 权限只能为 <code>public</code> ，而 Gitee repo 权限可以是 <code>public</code>、也可是 <code>private</code>。</li>
<li>Github 的 repo name 必须为 <code>“用户名.github.io”</code> 格式，从而博客访问地址为：<code>https://用户名.github.io</code>；而 Gitee 的 repo name 任意。***一般与用户名一致，这样博客地址就比较简洁，形如：<code>https://用户名.gitee.io</code>***。若 repo name 不保持与用户名一致，则需要有二级目录方可访问，如：<code>https://用户名.gitee.io/仓库名</code>。</li>
<li>Github 创建好仓库，默认为 <code>HTTPS</code> ，而 Gitee 需要去手动开启！</li>
</ul>
<h2 id="4-Hexo博客系统接入（核心）"><a href="#4-Hexo博客系统接入（核心）" class="headerlink" title="4. Hexo博客系统接入（核心）"></a>4. Hexo博客系统接入（核心）</h2><h3 id="hexo-安装与基本使用"><a href="#hexo-安装与基本使用" class="headerlink" title="hexo 安装与基本使用"></a>hexo 安装与基本使用</h3><p>☞ <a href="https://hexo.io/zh-cn/">Hexo</a>官方步骤参考：</p>
<blockquote>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g
$ hexo init blog
$ <span class="token function">cd</span> blog
$ <span class="token function">npm</span> <span class="token function">install</span>
$ hexo server
</code></pre>
</blockquote>
<p>☞ Hexo 博客文件夹目录结构概览（<a href="https://hexo.io/zh-cn/docs/setup">更多详情</a>）：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>
├── _config.yml         <span class="token comment" spellcheck="true">#网点的配置信息</span>
├── db.json             <span class="token comment" spellcheck="true">#缓存文件</span>
├── node_modules        <span class="token comment" spellcheck="true">#安装的插件以及hexo所需的一些node.js模块。</span>
├── package-lock.json   <span class="token comment" spellcheck="true">#应用程序的信息</span>
├── package.json        <span class="token comment" spellcheck="true">#应用程序信息，配置hexo运行需要的js包。</span>
├── public              <span class="token comment" spellcheck="true">#最终所见网页的所有内容</span>
├── scaffolds           <span class="token comment" spellcheck="true">#模版文件夹。当您新建文章时，Hexo会根据scaffold来建立文件。Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</span>
│   ├── draft.md
│   ├── page.md
│   └── post.md
├── <span class="token function">source</span>              <span class="token comment" spellcheck="true">#存放用户资源，md等文档。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown和HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</span>
│   └── _posts
└── themes              <span class="token comment" spellcheck="true">#主题 文件夹。Hexo 会根据主题来生成静态页面。</span>
</code></pre>
<p><em><strong>具体个人搭建步骤：</strong></em></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ********** 1，npm安装hexo博客程序：</span>
$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli


<span class="token comment" spellcheck="true"># ********** 2，hexo初始化及相关依赖：</span>
<span class="token comment" spellcheck="true"># 假设，我的博客放在： ~/MyBlogs/Hexo-Blogs</span>
$ <span class="token function">cd</span> ~/MyBlogs/Hexo-Blogs <span class="token comment" spellcheck="true">#进入存放hexo博客程序的目标目录</span>
$ hexo init     <span class="token comment" spellcheck="true">#初始化。亦可：进入上一级目录~/MyBlogs下，再直接 hexo init Hexo-Blogs。</span>
$ <span class="token function">npm</span> <span class="token function">install</span>   <span class="token comment" spellcheck="true">#安装依赖组件</span>


<span class="token comment" spellcheck="true"># ********** 3，生成与预览：</span>
$ hexo g    <span class="token comment" spellcheck="true">#生成静态页面。或hexo generate</span>
$ hexo s    <span class="token comment" spellcheck="true">#启动本地预览。或hexo server</span>
<span class="token comment" spellcheck="true"># 浏览器打开终端提示的url：http://localhost:4000。若出现默认的hexo页面，表示本地博客成功。</span>
<span class="token comment" spellcheck="true"># Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。</span>

<span class="token comment" spellcheck="true"># ********** 4，部署 Hexo 到 GitHub Pages</span>
<span class="token comment" spellcheck="true"># 本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</span>
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save <span class="token comment" spellcheck="true">#安装 hexo-deployer-git。否则可能会出错“error deployer not found:git/github”</span>
$ 修改 <span class="token punctuation">..</span>/<span class="token punctuation">{</span>your_hexo_blog<span class="token punctuation">}</span>/_config.yml<span class="token variable">$deploy</span> 中 Deployment 部分并保存：
    <span class="token comment" spellcheck="true"># Deployment</span>
    <span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>
    deploy:
      type: <span class="token function">git</span>
      repo: https://github.com/<span class="token punctuation">{</span>用户名<span class="token punctuation">}</span>/<span class="token punctuation">{</span>用户名<span class="token punctuation">}</span>.github.io.git
      branch: master
$ hexo d <span class="token comment" spellcheck="true">#发布网点到 Github Pages</span>
$ 浏览器访问 https://用户名.github.io，结束. <span class="token comment" spellcheck="true">#注意：第一次发布可能会有10分钟的延迟，在这期间可能看到的是空白页面。</span>
</code></pre>
<p>☞ ==<em><strong>每次修改完本地的文件后必须执行以下命令，以重新部署Github Pages：</strong></em>==</p>
<pre class=" language-bash"><code class="language-bash">hexo clean              <span class="token comment" spellcheck="true">#清除缓存</span>
hexo g 或 hexo generate <span class="token comment" spellcheck="true">#生成静态页面</span>
hexo d 或 deploy        <span class="token comment" spellcheck="true">#部署发布。发布前本地检查预览下：hexo s -> http://localhost:4000</span>
</code></pre>
<h3 id="hexo-同时部署-Github-Gitee-Pages"><a href="#hexo-同时部署-Github-Gitee-Pages" class="headerlink" title="hexo 同时部署 Github/Gitee Pages"></a>hexo 同时部署 Github/Gitee Pages</h3><p>即，在您的博客根目录下，编辑 <code>_config.yml</code> 配置文件，设置 <code>deploy</code> ，如：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Deployment</span>
<span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># 单平台部署，不用 - 分栏配置亦可以，直接如下：</span>
  <span class="token comment" spellcheck="true"># ref: https://hexo.io/docs/one-command-deployment</span>
  <span class="token comment" spellcheck="true"># type: git</span>
  <span class="token comment" spellcheck="true"># repo: https://github.com/用户名/用户名.github.io.git</span>
  <span class="token comment" spellcheck="true"># #repo: https://gitee.com/用户名/用户名.git</span>
  <span class="token comment" spellcheck="true"># branch: master</span>
  
  <span class="token comment" spellcheck="true"># 如果为多平台部署，请用 - 分栏配置：</span>
<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>用户名/用户名.github.io.git <span class="token comment" spellcheck="true">#或 https://github.com/用户名/用户名.github.io.git</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master
<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git 
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>用户名/用户名.git <span class="token comment" spellcheck="true">#或 https://gitee.com/用户名/用户名.git</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master
</code></pre>
<p><strong>注意事项：Github Pages 部署后，支持自动更新，无需额外操作，稍等一小会就可访问了，因 Github 服务器在国外。而 Gitee Pages 则不一样，部署后，不支持自动更新，需要手动去点击更新后才可以访问。</strong></p>
<h3 id="最后，一键部署。"><a href="#最后，一键部署。" class="headerlink" title="最后，一键部署。"></a>最后，一键部署。</h3><p>通常，我比较喜欢使用一键操作：</p>
<blockquote>
<p><code>hexo clean &amp;&amp; hexo g -d</code> 或 <code>hexo clean &amp;&amp; hexo d -g</code></p>
</blockquote>
<h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><h2 id="Hexo基本命令（★★★★）"><a href="#Hexo基本命令（★★★★）" class="headerlink" title="Hexo基本命令（★★★★）"></a>Hexo基本命令（★★★★）</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 基本常用</span>
hexo <span class="token punctuation">[</span>-<span class="token punctuation">]</span>h<span class="token operator">|</span><span class="token function">help</span>              <span class="token comment" spellcheck="true">#查看帮助</span>
hexo <span class="token punctuation">[</span>-<span class="token punctuation">]</span>v<span class="token operator">|</span>version           <span class="token comment" spellcheck="true">#查看 hexo 的版本，包括 hexo 所依赖的组件正在使用的版本，如：node、v8……</span>

hexo n/new <span class="token string">"postName"</span>       <span class="token comment" spellcheck="true">#新建文章。在source下_post中生成一个“postName.md”，打开开始写文章即可。即：/source/_post/&lt;postName.md></span>
hexo n/new page <span class="token string">"pageName"</span>  <span class="token comment" spellcheck="true">#新建页面。在source下生成page文件夹页并默认生成index.md，即：/source/&lt;pageName>/index.md</span>

hexo g/generate             <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>
hexo s/server               <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>
hexo d/deploy               <span class="token comment" spellcheck="true">#将.deploy目录部署到GitHub</span>
hexo p/publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span>  <span class="token comment" spellcheck="true">#发表草稿</span>

<span class="token comment" spellcheck="true"># 完成后部署</span>
<span class="token comment" spellcheck="true"># 两个命令的作用是相同的（--deploy全名等价于-简写）</span>
hexo deploy --generate 或 hexo generate --deploy
<span class="token comment" spellcheck="true">#简写即为：</span>
hexo g -d 或 hexo d -g  <span class="token comment" spellcheck="true">#生成后并部署（g和d顺序可交换）</span>
hexo g -d -m <span class="token string">'message'</span>  <span class="token comment" spellcheck="true">#生成后并部署带git-commit message</span>

<span class="token comment" spellcheck="true"># 服务器</span>
hexo s/server                   <span class="token comment" spellcheck="true">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span>
hexo s/server -s                <span class="token comment" spellcheck="true">#静态模式</span>
hexo s/server -p 5000           <span class="token comment" spellcheck="true">#更改端口为5000</span>
hexo s/server -i 192.168.1.1    <span class="token comment" spellcheck="true">#自定义 IP</span>

<span class="token comment" spellcheck="true"># 监视文件变动</span>
hexo generate               <span class="token comment" spellcheck="true">#使用 Hexo 生成静态文件快速而且简单</span>
hexo generate --watch       <span class="token comment" spellcheck="true">#监视文件变动</span>
</code></pre>
<h2 id="Hexo升级"><a href="#Hexo升级" class="headerlink" title="Hexo升级"></a>Hexo升级</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用淘宝源的 cnpm 替换 npm</span>
<span class="token comment" spellcheck="true"># 若网络好，还是尽量使用 npm ，万一使用 cnpm 出现未同步或者其他问题，当然可能性小。</span>
<span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org

cnpm <span class="token function">install</span> -g cnpm        <span class="token comment" spellcheck="true"># 升级 npm</span>
cnpm cache clean -f         <span class="token comment" spellcheck="true"># 清除 npm 缓存</span>

<span class="token operator">==</span><span class="token operator">=</span>更新 hexo: 进入 blog 目录，执行如下命令<span class="token operator">==</span><span class="token operator">=</span> 
<span class="token comment" spellcheck="true"># 更新 package.json 中的 hexo 及个插件版本</span>
cnpm <span class="token function">install</span> -g npm-check   <span class="token comment" spellcheck="true"># 检查之前安装的插件，都有哪些是可以升级的 </span>
cnpm <span class="token function">install</span> -g npm-upgrade <span class="token comment" spellcheck="true"># 升级系统中的插件</span>
npm-check
npm-upgrade

<span class="token comment" spellcheck="true"># 更新 hexo 及所有插件</span>
cnpm update

<span class="token comment" spellcheck="true"># 确认 hexo 已经更新</span>
hexo -v
</code></pre>
<h1 id="Hexo个性化设置（基础入门）"><a href="#Hexo个性化设置（基础入门）" class="headerlink" title="Hexo个性化设置（基础入门）"></a>Hexo个性化设置（基础入门）</h1><p>此章节仅讲解 hexo 如何设置主题，更多详细请移步: <a href="/dev-tools/hexo/How-To-Config/" title="《如何美化 hexo+next 个人博客？(入门篇2)》">《如何美化 hexo+next 个人博客？(入门篇2)》</a></p>
<h2 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h2><p>Hexo官方推荐或Github上搜索，都有很多主题。</p>
<blockquote>
<ol>
<li><a href="https://hexo.io/themes">https://hexo.io/themes</a></li>
</ol>
</blockquote>
<p>☞ <strong>切换主题步骤：</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#********** 1，进入&lt;your_blogs>/thems目录</span>
$ <span class="token function">cd</span> themes

<span class="token comment" spellcheck="true">#********** 2，下载主题（例如：https://github.com/theme-next/hexo-theme-next.git）</span>
$ <span class="token function">git</span> clone <span class="token operator">&lt;</span>git_theme_repo_url<span class="token operator">></span>

<span class="token comment" spellcheck="true">#********** 3, 配置&lt;your_blogs>/_config.yml</span>
    <span class="token comment" spellcheck="true"># vim _config.yml</span>
    <span class="token comment" spellcheck="true"># Extensions</span>
    <span class="token comment" spellcheck="true">## Plugins: https://hexo.io/plugins/</span>
    <span class="token comment" spellcheck="true">## Themes: https://hexo.io/themes/</span>
    theme: hexo-theme-next <span class="token comment" spellcheck="true">#landscape</span>

<span class="token comment" spellcheck="true">#********** 4, 重启server（本地预览或部署Github）</span>
$ hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s    <span class="token comment" spellcheck="true">#更新并本地预览服务</span>
$ hexo cleann <span class="token operator">&amp;&amp;</span> hexo d -g          <span class="token comment" spellcheck="true">#更新并部署发布</span>
</code></pre>
<h2 id="布局切换"><a href="#布局切换" class="headerlink" title="布局切换"></a>布局切换</h2><h1 id="Hexo搭建遇到问题（仅入门常见的几个）"><a href="#Hexo搭建遇到问题（仅入门常见的几个）" class="headerlink" title="Hexo搭建遇到问题（仅入门常见的几个）"></a>Hexo搭建遇到问题（仅入门常见的几个）</h1><p>此章节仅讲解 hexo 入门搭建中遇到的几个报错与解决，更多异常与处理请移步: <a href="/dev-tools/hexo/Hexo-Issues/" title="《常见的 Hexo 报错与解决》">《常见的 Hexo 报错与解决》</a></p>
<ul>
<li><p>若出现 <code>error deployer not found:git 或者 error deployer not found:github</code> 的错误：</p>
<blockquote>
<p><strong>解决办法</strong>：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token variable">$npm</span> <span class="token function">install</span> hexo-deployer-git --save
</code></pre>
</blockquote>
</li>
<li><p>若出现类似 <code>FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: ...</code> 错误：</p>
<blockquote>
<p><strong>解决办法</strong>：</p>
<pre class=" language-bash"><code class="language-bash">_config.yml中配置项的冒号后面要用空格隔开，再跟配置内容。
<span class="token comment" spellcheck="true">#例如：</span>
<span class="token comment" spellcheck="true">#deploy:</span>
<span class="token comment" spellcheck="true">#  type: git</span>
<span class="token comment" spellcheck="true">#  repo: https://github.com/用户名/用户名.github.io.git</span>
<span class="token comment" spellcheck="true">#  branch: master</span>
</code></pre>
</blockquote>
</li>
<li><p>中文乱码问题：</p>
<blockquote>
<p><strong>解决办法</strong>：</p>
<pre class=" language-bash"><code class="language-bash">将文件的内容编码改为UTF8格式
</code></pre>
</blockquote>
</li>
<li><p><code>hexo sever</code>能够成功运行，但是 <code>localhost:4000</code> 无法访问：</p>
<blockquote>
<p><strong>解决办法</strong>：</p>
<pre class=" language-bash"><code class="language-bash">$ hexo s -p 5000 <span class="token comment" spellcheck="true">#改用其他端口5000启动</span>
</code></pre>
</blockquote>
</li>
<li><p><code>hexo d</code> 和 <code>hexo -v</code> 若出现如下稀奇古怪错误，已确保所有配置都正确，但还是会报错：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hexo -v 提示错误：</span>
<span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'lineno'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>Use <span class="token variable"><span class="token variable">`</span>node --trace-warnings <span class="token punctuation">..</span>.<span class="token variable">`</span></span> to show where the warning was created<span class="token punctuation">)</span>
<span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'column'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'filename'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'lineno'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'column'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'filename'</span> of module exports inside circular dependency
hexo: 4.2.0
hexo-cli: 3.1.0
os: Darwin 19.4.0 darwin x64
node: 14.2.0 <span class="token comment" spellcheck="true">#------》注意这一行！！！</span>
v8: 8.1.307.31-node.32
uv: 1.37.0
zlib: 1.2.11
brotli: 1.0.7
ares: 1.16.0
modules: 83
nghttp2: 1.40.0
napi: 6
llhttp: 2.0.4
openssl: 1.1.1g
cldr: 36.1
icu: 66.1
tz: 2019c
unicode: 13.0

<span class="token comment" spellcheck="true"># hexo d 提示错误：</span>
<span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'lineno'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>Use <span class="token variable"><span class="token variable">`</span>node --trace-warnings <span class="token punctuation">..</span>.<span class="token variable">`</span></span> to show where the warning was created<span class="token punctuation">)</span>
<span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'column'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'filename'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'lineno'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'column'</span> of module exports inside circular dependency
<span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'filename'</span> of module exports inside circular dependency
INFO  Start processing
INFO  Files loaded <span class="token keyword">in</span> 125 ms
INFO  0 files generated <span class="token keyword">in</span> 42 ms
INFO  Deploying: <span class="token function">git</span>
INFO  Clearing .deploy_git folder<span class="token punctuation">..</span>.
INFO  Copying files from public folder<span class="token punctuation">..</span>.
FATAL Something's wrong. Maybe you can <span class="token function">find</span> the solution here: https://hexo.io/docs/troubleshooting.html
TypeError <span class="token punctuation">[</span>ERR_INVALID_ARG_TYPE<span class="token punctuation">]</span>: The <span class="token string">"mode"</span> argument must be integer. Received an instance of Object
</code></pre>
<blockquote>
<p><strong>解决办法：</strong></p>
<ul>
<li><strong>原因</strong>：一般由于 hexo 不能使用最新版本的 node 版本（如，我的版本比较高 14.2.0） ，安装或切换为某个低的稳定版本即可（如，我切换成 v12.22.4 就正常了）。</li>
<li><strong>解决</strong>：  <pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> n stable   <span class="token comment" spellcheck="true">#n下载最新稳定版本。若需要切换回指定版本，则使用 sudo n 14.2.0(即版本号)</span>
$ hexo <span class="token function">v</span><span class="token operator">|</span>version  <span class="token comment" spellcheck="true">#查看版本，正常了。</span>
$ hexo d<span class="token operator">|</span>deploy   <span class="token comment" spellcheck="true">#重新发布，正常了。</span>
</code></pre>
</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>技术篇</category>
        <category>工具指南</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 入门基础（概览）</title>
    <url>/tech-articles/backend-tech/SpringBoot/level-basic/SB-Learn-1/</url>
    <content><![CDATA[<p>什么叫微服务？Spring Boot 又是什么？它们能干什么，如何开发？Spring Boot 与传统的 Spring MVC、SSH 这些有啥异同？</p>
<span id="more"></span>

<h1 id="一、微服务与-Spring-Boot-简介"><a href="#一、微服务与-Spring-Boot-简介" class="headerlink" title="一、微服务与 Spring Boot 简介"></a>一、微服务与 Spring Boot 简介</h1><ol>
<li>微服务：一个项目，可以由多个 小型服务构成（微服务）。</li>
<li>Spring Boot可以快速开发“微服务模块”。<ul>
<li>简化J2EE开发（即简化用java开发大型项目）</li>
<li>整个Spring技术栈的整合（例如：整合SpringMVC、Spring……）</li>
<li>整个J2EE技术的整合（例如：整合Mybatis、redis、Struts2[目前用的少了，常用redis]……）</li>
</ul>
</li>
</ol>
<h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><pre class=" language-text"><code class="language-text">1. jdk（JAVA_HOME[jdk根目录]、path[JAVA_HOME/bin]、classpath[当前目录.及JAVA_HOME/lib]）
2. maven：
    - 下载，如：apache-maven-3.6.3-bin.tar.gz
    - 解压缩，如：apache-maven-3.6.3
    - 环境变量，如：MAVEN_HOME，即maven根目录
    - 添加bin目录，如：path[MAVEN_HOME/bin]
    - maven本地仓库，MAVEN_HOME/conf/settings.xml，如：<localRepository>本地创建的maven仓库，如：D:/mvnrepo</localRepository>
    - 在IDE中配置mvn：
      - STS：
          1. Preferences->Installations->取消默认内置maven，新建勾选解压缩的MAVEN_HOME。
          2. Preferences->User Settings->勾选MAVEN_HOME/conf/settings.xml。
3. Spring Boot开发工具：
    1. eclipse（STS插件）
    2. STS软件（官方推荐，即相当于整合eclipse+STS）
    3. IntelliJ IDEA
</code></pre>
<h2 id="Mac安装配置Maven"><a href="#Mac安装配置Maven" class="headerlink" title="Mac安装配置Maven"></a>Mac安装配置Maven</h2><ol>
<li><p><strong><a href="http://maven.apache.org/download.cgi">下载</a>。</strong> 例如，选择 <code>apache-maven-3.6.3-bin.tar.gz</code></p>
</li>
<li><p><strong>安装。</strong> </p>
<ul>
<li><p>解压到 <code>/usr/local</code> 下（随意，没有限定放在哪）。如， <code>/usr/local/apache-maven-3.6.3</code></p>
</li>
<li><p>配置 <code>.bash_profile</code> ，追加如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> MAVEN_HOME<span class="token operator">=</span>/usr/local/apache-maven-3.6.3
<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span><span class="token keyword">:</span><span class="token variable">$MAVEN_HOME</span>/bin
</code></pre>
<blockquote>
<p>如果是 bash shell，则在终端输入 open .bash_profile。<br>如果是 zsh shell，则在终端输入 open .zshrc。<br>为了避免在删除了 iTerm 这样的终端后，在系统自带终端中无法正常使用 Maven 或其它的软件，可以<strong>在这两个配置文件中都配置一下</strong>。   </p>
</blockquote>
</li>
<li><p><code>source .bash_profile</code> 使配置生效。</p>
</li>
<li><p>验证。输入 <code>mvn -v/-version</code> ，如出现maven版本信息（例如），则安装maven成功。</p>
<pre class=" language-bash"><code class="language-bash">➜ ~ mvn -v
Apache Maven 3.6.3 <span class="token punctuation">(</span>cecedd343002696d0abb50b32b541b8a6ba2883f<span class="token punctuation">)</span>
Maven home: /usr/local/apache-maven-3.6.3
Java version: 1.8.0_121, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre
Default locale: zh_CN, platform encoding: UTF-8
OS name: <span class="token string">"mac os x"</span>, version: <span class="token string">"10.15.4"</span>, arch: <span class="token string">"x86_64"</span>, family: <span class="token string">"mac"</span>
</code></pre>
<blockquote>
<p>如果安装了 Oh My Zsh，一定要记得在其配置文件 <code>~/.zshrc</code> 中也要配置一下，否则在终端中运行的一些命令可能会无效，在安装其它软件时也是，详见<a href="https://blog.csdn.net/WinstonLau/article/details/81323340">这里</a><br><code>~</code>代表<code>/Users/你的用户名</code>，<code>~/.zshrc</code>就相当于<code>/Users/你的用户名/.zshrc</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>配置。</strong> </p>
<ul>
<li><p><strong>更改Maven本地仓库位置</strong> </p>
<ul>
<li><p>maven 的本地仓库的默认位置为：<code>$&#123;user.home&#125;/.m2/repository</code>，也即 <code>/Users/你的用户名/.m2/repository</code> 。</p>
</li>
<li><p>maven 刚安装好时，是找不到这个名为 <code>.m2</code> 的隐藏文件夹的，因为我们还没有下载任何 jar 包，因此还没有生成这个文件夹。</p>
</li>
<li><p>更改本地仓库的位置，需要打开 <code>/usr/local/apache-maven-3.6.3/conf/settings.xml</code> 这个文件，进行如下配置 <code>&lt;localRepository&gt;/usr/local/apache-maven-3.6.3/repository&lt;/localRepository&gt;</code> 。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- localRepository
   | The path to the local repository maven will use to store artifacts.
   |
   | Default: ${user.home}/.m2/repository
  &lt;localRepository>/path/to/local/repo&lt;/localRepository>
  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>/usr/local/apache-maven-3.6.3/repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>说明：</p>
<ul>
<li><p><strong>本地仓库</strong>：用来存储从远程仓库或中央仓库下载的插件和 jar 包，项目需要的一些插件或 jar 包，会优先从本地仓库查找。</p>
</li>
<li><p><strong>远程仓库（私服）</strong>：当建立一个 maven 项目的时候，maven 会检查你的 pom.xml 文件，如果发现项目需要的插件或者 jar 包，本地仓库没有，就会默认去远程仓库下载。远程仓库可以在互联网内也可以在局域网内。</p>
</li>
<li><p><strong>中央仓库</strong> ：maven 软件内置的，它是中央仓库，服务于整个互联网，由 Maven 团队自己维护，里面存储了非常全的 jar 包，包含了世界上大部分流行的开源项目构件，具体地址就是下面的中央仓库1和2。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>配置使用阿里云的服务器下载jar包（推荐：阿里云镜像源）</strong></p>
<ul>
<li><p>打开 <code>/usr/local/apache-maven-3.6.2/conf/settings.xml</code> 这个文件，进行如下配置：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- mirror
     | Specifies a repository mirror site to use instead of a given repository. The repository that
     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used
     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.
     |
    &lt;mirror>
      &lt;id>mirrorId&lt;/id>
      &lt;mirrorOf>repositoryId&lt;/mirrorOf>
      &lt;name>Human Readable Name for this Mirror.&lt;/name>
      &lt;url>http://my.repository.com/repo/path&lt;/url>
    &lt;/mirror>
     --></span>
      <span class="token comment" spellcheck="true">&lt;!--阿里云仓库（中央）--></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!--阿里云仓库--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!--中央仓库1--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Maven Repository Switchboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!--中央仓库2--></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>repo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo2.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ibiblio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jboss-public-repository-group<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>JBoss Public Repository Group<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repository.jboss.org/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>google-maven-central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Google Maven Central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven-central.storage.googleapis.com
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 中央仓库在中国的镜像 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven.net.cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>oneof the central mirrors in china<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.net.cn/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><p><strong>告诉 Maven 使用 jdk1.8</strong>  ： </p>
<ul>
<li><p>打开 <code>/usr/local/apache-maven-3.6.2/conf/settings.xml</code> 这个文件，在 <code>&lt;profiles&gt;&lt;/profiles&gt;</code> 标签内添加如下内容：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 告诉 Maven 用 jdk1.8 来编译和运行项目 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>这里配置的jdk的版本要和自己电脑上安装的jdk的版本一致，因为这里指定了编译时jdk的版本，也就是说会使用我们这里指定的jdk的版本生成.class文件，但由于运行时是使用的我们配置在环境变量中的jdk，所以如果两者不一致，可能就会出问题。</p>
<p>例如，要使用jdk11，只需将1.8全部改为11即可。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="在IDE中配置Maven"><a href="#在IDE中配置Maven" class="headerlink" title="在IDE中配置Maven"></a>在IDE中配置Maven</h2><ul>
<li><p><strong>Eclipse</strong> ：</p>
<pre class=" language-bash"><code class="language-bash">如果不配置，则 eclipse 默认使用内置的 maven。修改位置：
Preferences -<span class="token operator">></span> Maven -<span class="token operator">></span> Installations 和 User Settings。
---Installations: Add -<span class="token operator">></span> Installation home 勾选已安装的 maven 路径 <span class="token string">"/usr/local/apache-maven-3.6.3"</span>，然后 Installation name 默认填充为 <span class="token string">"apache-maven-3.6.3"</span> --<span class="token operator">></span> 取消默认内置EMBEDDED，勾选 <span class="token string">"apache-maven-3.6.3"</span>
---User Settings: 配置 User Settings<span class="token punctuation">(</span>open file<span class="token punctuation">)</span> -<span class="token operator">></span> 勾选已安装 maven 下的 conf 配置 <span class="token string">"/usr/local/apache-maven-3.6.3/conf/settings.xml"</span> -<span class="token operator">></span> Local Repository<span class="token punctuation">(</span>From merged user and global settings<span class="token punctuation">)</span> 自动填充为 maven 下的 repository <span class="token string">"/usr/local/apache-maven-3.6.3/repository"</span>

即修改前默认的为我们安装指定的maven目录配置：
/Users/hsong/.m2/settings.xml --<span class="token operator">></span> /usr/local/apache-maven-3.6.3/conf/settings.xml
/Users/hsong/.m2/repository --<span class="token operator">></span> /usr/local/apache-maven-3.6.3/repository
</code></pre>
</li>
<li><p><strong>IDEA</strong>：</p>
<pre class=" language-bash"><code class="language-bash">如果不配置，则 idea 默认会使用其自带的 maven。修改位置：
Preferences -<span class="token operator">></span> Build,Execution,Deployment -<span class="token operator">></span> Build Tools -<span class="token operator">></span> Maven -<span class="token operator">></span> Maven home directory
</code></pre>
</li>
</ul>
<h2 id="安装参考"><a href="#安装参考" class="headerlink" title="安装参考"></a>安装参考</h2><ul>
<li><a href="https://www.cnblogs.com/bubbleStar/p/6217284.html">Mac 下 java 环境 maven 环境配置</a></li>
<li><a href="https://blog.csdn.net/WinstonLau/article/details/95605557">Mac系统下载、安装和配置Maven环境</a></li>
</ul>
<hr>
<h1 id="三、目录结构"><a href="#三、目录结构" class="headerlink" title="三、目录结构"></a>三、目录结构</h1><pre class=" language-text"><code class="language-text">Spring_Boot_Project:
    ├────── resouces
    │                ├── static：静态资源（js、css、图片、音频、视频等）
    │                ├── templates：模板文件（模版引擎freemaker、thymeleaf;注：该模板引擎默认不支持jsp，若需要则单独配置。
    │                └── application.properties：配置文件（例如：修改port）
    │
    └── ...
</code></pre>
<h1 id="四、Spring-Boot-好处"><a href="#四、Spring-Boot-好处" class="headerlink" title="四、Spring Boot 好处"></a>四、Spring Boot 好处</h1><ul>
<li>内置了tomcat，且不需要打成war再执行。</li>
<li>pop.xml：把一个web项目，打成jar包，与以前的不一样。</li>
<li>将各个应用/三方框架设置成一个个“场景”（stater），以后需要用哪个，只需引入相对应场景即可。选完后，Spring Boot就会将该场景所需的所有依赖自动注入（即：不需要我们手动考虑依赖版本等）。例如：“web”，Spring Boot就会将web相关的依赖（tomcat/json/jdbc/…）</li>
</ul>
<h1 id="五、-EnableAutoConfiguration源码分析"><a href="#五、-EnableAutoConfiguration源码分析" class="headerlink" title="五、@EnableAutoConfiguration源码分析"></a>五、<code>@EnableAutoConfiguration</code>源码分析</h1><p><code>@SpringBootApplication</code> ：主配置类，即main入口。结构如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>注解包含：
    ├────── <span class="token annotation punctuation">@SpringBootConfiguration</span>
    │               └── <span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//表示“配置类(yml)”</span>
    └────── <span class="token annotation punctuation">@EnableAutoConfiguration</span>
                      ├── <span class="token annotation punctuation">@AutoConfigurationPackage</span> <span class="token comment" spellcheck="true">//相当于包扫描器</span>
                      └── <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//选择性引入</span>
</code></pre>
<p><strong>具体注解说明：</strong></p>
<ul>
<li>@Configuration：<ol>
<li>用此注解，则表示该类变成一个配置类。如：@Configuration public class A {}  //表示A类用于配置作用。</li>
<li>加 <code>@Configuration</code> 注解的类，会自动纳入Spring容器（@Component）。即将此类加入 Spring IOC 里面，供后续Spring扫描到。</li>
</ol>
</li>
<li>@EnableAutoConfiguration ：使 Spring Boot 可以自动配置功能。<ol>
<li>该注解可以找到 <code>@SpringBootApplication</code> 所在类的包，作用：就会将该包及所有子包全部纳入spring容器（即自己写的）。</li>
<li>sb启动时，会根据 <code>spring-boot-autoconfigure-2.0.3.RELEASE.jar/META-INF/spring.factories</code> 找到相应第三方依赖并将依赖引入（即第三方依赖[jar/config/…]等）。</li>
</ol>
</li>
<li>@Import(AutoConfigurationImportSelector.class)：选择性引入。（如：用 <code>AutoConfigurationImportSelecto$selectImports(xxx)</code> 引入三方依赖[jar/配置/…]等）</li>
</ul>
<p><strong>总结：</strong><br>编写项目时，一般会对 “自己写的代码” 以及 “三方依赖” 进行配置。但 <code>Spring Boot</code> 可以自动进行配置：</p>
<ol>
<li>自己写的代码，sb通过 <code>SpringBootConfigruation</code> 自动帮我们配置。</li>
<li>三方依赖，sb通过 <code>spring-boot-autoconfigure-2.0.3.RELEASE.jar/META-INF/spring.factories</code> 进行声明，然后通过 <code>@EnableAutoConfiguration</code> 开启即可。<code>spring-boot-autoconfigure-2.0.3.RELEASE.jar</code> 中包含了 <strong>J2EE整合体系中</strong> 需要的依赖。</li>
</ol>
<h1 id="六、自动装配原理"><a href="#六、自动装配原理" class="headerlink" title="六、自动装配原理"></a>六、自动装配原理</h1><p><u><em><strong>问题：如何自动装配呢？</strong></em></u></p>
<p>以 <code>spring.factories$org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</code> 为例，源码大概为：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/************************************************************************
 * org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration
 ************************************************************************/</span>
<span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//配置</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HttpEncodingProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//允许改配置属性（此类可修改编码）</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> ConditionalOnWebApplication<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//系统中是否存在指定的类（此类需要CharacterEncodingFilter）</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefx <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//系统中指定的属性是否有指定的值</span>
<span class="token comment" spellcheck="true">// 说明：当 @ConditionalOn{具体属性满足要求} 则条件成立时，才执行当前类，即当前配置才生效！</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//当前条件成立后，将此body代码传入SpringIOC容器的@Bean，即将该段代码功能加入到项目中去。</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> filter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/************************************************************************
 * org.springframework.boot.autoconfigure.http.HttpEncodingProperties
 ************************************************************************/</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefx <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//注此prefix可alias为当前类，在application.properties/yml中可自由配置。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingProperties</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET <span class="token operator">=</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>
      <span class="token keyword">private</span> Charset charset <span class="token operator">=</span> DEFAULT_CHARSET<span class="token punctuation">;</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>通过源码研究，<strong>得知</strong>：</p>
<ul>
<li><p><code>@Configuration</code> ：标识此为配置类，并将此类纳入 <code>Spring IOC容器</code> 。</p>
</li>
<li><p><code>@EnableConfigurationProperties(HttpEncodingProperties.class)</code> ：通过 <code>HttpEncodingProperties.class</code> 将编码设置为了 UTF_8 （注：研究如何自动装配为UTF_8，如何修改编码为GBK呢？）</p>
</li>
<li><p><code>@ConditionalOnProperty(prefx = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</code> ：当属性满足要求时，则条件成立。解释为：要求 <code>spring.http.encoding.enabled=true</code>或未显式配置(<code>matchIfMissing = true，即enabled默认true</code>)，该条件就成立了。</p>
</li>
<li><p>如何修改编码（例ISO-8859-1）？解决：通过改 <code>HttpEncodingProperties的</code>prefix+属性名 ，在 <code>配置文件.properties/yml</code> 中修改如：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 方式一：application.properties</span>
spring.http.encoding.charset<span class="token operator">=</span>ISO-8859-1

<span class="token comment" spellcheck="true"># 方式一：application.yml</span>
spring:
    http:
        encoding:
            charset: ISO-8859-1
</code></pre>
</li>
<li><p>如何知道 <code>spring boot</code> 开启了哪些自动装配、禁止了哪些自动装配？解决：在 <code>配置application.properties/yml</code> 中加 <code>debug=true</code> 。（Positive matches：自动开启的装配 Negative matches：未自动开启的装配）</p>
</li>
</ul>
<p><strong>自动装配总结：</strong></p>
<ul>
<li>每一个 <code>XxxAutoConfiguration</code> 都有很多 <code>@ConditionalOnXxx</code> ，当这此条件都满足时，则此配置自动装配生效（如UTF_8）。总之，<code>Spring Boot</code> 就是通过 <code>XxxAutoConfiguration</code> 实现自动装配（相比传统SpringMVC: 需要配置web.xml和springmvc.xml等，比较复杂）。而且我们可以灵活地手工修改默认的自动装配（即修改自动装配默认值）：<code>XxxProperties.java 文件中的 prefix.属性名=value</code>。</li>
<li>全局配置文件中的key，来自于 <code>XxxProperties.java$prefix.属性名=value</code>。</li>
</ul>
<p><strong>@Conditional扩展注解：</strong></p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定的条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnOnBean</td>
<td>容器中存在指定的Bean</td>
</tr>
<tr>
<td>@ConditionalOnOnMissingBean</td>
<td>容器中不存在指定的Bean</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者此Bean是首先Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebAppliation</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<h1 id="七、配置文件及yml（代码示例）"><a href="#七、配置文件及yml（代码示例）" class="headerlink" title="七、配置文件及yml（代码示例）"></a>七、配置文件及yml（代码示例）</h1><p>作用：<code>Spring Boot</code> 可以使用配置文件修改默认的配置。</p>
<p>yml: YAML Ain’t a Markup Language，不是一个标记文档。</p>
<p><strong><code>Spring Boot</code> 默认(识别)三种格式全局配置文件</strong>：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--详见：spring-boot-starter-parent$build/resouce--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>${basedir}/src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/application*.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/application*.yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/application*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>${basedir}/src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>**/application*.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>**/application*.yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>**/application*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
</code></pre>
<p>application.properties：k=v。</p>
<p>==由上可知，<code>Spring Boot</code> 读取配置的顺序为 <code>yml &gt; yaml &gt; properties</code> ，所以 <code>.properties</code> 的配置会覆盖前面所有的。==</p>
<p><strong>yml注意：</strong></p>
<ul>
<li>k:空格v 或行内写法（对象/map：{k: v,…}、数组：[e1, e2, …]）</li>
<li>通过垂直左对齐，指定层级关系（缩进仅允许空格，具体数目不重要，只要同层级左对齐即可）</li>
<li>默认可不写引号：双引号””会将内容中转义字符转义，其他（单’’或无引号）不会。</li>
</ul>
<p>yml示例：</p>
<pre class=" language-yml"><code class="language-yml"># 一、对象/map（行内+层级）
obj:
    obj_prop1: obj_v1
    obj_prop2: obj_v2
    map_k1: map_v1
    map_k2: map_v2
obj: {obj_prop1: obj_v1, obj_prop2: obj_v2, map_k1: map_v1, map_k2: map_v2}

# 二、数组/集合（行内+层级）
age:
    - 21
    - 22
    - 23
age: [21,22,23]

province:
    - name: 贵州省
      id: 0851
      region: 西南地区
    - name: 北京市
      id: 110
      region: 华北地区
provice: [{name: 贵州省, id: 0851, region: 西南地区}, {name: 北京市, id: 110, region: 华北地区}]
</code></pre>
<p><strong>JavaBean&lt;—&gt;配置.yml：</strong></p>
<p>可以把一个JavaBean 通过配置类形式来作为配置，具体步骤：</p>
<blockquote>
<ol>
<li>绑定。创建JavaBean(必须setter/getter)，并用 <code>@ConfigurationProperties(prefix = &quot;前缀名&quot;)</code> 和 <code>@Component</code> 注解绑定（将此类放入Spring容器）。也可以用 <code>@Value(&quot;注入数据&quot;)</code> ，或者二者混合使用，互补。</li>
<li>但是优先级为：<code>@ConfigurationProperties(prefix = &quot;xxx&quot;)--&gt;.yml/.properties &gt; @Value(&quot;xxx&quot;)</code> 。并且前者批量注入，后者单个依次注入。</li>
<li>注入。application.yml/properties中进行配置（或同时使用.yml/.properties互补）。</li>
<li>使用：在具体引入JavaBean的声明上，注解 <code>@Autowired</code> 。</li>
</ol>
</blockquote>
<p>实例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 第1步，创建JavaBean(可复合对象)，并声明类注解。</span>
<span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//将此JavaBean放入Spring容器</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"province"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//@PropertySource(value = {"classpath:applicationb.properties"}) //自定义名字的配置，只能为*.properties或*.xml</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Province</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"优先级最低，若yml/properties都未配置，则使用该注解的值：贵州省"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${random.value}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//例如：默认使用随机占位符。亦可在yml/properties中使用例如 ${random.value} 的占位符表达式。</span>
    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${global.region}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//例如：$即用SpEL引用yml/properties中的global.region</span>
    <span class="token keyword">private</span> String region<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Date date<span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>City<span class="token operator">></span> cities<span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"错误提示：邮箱格式错误"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> String <span class="token function">getRegion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> region<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRegion</span><span class="token punctuation">(</span>String region<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>region <span class="token operator">=</span> region<span class="token punctuation">;</span>    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Date <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>City<span class="token operator">></span> <span class="token function">getCities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCities</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>City<span class="token operator">></span> cities<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cities <span class="token operator">=</span> cities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Province [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", region="</span> <span class="token operator">+</span> region <span class="token operator">+</span> <span class="token string">", date="</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">", cities="</span> <span class="token operator">+</span> cities <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"city"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> String cName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getcName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setcName</span><span class="token punctuation">(</span>String cName<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cName <span class="token operator">=</span> cName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"City [cName="</span> <span class="token operator">+</span> cName <span class="token operator">+</span> <span class="token string">", id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-yml"><code class="language-yml"># 第2步，配置 {Your_SpringBoot_Project}/src/main/resources/application.yml
# 自定义注解类
province:
  #name: 北京市
  id: 110
  #region: 华北地区
  date: 2020/05/22 20:44:32
  email: testa@123.com #若用如“xxx”，则运行时错误报注解时的message错误，如："错误提示：邮箱格式错误"
  #cities: [{name: 海淀区, id: 1}, {name: 朝阳, id: 2}, {name: 更多, id: 3}]
  cities:
    - {cName: 海淀区, id: 1}
    - {cname: 朝阳区, id: 2}
    - {c-Name: 东城区, id: 3}
    - {c-name: 西城区, id: 4}

# {Your_SpringBoot_Project}/src/main/resources/application.properties
## 例如，设置一个全局的region属性，供测试@Value+SpEL引用
global.region=Chinese South-West Area
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 3. 测试验证。例如：</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">SpringTestApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    Province mProvince<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试Province："</span> <span class="token operator">+</span> mProvince<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// run输出：</span>
<span class="token comment" spellcheck="true">// 测试Province：Province [name=北京市, id=110, region=华北地区, date=Fri May 22 20:44:32 CST 2020, cities=[City [name=海淀区, id=1], City [name=朝阳, id=2], City [name=更多, id=3]]]</span>
</code></pre>
<hr>
<h1 id="八、-ImportResource-、配置类、占位符表达式"><a href="#八、-ImportResource-、配置类、占位符表达式" class="headerlink" title="八、@ImportResource 、配置类、占位符表达式"></a>八、<code>@ImportResource</code> 、配置类、占位符表达式</h1><p><u><em><strong>问题：若自己写 spring 等配置文件，<code>Spring Boot</code> 能否识别？</strong></em></u><br>答案：默认不能自动识别。若强制需要，需要 <code>Spring Boot</code> 主配置类上，用 <code>@ImportResource</code> 指定配置文件的路径（但是，不推荐手写 spring 配置文件用此方式）。</p>
<blockquote>
<p>一般配置方式：</p>
<ol>
<li>xml配置文件 (<code>bean_config.xml</code> 不推荐)</li>
<li>通过注解配置（<code>Spring Boot</code> 首先推荐！）</li>
</ol>
</blockquote>
<ol>
<li><p><code>@ImportResource</code> xml配置（不推荐）：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主配置类</span>
<span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:custom_spring.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTestApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringTestApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 手写配置，如：custom_spring.xml</span>
<span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span>beans <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"beanId_testService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.hsong.test.service.TestService"</span><span class="token operator">></span>
         <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"beanProp_testDao"</span> ref<span class="token operator">=</span><span class="token string">"testDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"testDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.hsong.test.service.TestDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span>
     
<span class="token comment" spellcheck="true">// 示例bean: TestService</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>
     TestDao beanPro_testDao<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 验证测试</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">SpringTestApplicationTests</span> <span class="token punctuation">{</span>
   
     <span class="token annotation punctuation">@Autowired</span>
     ApplicationContext mContext<span class="token punctuation">;</span>

   <span class="token annotation punctuation">@Test</span>
   <span class="token keyword">void</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         TestService testService <span class="token operator">=</span> <span class="token punctuation">(</span>TestService<span class="token punctuation">)</span> mContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"beanId_testService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试Bean配置："</span> <span class="token operator">+</span> testService<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li><p>注解配置方式（<code>Spring Boot</code> 推荐）：</p>
<blockquote>
<p>步骤：写类 —&gt; @Configuration、@Bean</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hsong<span class="token punctuation">.</span>test<span class="token punctuation">.</span>config<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//例如，建立一个包为config</span>
<span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//注解为配置类而非普通java类（即：等价于custom_spring.xml）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//对应:xml中&lt;beans>中的其中一个&lt;bean></span>
      <span class="token keyword">public</span> TestService beanId_testService<span class="token comment" spellcheck="true">/*对应BeanID:&lt;bean id="beanId_testService" ..>*/</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          TestService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          TestDao testDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          service<span class="token punctuation">.</span><span class="token function">setTestDao</span><span class="token punctuation">(</span>testDao<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应:&lt;property name="beanProp_testDao" ref="testDao"></span>
          <span class="token keyword">return</span> service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应BeanClass:&lt;bean class="com.hsong.test.service.TestService" ..></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li><p><code>Spring Boot</code> 全局配置中的“占位符表达式”</p>
<table>
<thead>
<tr>
<th>随机占位符表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>${random.uuid}</td>
<td>UUID</td>
</tr>
<tr>
<td>${random.value}</td>
<td>随机字符串</td>
</tr>
<tr>
<td>${random.int}</td>
<td>随机整型数</td>
</tr>
<tr>
<td>${random.long}</td>
<td>随机长整型数</td>
</tr>
<tr>
<td>${random.int(10)}</td>
<td>10以内随机整型数</td>
</tr>
<tr>
<td>${random.int(1,100)}</td>
<td>指定范围内随机整型数</td>
</tr>
</tbody></table>
<p>当然，还可以在 .yml 中定义变量，在 .properties 中引用变量。如：</p>
<pre class=" language-yml"><code class="language-yml"># .yml
province:
    name: 北京市
    GDP: 100W

# .properties
beijing_GDP=${province.GDP}
</code></pre>
</li>
</ol>
<h1 id="九、多环境设置与切换-profile"><a href="#九、多环境设置与切换-profile" class="headerlink" title="九、多环境设置与切换(profile)"></a>九、多环境设置与切换(profile)</h1><p>默认情况下，<code>Spring Boot</code> 会读取主 <code>application.properties/yml</code> 环境配置。若有多个环境（开发、测试、生产），需要如何设置切换呢？</p>
<p><em><strong>一、多环境切换步骤：</strong></em></p>
<ol>
<li><p>设置：务必严格遵循命名 <code>application-环境名.properties/yml</code> 。例如，application-dev.properties、 application-test.properties……</p>
</li>
<li><p>切换：在主配置 <code>application.properties/yml</code> 中配置 <code>profile</code> 指定 ：</p>
<ul>
<li>.properties 方式</li>
</ul>
<pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># application.properties 主配置文件</span>
<span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">环境名    #例如"application-dev.properties"，就写 dev 。</span>
</code></pre>
<ul>
<li>.yml 方式</li>
</ul>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># application.yml 主配置文件</span>
<span class="token comment" spellcheck="true">##说明：用 "---" 分隔不同的环境区域 --> 具体环境配置 spring.profiles: 环境名 --> 主配置区域 spring.profiles.active: 环境名</span>
<span class="token comment" spellcheck="true">###第1环境（主环境）</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
        <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true">#例如：切换开发dev环境</span>
<span class="token punctuation">---</span>
<span class="token comment" spellcheck="true">###第2环境（dev）</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev
<span class="token punctuation">---</span>
<span class="token comment" spellcheck="true">###第3环境（test）</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test
</code></pre>
</li>
</ol>
<p> <em><strong>二、动态切换环境：</strong></em></p>
<ol>
<li>通过 <em><strong>运行</strong></em> 参数指定：</li>
</ol>
<ul>
<li><p>[STS/Eclipse] ：通过IDE填充运行参数。</p>
<pre class=" language-bash"><code class="language-bash">Spring Boot 项目 --<span class="token operator">></span> 右键 Run As --<span class="token operator">></span> Run Configurations --<span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">)</span>Arguments --<span class="token operator">></span> Program arguments 区域加入: --spring.profiles.active<span class="token operator">=</span>环境名
//注意：--spring有2个<span class="token string">"-"</span>。
</code></pre>
</li>
<li><p>命令行：打成jar包（maven一般打成jar包，哪怕是web项目，不怎么用war包了）</p>
<pre class=" language-bash"><code class="language-bash">Spring Boot 项目 --<span class="token operator">></span> 右键 Run As --<span class="token operator">></span> Maven build<span class="token punctuation">..</span>. --<span class="token operator">></span> Main Goals<span class="token punctuation">(</span>输入-表示<span class="token punctuation">[</span>先clean，可选择<span class="token punctuation">]</span>打包:<span class="token punctuation">[</span>clean<span class="token punctuation">]</span> package<span class="token punctuation">)</span> --<span class="token operator">></span> <span class="token punctuation">{</span>SpringBootProject<span class="token punctuation">}</span>/target/打包项目名.jar --<span class="token operator">></span> 终端: java -jar 打包项目名.jar --spring-profiles.active<span class="token operator">=</span>环境名
</code></pre>
</li>
</ul>
<ol start="2">
<li><p>通过 <em><strong>JVM</strong></em> 参数指定：</p>
<ul>
<li><p>[STS/Eclipse] ：通过IDE填充运行参数。</p>
<pre class=" language-bash"><code class="language-bash">Spring Boot 项目 --<span class="token operator">></span> 右键 Run As --<span class="token operator">></span>  Run Configurations --<span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">)</span>Arguments --<span class="token operator">></span> VM arguments 区域加入: -Dspring.profiles.active<span class="token operator">=</span>环境名
//注意：-Dspring有1个<span class="token string">"-"</span>且加上<span class="token string">"D"</span>
</code></pre>
</li>
</ul>
</li>
</ol>
<h1 id="十、配置文件位置"><a href="#十、配置文件位置" class="headerlink" title="十、配置文件位置"></a>十、配置文件位置</h1><p><strong>1. 须知：</strong></p>
<ul>
<li><code>.yml/properties</code> 中的配置，相互补充；如果冲突，则 <code>.properties</code> 优先级高。</li>
<li><code>Spring Boot</code> 默认能读取 <code>application.yml/properties</code> 。</li>
<li>类路径：Eclipse中文件夹图标右上角带“田字型”的文件夹表示路径，<strong>即程序能直接识别的路径</strong>，又即构建路径。如：<code>./src/main/java, ./src/main/resources</code></li>
</ul>
<p><strong>2. 最终总结</strong>： <code>application.yml/properties</code> 这2个文件可存在于如下4个地方：</p>
<table>
<thead>
<tr>
<th align="left">存放路径类型</th>
<th align="left">具体可存放路径</th>
<th>备注说明（application.yml/properties可允许于哪里）</th>
<th>优先级</th>
</tr>
</thead>
<tbody><tr>
<td align="left">file</td>
<td align="left">项目根目录/config</td>
<td>即，项目根目录下的config目录</td>
<td>最高</td>
</tr>
<tr>
<td align="left">file</td>
<td align="left">项目根目录</td>
<td>即，项目根目录下可</td>
<td>其次</td>
</tr>
<tr>
<td align="left">classpath</td>
<td align="left">项目根目录/classpath/config</td>
<td>即，项目根目录下的类路径(构建路径)的根目录下的config目录</td>
<td>再其次</td>
</tr>
<tr>
<td align="left">classpath</td>
<td align="left">项目根目录/classpath/</td>
<td>即，项目根目录下的类路径(构建路径)的根目录下。</td>
<td>最后</td>
</tr>
</tbody></table>
<blockquote>
<p><em><strong>☞ 注意：</strong></em> ‘./‘ 暂时代表「项目根目录」。例如：<code>application.properties</code> 同时存放于这4个目录下，则：</p>
<ol>
<li>若某项配置文件冲突（即，都同名存在），则优先级从上到下（即按顺序上面的覆盖下面的）。</li>
<li>若不冲突，则互补结合使用（即，可全存在，由上到下互补所缼）。</li>
</ol>
<pre class=" language-bash"><code class="language-bash">简单结构预览图如（以 EclipseIDE 为例）：
└── SpringBootProject
    ├── application.properties                        <span class="token comment" spellcheck="true">#项目根目录</span>
    ├── config
    │   └── application.properties                    <span class="token comment" spellcheck="true">#项目根目录/config</span>
    └── src
        └── main
            └── resources    <span class="token comment" spellcheck="true">#src.main.resource为classpath</span>
                ├── application.properties            <span class="token comment" spellcheck="true">#项目根目录/classpath</span>
                └── config
                    └── application.properties        <span class="token comment" spellcheck="true">#项目根目录/classpath/config</span>
</code></pre>
</blockquote>
<h1 id="十一、项目外部配置文件及加载顺序"><a href="#十一、项目外部配置文件及加载顺序" class="headerlink" title="十一、项目外部配置文件及加载顺序"></a>十一、项目外部配置文件及加载顺序</h1><blockquote>
<p>配置项目名：<code>.properties: server.servlet.context-path=/自定义项目名</code></p>
</blockquote>
<p>外部配置文件，即：定义在项目工程之外的其它地方的配置文件。</p>
<p>作用：可用于补救，新增/更改外部配置并应用以高优先级覆盖项目内配置，无需重新打jar包。例如：打包好的项目.jar –&gt; 把端口 8080 改为 8099</p>
<p><em><strong>如何应用「项目外部配置文件」？</strong></em></p>
<ol>
<li><p>通过 <em><strong>运行</strong></em> 参数指定（若「大量」配置修改，则推荐新增单独外部配置文件方式！）：</p>
<ul>
<li>[STS/Eclipse] ：通过IDE填充运行参数。</li>
</ul>
<pre class=" language-bash"><code class="language-bash">Spring Boot 项目 --<span class="token operator">></span> 右键 Run As --<span class="token operator">></span> Run Configurations --<span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">)</span>Arguments --<span class="token operator">></span> Program arguments 区域加入: --spring.config.location<span class="token operator">=</span>外部配置文件路径 <span class="token punctuation">..</span>.
注：若“同一配置”同时存在于「项目内部配置文件」和「项目外部配置文件」，则优先级为：外部 <span class="token operator">></span> 内部。
</code></pre>
<ul>
<li>命令行：打成jar包</li>
</ul>
<pre class=" language-bash"><code class="language-bash">Spring Boot 项目 --<span class="token operator">></span> 右键 Run As --<span class="token operator">></span> Maven build<span class="token punctuation">..</span>. --<span class="token operator">></span> Main Goals<span class="token punctuation">(</span>输入-表示<span class="token punctuation">[</span>先clean，可选择<span class="token punctuation">]</span>打包:<span class="token punctuation">[</span>clean<span class="token punctuation">]</span> package<span class="token punctuation">)</span> --<span class="token operator">></span> <span class="token punctuation">{</span>SpringBootProject<span class="token punctuation">}</span>/target/打包项目名.jar --<span class="token operator">></span> 终端: java -jar 打包项目名.jar --spring-config.location<span class="token operator">=</span>外部配置文件路径 <span class="token punctuation">..</span>.
</code></pre>
</li>
<li><p>通过 <em><strong>运行</strong></em> 参数指定（若「少量」配置修改，则不必要单独增加外部配置的情况！）：</p>
<ul>
<li><p>[STS/Eclipse] ：通过IDE填充运行参数。</p>
<pre class=" language-bash"><code class="language-bash">Spring Boot 项目 --<span class="token operator">></span> 右键 Run As --<span class="token operator">></span> Run Configurations --<span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">)</span>Arguments --<span class="token operator">></span> Program arguments 区域加入: --server.port<span class="token operator">=</span>8099 --server.servlet.context-path<span class="token operator">=</span>/XXX <span class="token punctuation">..</span>.
 注：多个配置项，以「空格」并行连接。
</code></pre>
</li>
</ul>
</li>
</ol>
<p><strong>总之，</strong> 多个地方配置有冲突（即均同时存在），则优先级为：</p>
<blockquote>
<p>命令行参数（调用外部配置文件 &gt; 运行参数） &gt; 内部文件（properties &gt; yaml）</p>
</blockquote>
<h1 id="十二、Spring-Boot-日志处理"><a href="#十二、Spring-Boot-日志处理" class="headerlink" title="十二、Spring Boot 日志处理"></a>十二、<code>Spring Boot</code> 日志处理</h1><p>常见日志框架：UC，JUL jboss-logging，logback，log4j，slf4j…</p>
<p>官网日志：<a href="https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-logging">https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-logging</a></p>
<p><em><strong>一、基本日志操作：</strong></em></p>
<pre class=" language-bash"><code class="language-bash">1. Spring Boot 默认选用：slf4j，logback。
2. Spring Boot 默认配置好了日志，我们直接使用即可。若要使用其它日志框架，那就得另行配置了。

3. Spring Boot 默认日志level为info（即打印INFO+），可自定义：
语法：loging.level.主配置类所在包<span class="token operator">=</span>trace/info/debug/info/warn/error/fatal/off 
<span class="token comment" spellcheck="true">#例如：logging.level.com.hsong.test.SpringTestApplicationTests = warn</span>

4. 自定义存储日志到文件：
---<span class="token operator">></span> logging.file.name<span class="token operator">=</span>日志文件.后缀名    <span class="token comment" spellcheck="true">#相对路径：默认为“项目根目录”</span>
---<span class="token operator">></span> logging.file.name<span class="token operator">=</span>./log/1/日志文件.后缀名    <span class="token comment" spellcheck="true">#相对路径：存储到“项目根目录/log/1/”目录下</span>
---<span class="token operator">></span> logging.file.name<span class="token operator">=</span>/Users/<span class="token punctuation">{</span>uname<span class="token punctuation">}</span>/Downloads/日志文件.后缀名 <span class="token comment" spellcheck="true">#绝对路径：存储到“～/Downloads/”目录下</span>
---<span class="token operator">></span> logging.file.path<span class="token operator">=</span><span class="token punctuation">[</span>./<span class="token punctuation">]</span>dir<span class="token punctuation">[</span>/dir1/dir2/<span class="token punctuation">..</span>.<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#相对路径：默认创建spring.log并存储到“项目根目录/dir[/dir1/dir2/...]”目录下。其中："[./]"可选，均表示相对当前项目。</span>

5. 默认日志格式，在spring-boot-2.3.0.RELEASE.jar 包中 org.springframework.boot.logging.logback 里xml配置。
</code></pre>
<p><em><strong>一、修改日志格式在console/file：</strong></em></p>
<pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 例如，自定义修改日志显示格式</span>
<span class="token attr-name">custom-output-format</span> <span class="token punctuation">=</span> <span class="token attr-value">%d{yyyy-MM-dd HH:mm:ss:SSS} [%+5level][%thread] &lt;%logger{50}> : %msg%n</span>
<span class="token attr-name">logging.pattern.console</span> <span class="token punctuation">=</span> <span class="token attr-value">${custom-output-format}</span>
<span class="token attr-name">logging.pattern.file</span> <span class="token punctuation">=</span> <span class="token attr-value">${custom-output-format}</span>
<span class="token comment" spellcheck="true">## %d: 日期时间</span>
<span class="token comment" spellcheck="true">## %thread: 线程名</span>
<span class="token comment" spellcheck="true">## %-5level: 显示日志级别，-5表示左对齐且宽度为5，+5表示右对齐且宽度为5</span>
<span class="token comment" spellcheck="true">## %logger{50}: 设置日志类长度，50表示最长显示字符数，超出不显示</span>
<span class="token comment" spellcheck="true">## %msg: 日志消息</span>
<span class="token comment" spellcheck="true">## $n: 回车</span>
</code></pre>
<h1 id="十三、Spring-Boot-处理Web静态资源"><a href="#十三、Spring-Boot-处理Web静态资源" class="headerlink" title="十三、Spring Boot 处理Web静态资源"></a>十三、<code>Spring Boot</code> 处理Web静态资源</h1><p><code>Spring Boot</code> 是一个jar，相比传统方式静态资源不再是有存放到 <code>webapps</code> 中了。</p>
<p><strong>1、静态资源存放路径：</strong><u><em><strong><code>Spring Boot</code> 通过 <code>WebMvcAutoConfiguration.addResourceHandlers()</code> 指定在 <code>/webjars/</code></strong></em></u> 。 </p>
<p><strong>2、如何引入jar中静态资源：</strong> <u><em><strong>从jar包目录结构的 <code>webjars</code> 开始写，如：<a href="http://localhost:8080/webjars/jquery/3.3.1-1/juqery.js">http://localhost:8080/webjars/jquery/3.3.1-1/juqery.js</a></strong></em></u> 。</p>
<p><strong>3、如何自定义静态资源并放入 <code>Spring Boot</code> 中？</strong> (声明：自己写的，不推荐 静态资源-&gt;jar 这种方式！)</p>
<blockquote>
<p>推荐方式：遵循 <code>Spring Boot</code> 的约定。<code>Spring Boot</code> 将某些目录结构设置成静态资源存放目录，开发者按照其规定放入该些目录即可。</p>
<ul>
<li><p>静态资源目录：</p>
<blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//源码：org.springframework.boot.autoconfigure.web.ResourceProperties.class</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span> 
    <span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span> 
      <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span> 
      <span class="token string">"classpath:/public/"</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</blockquote>
</li>
<li><p>静态资源目录 - 优先级：</p>
<table>
<thead>
<tr>
<th>静态资源目录</th>
<th>优先级（值越大优先级越高）</th>
</tr>
</thead>
<tbody><tr>
<td><code>classpath:/META-INF/resources/</code></td>
<td>4（最高）</td>
</tr>
<tr>
<td><code>classpath:/resources/</code></td>
<td>3（其次）</td>
</tr>
<tr>
<td><code>classpath:/static/</code></td>
<td>2（再其次）</td>
</tr>
<tr>
<td><code>classpath:/public/</code></td>
<td>1（最低）</td>
</tr>
</tbody></table>
</li>
</ul>
</blockquote>
<h1 id="十四、WebMvcAutoConfiguration-源码解读"><a href="#十四、WebMvcAutoConfiguration-源码解读" class="headerlink" title="十四、WebMvcAutoConfiguration 源码解读"></a>十四、<code>WebMvcAutoConfiguration</code> 源码解读</h1><p><strong>1、设置欢迎页：</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 源码详述如何一层层设置对欢迎页的？</span>
.org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.class
    └─ EnableWebMvcConfiguration <span class="token comment" spellcheck="true">#inner_class</span>
            └─ welcomePageHandlerMapping<span class="token punctuation">(</span><span class="token punctuation">)</span> -<span class="token operator">></span> getWelcomePage<span class="token punctuation">(</span><span class="token punctuation">)</span> -<span class="token operator">></span> getIndexHtml<span class="token punctuation">(</span><span class="token punctuation">)</span>:location+index.html
<span class="token comment" spellcheck="true"># 欢迎页定义：即任意一个静态资源目录中的 index.html 就是欢迎页。</span>
private Resource getIndexHtml<span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> this.resourceLoader.getResource<span class="token punctuation">(</span>location + <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

设置欢迎页：将 spring boot 约定名 “index.html” 放入任意静态资源目录下即可。
</code></pre>
<p><strong>2、设置<code>favicon.ico</code>：</strong></p>
<pre class=" language-text"><code class="language-text">1. 扩展：如何下载某网站 favicon.ico？网站/favicon.ico。例如：https://docs.spring.io/favicon.ico
2. 设置favicon：将 spring boot 约定名 “favicon.ico” 放到任意静态资源目录下即可。
</code></pre>
<p><strong>3、更改<code>spring boot</code>默认的静态资源路径：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查看源码：org.springframework.boot.autoconfigure.web.ResourceProperties.class</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.resources"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceProperties</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/public/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Locations of static resources. Defaults to classpath:[/META-INF/resources/, /resources/, /static/, /public/].
     */</span>
    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations <span class="token operator">=</span> CLASSPATH_RESOURCE_LOCATIONS<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>​    由上可知，我们也可以自定义静态资源，例如：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># application.properties</span>
<span class="token comment" spellcheck="true">## static-locations与staticLocations一样，松散语法。</span>
<span class="token comment" spellcheck="true">## 注：会覆盖默认的4个静态资源目录！</span>
<span class="token attr-name">spring.resources.static-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/res/    #自定义res资源目录</span>
<span class="token attr-name">spring.resources.static-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/res/, classpath:/img/,... #自定义res、img……资源目录</span>
</code></pre>
<h1 id="十五、引入模板引擎thymeleaf"><a href="#十五、引入模板引擎thymeleaf" class="headerlink" title="十五、引入模板引擎thymeleaf"></a>十五、引入模板引擎<code>thymeleaf</code></h1><p><code>Spring Boot</code> 默认不支持动态资源，如：JSP等。但是，框架推荐：模板引擎 thymeleaf。</p>
<blockquote>
<p><strong>模板引擎概念</strong>：本质是把“模板”和“数据”分离设计，通过它作为中间件来融合二者形成具体期望的页面产物。即：网页 = 模板 + 数据。</p>
<p><strong>Thymeleaf官网</strong>：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p>
</blockquote>
<h2 id="Thymeleaft-初识"><a href="#Thymeleaft-初识" class="headerlink" title="Thymeleaft 初识"></a><code>Thymeleaft</code> 初识</h2><p><strong>一、如何使用 <code>thymeleaf</code></strong> ？（*Tips:从自动装配原理出发，研究 自动装配的包<code>spring-boot-autoconfigure-2.3.0.RELEASE.jar</code> 里是否有<code>ThymeleafAutoConfiguration/ThymeleafProperties</code>?*）</p>
<p>经查看，核心源码为：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties.class</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING <span class="token operator">=</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Whether to check that the template exists before rendering it.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkTemplate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Whether to check that the templates location exists.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkTemplateLocation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Prefix that gets prepended to view names when building a URL.
     */</span>
    <span class="token keyword">private</span> String prefix <span class="token operator">=</span> DEFAULT_PREFIX<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Suffix that gets appended to view names when building a URL.
     */</span>
    <span class="token keyword">private</span> String suffix <span class="token operator">=</span> DEFAULT_SUFFIX<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum.
     */</span>
    <span class="token keyword">private</span> String mode <span class="token operator">=</span> <span class="token string">"HTML"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Template files encoding.
     */</span>
    <span class="token keyword">private</span> Charset encoding <span class="token operator">=</span> DEFAULT_ENCODING<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Whether to enable template caching.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> cache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Order of the template resolver in the chain. By default, the template resolver is
     * first in the chain. Order start at 1 and should only be set if you have defined
     * additional "TemplateResolver" beans.
     */</span>
    <span class="token keyword">private</span> Integer templateResolverOrder<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Comma-separated list of view names (patterns allowed) that can be resolved.
     */</span>
    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> viewNames<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Comma-separated list of view names (patterns allowed) that should be excluded from
     * resolution.
     */</span>
    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> excludedViewNames<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Enable the SpringEL compiler in SpringEL expressions.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> enableSpringElCompiler<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Whether hidden form inputs acting as markers for checkboxes should be rendered
     * before the checkbox element itself.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> renderHiddenMarkersBeforeCheckboxes <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Whether to enable Thymeleaf view resolution for Web frameworks.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>使用 <code>Thymeleaf</code> 步骤：</strong></p>
<blockquote>
<ol>
<li><p>引入 dependency。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--{项目根目录/pom.xml}：添加如下（以2.3.0为例）或者通过IDE添加（Eclipse:） "⌥ + /" -> Edit Starts... 进去搜索然后勾选应用即可自动添加该dependency。 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!--编译下载成功后，会有如下jar：--></span>
spring-boot-starter-thymeleaf-2.3.0.RELEASE.jar
thymeleaf-spring5-3.0.11.RELEASE.jar
thymeleaf-3.0.11.RELEASE.jar
</code></pre>
</li>
<li><p>创建模板文件。</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">-</span> 默认只需将默认后缀格式 <span class="token punctuation">.</span>html  模板放入 默认模板类路径下 classpath<span class="token operator">:</span><span class="token operator">/</span>templates<span class="token operator">/</span> 即可。
<span class="token operator">-</span> 亦可自定义修改默认，具体参考 prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span>。
例如：
<span class="token comment" spellcheck="true">// Controller配置类</span>
<span class="token annotation punctuation">@Controller</span> <span class="token comment" spellcheck="true">//注意：使用@Controller才能用模板！</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1Contoller</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/welcome"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">welcome</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data_1"</span><span class="token punctuation">,</span> <span class="token string">"data 1 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给request域中传值</span>
      <span class="token keyword">return</span> <span class="token string">"tmpl"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// classpath:/templates/tmpl.html</span>
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>
<span class="token operator">&lt;</span>html xmlns<span class="token operator">:</span>th<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>head<span class="token operator">></span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>title<span class="token operator">></span>Insert title here<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
  <span class="token operator">&lt;</span>body<span class="token operator">></span>
    <span class="token operator">&lt;</span>p th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"${data_1}"</span><span class="token operator">></span>Welcome to Thymeleaf<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>
      
<span class="token comment" spellcheck="true">// 访问测试：http://localhost:8080/test1/welcome</span>
</code></pre>
</li>
</ol>
</blockquote>
<p><a href="https://www.cnblogs.com/lannoy/p/5976402.html"><strong><code>@restcontroller</code>与<code>@controller</code>的区别：</strong></a></p>
<pre class=" language-bash"><code class="language-bash">@Controller：修饰class，用来创建处理http请求的对象
@RestController：Spring4之后加入的注解，原来在@Controller中返回json需要@ResponseBody来配合，如果直接用@RestController替代@Controller就不需要再配置@ResponseBody，默认返回json格式。
------------------------------------------------------------------------------------------
1. 如果只是使用 @RestController 注解 Controller，则 Controller 中的方法无法返回jsp页面，配置的视图解析器InternalResourceViewResolver 不起作用，返回的内容就是Return 里的内容。
例如：本来应该到success.jsp页面的，则其显示success.
2. 如果需要返回到指定页面，则需要用 @Controller 配合视图解析器 InternalResourceViewResolver 才行。
3. 如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上 @ResponseBody 注解。
</code></pre>
<h2 id="Thymeleaf-入门使用"><a href="#Thymeleaf-入门使用" class="headerlink" title="Thymeleaf 入门使用"></a><code>Thymeleaf</code> 入门使用</h2><p><code>&lt;p th:text=&quot;$&#123;data_1&#125;&quot;&gt;Welcome to Thymeleaf!&lt;/p&gt;</code>表示从 <code>$&#123;data_1&#125;</code> 中取值，取到则替换原有的html值。</p>
<blockquote>
<p>格式：<code>th:html的属性名=值</code> 。例如：<code>th:id=&quot;xx&quot; th:class=&quot;yyy&quot;</code></p>
<p>更多属性：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence</a></p>
</blockquote>
<p>例如：th:text/th:utext    获取文本（不转义，即标签原样输出不渲染，u:unescaped）</p>
<ul>
<li><p>更多取值表达式，除 <code>$&#123;&#125;</code> 外等：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax</a></p>
<pre class=" language-text"><code class="language-text">${...} : Variable expressions.                        #EL表达式
*{...} : Selection expressions.                        #选择当前标签
#{...} : Message (i18n) expressions.            #国际化显示
@{...} : Link (URL) expressions.                    #超链接
~{...} : Fragment expressions.                        #fragment
</code></pre>
</li>
</ul>
<h1 id="十六、Spring-Boot-整合外置-Tomcat-及使用-JSP-开发"><a href="#十六、Spring-Boot-整合外置-Tomcat-及使用-JSP-开发" class="headerlink" title="十六、Spring Boot 整合外置 Tomcat 及使用 JSP 开发"></a>十六、<code>Spring Boot</code> 整合外置 Tomcat 及使用 JSP 开发</h1><p><code>Spring Boot</code> 默认自带内置的 Tomcat，且不需要打成 war 包，直接以 jar 包即可运行。</p>
<p>但是，如果要整合JSP开发，需要单独配置 <strong>外置的Tomcat</strong> 才行，以便打war包。</p>
<p><strong>1、<code>Spring Boot</code> 整合JSP开发步骤：</strong></p>
<ul>
<li><p>新建boot项目，勾选war打包形式。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--pom.xml--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
注意：provided 表示将项目打包时，不将内置的tomcat一起打包！
</code></pre>
</li>
<li><p>建立基本的web项目所需项目结构：</p>
<pre class=" language-bash"><code class="language-bash">webapp/WEB-INF                    <span class="token comment" spellcheck="true">#需要</span>
webapp/WEB-INF/web.xml    <span class="token comment" spellcheck="true">#不需要手工，Spring Boot会弄）</span>
webapp/index.jsp
</code></pre>
</li>
<li><p>创建tomcat实例，部署项目。</p>
<pre class=" language-bash"><code class="language-bash">右键项目New -<span class="token operator">></span> Servers -<span class="token operator">></span> Apache -<span class="token operator">></span> 选择一个版本tomcat，如：Tomcat v8.5 server
</code></pre>
</li>
</ul>
<p><strong>2、分析</strong>：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 访问：域名:port/项目名/文件名，如：http://localhost:8080/JspTest/index.jsp。</span>
<span class="token comment" spellcheck="true"># 与jar-boot项目不一样，默认不需要项目名和后缀。</span>

<span class="token comment" spellcheck="true"># 1. 注：整合 tomcat+JSP 的 Spring Boot 项目，启动与jar(非JSP)形式不同，且项目结构也有不同。</span>
XxxApplication.java                <span class="token comment" spellcheck="true">#SpringBoot主配置类</span>
ServletInitializer.java        <span class="token comment" spellcheck="true">#多了一个JSP使用的Servlet初始化器</span>

<span class="token comment" spellcheck="true"># 2. jar-boot项目启动时，直接启动主配置类。而JSP-war的boot项目启动，先启动tomcat -> 再启动Spring Boot。</span>
public class ServletInitializer extends SpringBootServletInitializer <span class="token punctuation">{</span>
    @Override
    protected SpringApplicationBuilder configure<span class="token punctuation">(</span>SpringApplicationBuilder application<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> application.sources<span class="token punctuation">(</span>JspTestApplication.class<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#调用了boot主配置类</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="扩展与问题"><a href="#扩展与问题" class="headerlink" title="扩展与问题"></a>扩展与问题</h1><ol>
<li><p>扩展：</p>
<ul>
<li><p><strong><code>@ConfigurationProperties</code> 与 <code>@Value</code> 区别</strong>：</p>
<table>
<thead>
<tr>
<th>—</th>
<th><code>@ConfigurationProperties</code></th>
<th><code>@Value</code></th>
</tr>
</thead>
<tbody><tr>
<td>注值</td>
<td>批量注入</td>
<td>单个</td>
</tr>
<tr>
<td>松散语法</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL(Spring表达式)</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>注入复杂类型</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p><em>☞松散语法：yml/properties配置Java中的驼峰形式可改为，如：userName –&gt; user-name/user-Name/userName均可。</em><br><em>☞简单类型：8个基本类型/String/Date</em></p>
</li>
<li><p><code>@PropertySource/@PropertySources</code> ：默认会加载 <code>application.yml/properties</code> 中的数据。若不在这2个配置中，则需要<code>@PropertySource</code> 单独指定：例如，若自定义配置类引入的是其他自定义配置（注意：名字非默认 <code>appliction.yml/properties</code> ）- 例如 <code>custom_user.properties</code> ，则类注解使用 <code>@PropertySource(value = &#123;&quot;classpath:custom_user.properties&quot;&#125;)</code> （其中：classpath类路径，即当前配置所在的资源目录 <code>src/main/resources/</code> ）</p>
<p><u><em>☞特别注意：<code>@PropertySource</code> 只能加载.properties/.xml而不能加载.yml配置！</em></u></p>
</li>
<li><p>随机占位符：</p>
<table>
<thead>
<tr>
<th>随机占位符表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>${random.uuid}</td>
<td>UUID</td>
</tr>
<tr>
<td>${random.value}</td>
<td>随机字符串</td>
</tr>
<tr>
<td>${random.int}</td>
<td>随机整型数</td>
</tr>
<tr>
<td>${random.long}</td>
<td>随机长整型数</td>
</tr>
<tr>
<td>${random.int(10)}</td>
<td>10以内随机整型数</td>
</tr>
<tr>
<td>${random.int(1,100)}</td>
<td>指定范围内随机整型数</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>问题：</p>
</li>
</ol>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--/{Your_SpringBoot_Project}/pom.xml：即添加了提示的配置元数据处理器--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
  ...
  <span class="token comment" spellcheck="true">&lt;!--若在 @ConfigurationProperties(prefix = "xxx") 有黄色警告，则按照提示点击 "Adding spring-boot-configuration-processor to pom.xml"--></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

  <span class="token comment" spellcheck="true">&lt;!--使用JSR-303数据校验，需要引入依赖--></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
<ol start="3">
<li><p>如何使用IDE自动引入<code>dependency</code>？</p>
<ul>
<li><p>Eclipse/STS：</p>
<pre class=" language-groovy"><code class="language-groovy"><span class="token number">1</span><span class="token operator">.</span> 偏好设置Preferences <span class="token operator">-></span> Maven <span class="token operator">-></span> 勾选 Download repository index updates onstartup
<span class="token number">2</span><span class="token operator">.</span> 在 pom<span class="token operator">.</span>xml 中使用快捷键 <span class="token string">"⌥ + /"</span> <span class="token operator">-></span> Edit Starts<span class="token punctuation">...</span> <span class="token operator">-></span> Edit Spring Starts 中的 Avaiable 栏输入要添加的 dependency 关键字 <span class="token operator">-></span> 勾选匹配项，应用即可。
</code></pre>
</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>传统的web项目中，静态资源（如：html）修改后，不需要重启。但是在 <code>Spring Boot</code> 项目中，修改后需要重启。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>技术篇</category>
        <category>后端</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
