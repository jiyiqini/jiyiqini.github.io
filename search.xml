<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常见的 Hexo 报错与解决</title>
    <url>/dev-tools/hexo/Hexo-Issues/</url>
    <content><![CDATA[<p>hexo 使用过程中，经常遇到一些稀奇古怪的问题。经查阅后解决，现将这些常见的错误与处理策略一一记录。</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://leunggeorge.github.io/2017/07/09/执行hexo时的一些报错处理/">执行 hexo 时的一些报错处理</a></li>
</ul>
<h1 id="Deprecated：use-date-for-updated"><a href="#Deprecated：use-date-for-updated" class="headerlink" title="Deprecated：use_date_for_updated"></a>Deprecated：<code>use_date_for_updated</code></h1><p>因安装一些模块，中途又跟踪提示 fix ，最后莫名其妙地把 hexo 从 <code>4.2.0</code> 升级到了 <code>5.4.0</code> ，在使用 hexo 操作（<code>hexo server</code>, etc.）时，出现如下警告提示：</p>
<pre class=" language-text"><code class="language-text">Deprecated config detected: "use_date_for_updated" is deprecated, please use "updated_option" instead. See https://hexo.io/docs/configuration for more details.</code></pre>
<blockquote>
<p><strong>原因：</strong> 提示 <code>use_date_for_updated</code> 过时。<br><strong>解决办法：</strong>： 根据提示，用 <code>updated_option</code> 替换即可。</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 修改文件：&lt;hexo-blog>/_config.yml</span>
<span class="token comment" spellcheck="true"># Date / Time format</span>
<span class="token comment" spellcheck="true">## Use post's date for updated date unless set in front-matter</span>
<span class="token key atrule">updated_option</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre>
</blockquote>
]]></content>
      <categories>
        <category>技术篇</category>
        <category>工具指南</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>报错</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建 Hexo+Github/Gitee 个人博客（入门篇1）</title>
    <url>/dev-tools/hexo/Setup-Tutorial/</url>
    <content><![CDATA[<p>如今各类博客系统一大堆，所谓萝卜白菜各有所爱。由于个人看重 hexo 的简洁性和免费托管 <a href="https://github.com/">Github</a>/<a href="https://gitee.com/">Gitee</a> 的原因，将决定折腾学习 hexo，以便后期学写技术博客、备忘笔记、和记录生活点滴。废话不多说，基于网上学习教程，个人做了如下总结。</p>
<span id="more"></span>

<!-- [toc] -->

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://hexo.io/zh-cn/">Hexo官网</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li>
<li><a href="https://www.jianshu.com/p/8681ab76da08">用hexo+github搭建属于自己的博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/136552969">部署Hexo踩过的坑—node14.0配置hexo</a></li>
<li><a href="https://segmentfault.com/a/1190000002632530">hexo常用命令笔记</a></li>
<li><a href="https://hexo.io/docs/one-command-deployment">One-Command Deployment</a></li>
<li><a href="https://blog.csdn.net/weixin_45667885/article/details/101084532">Hexo同时部署在GitHub、Coding、Gitee</a></li>
<li><a href="https://gavincrown.gitee.io/2020/07/06/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%92%8CGitee/">Hexo博客部署到GitHub和Gitee</a></li>
</ul>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>越来越多的人使用 GitHub/Gitee Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。虽然。hexo 搭建过程比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>
<p>本文就详细介绍下如何使用 Hexo + GitHub/Gitee 搭建免费个人博客网站的教程。</p>
<p><em>PS：Github 和 Gitee 基本类似，主要区别为 Gitee 为国内开发，服务器在国内相比较访问比较快速，所以本篇讲解如何同时部署 hexo 到 Github/Gitee。</em></p>
<hr>
<p>开始前，再介绍一下：</p>
<ul>
<li><h2 id="GitHub-Gitee-Pages-是什么？"><a href="#GitHub-Gitee-Pages-是什么？" class="headerlink" title="GitHub/Gitee Pages 是什么？"></a><a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages">GitHub/Gitee Pages 是什么？</a></h2><p>  GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。同理，Gitee Pages 是 Gitee 官方主的托管服务。</p>
</li>
<li><h2 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a><a href="https://hexo.io/zh-cn/">Hexo 是什么？</a></h2><p>  Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
</li>
<li><h2 id="Hexo-GitHub-Gitee-文章发布原理"><a href="#Hexo-GitHub-Gitee-文章发布原理" class="headerlink" title="Hexo + GitHub/Gitee 文章发布原理"></a>Hexo + GitHub/Gitee 文章发布原理</h2><p>  在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub/Gitee 上完成博文的发布。</p>
</li>
</ul>
<pre class=" language-text"><code class="language-text">graph LR
A(撰写文章.md) --> |hexo g| B(Hexo生成静态网页)
B --> |hexo d| C(部署到Github Pages)
C --> |访客| D(该博客首页xxx.github.io)</code></pre>
<p><img src="http://pic3.zhimg.com/80/v2-a193a47cf70fe6ecf156e5f3d34920ea_1440w.jpg" alt=""></p>
<ul>
<li><h2 id="Hexo-的优缺点"><a href="#Hexo-的优缺点" class="headerlink" title="Hexo 的优缺点"></a>Hexo 的优缺点</h2><p>  <strong>优点</strong>：免费托管在 GitHub/Gitee，安全省心；静态站点，轻量快速；可自由定制；迁移方便……</p>
<p>  <strong>不足</strong>：发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>
</li>
<li><h2 id="托管与博客地址一览表"><a href="#托管与博客地址一览表" class="headerlink" title="托管与博客地址一览表"></a>托管与博客地址一览表</h2><table>
<thead>
<tr>
<th align="center">托管平台</th>
<th align="center">访问博客地址格式</th>
<th align="center">示例</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://github.com">https://github.com</a></td>
<td align="center">https://用户名.github.io</td>
<td align="center"><a href="https://jiyiqini.github.io">https://jiyiqini.github.io</a></td>
<td align="center">国内访问慢</td>
</tr>
<tr>
<td align="center"><a href="https://gitee.com">https://gitee.com</a></td>
<td align="center">https://用户名.gitee.io</td>
<td align="center"><a href="https://jiyiqini.gitee.io">https://jiyiqini.gitee.io</a></td>
<td align="center">国内访问快</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><p>由于 Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，打开 terminal ，依次输入 <code>node -v、npm -v、 git --version</code> 并回车，出现程序版本号即可。</p>
<h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1. 搭建环境"></a>1. 搭建环境</h2><ul>
<li><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><p>  忽略。具体请下载安装包或终端命令安装均可。</p>
</li>
<li><h3 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h3><p>  忽略。具体请下载安装包或终端命令安装均可。</p>
</li>
<li><h3 id="申请-github、gitee-账号"><a href="#申请-github、gitee-账号" class="headerlink" title="申请 github、gitee 账号"></a>申请 github、gitee 账号</h3><p>  忽略。本文着重讲解hexo，请自行网上查阅。</p>
</li>
<li><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>  具体过程请看如下。</p>
</li>
</ul>
<h2 id="2-连接-github-gitee-与-SSH-key"><a href="#2-连接-github-gitee-与-SSH-key" class="headerlink" title="2. 连接 github/gitee 与 SSH-key"></a>2. 连接 github/gitee 与 SSH-key</h2><h3 id="Step1：SSH-key（方便多环境管理不同SSH-Key，此处以配置多个ssk-key为例）"><a href="#Step1：SSH-key（方便多环境管理不同SSH-Key，此处以配置多个ssk-key为例）" class="headerlink" title="Step1：SSH-key（方便多环境管理不同SSH-Key，此处以配置多个ssk-key为例）"></a>Step1：SSH-key（方便多环境管理不同SSH-Key，此处以配置多个ssk-key为例）</h3><pre class=" language-bash"><code class="language-bash">1，分别生成不同使用环境的SSH-Key：

<span class="token comment" spellcheck="true"># 例1，生成 github、gitgee 使用的 ssh-key，并单独命名管理为 github_id_rsa</span>
<span class="token comment" spellcheck="true"># 例2，生成 公司(例如：gitlab) 使用的 ssh-key，并单独命名管理为 gitlab_id_rsa</span>
$ ssh-keygen -t rsa -C <span class="token string">"your_email@your_github.com"</span> -f ~/.ssh/github_id_rsa
$ ssh-keygen -t rsa -C <span class="token string">"your_email@your_gitee.com"</span>  -f ~/.ssh/gitee_id_rsa
$ ssh-keygen -t rsa -C <span class="token string">"your_email@your_gitlab.com"</span> -f ~/.ssh/gitlab_id_rsa
$ <span class="token punctuation">..</span>.

最终，在 ~/.ssh/ 目录会生成 私钥和公钥（分别为：github_id_rsa/github_id_rsa.pub、gitee_id_rsa/gitee_id_rsa.pub、gitlab_id_rsa/gitlab_id_rsa.pub）。然后，我们将公钥中的内容粘帖到各自服务器的 SSH-key 的配置中即可。

2，添加私钥：

$ ssh-add ~/.ssh/github_id_rsa  <span class="token comment" spellcheck="true">#输出例如：Identity added: id_rsa (sh14****60@163)</span>
$ ssh-add ~/.ssh/gitee_id_rsa   <span class="token comment" spellcheck="true">#输出例如：Identity added: id_rsa (sh14****60@163)</span>
$ ssh-add ~/.ssh/gitlab_id_rsa  <span class="token comment" spellcheck="true">#输出例如：Identity added: github_id_rsa (sh14****60@163)</span>
$ <span class="token punctuation">..</span>.

如果执行ssh-add时提示<span class="token string">"Could not open a connection to your authentication agent"</span>，可以现执行命令：

$ ssh-agent <span class="token function">bash</span>

然后，再运行ssh-add命令：

<span class="token comment" spellcheck="true"># 可以通过 ssh-add -l 来显示私钥列表</span>
$ ssh-add -l
<span class="token comment" spellcheck="true"># 输出（对应ssh-add添加的密钥），例如：</span>
<span class="token comment" spellcheck="true"># 3072 SHA256:IFMBBfvZvSb1+Gmrs******9HaY2f5x******Sw+atVY sh14****60@163.com (RSA)</span>
<span class="token comment" spellcheck="true"># 3072 SHA256:IFMBBfvZvF+d+Bgtf******9HaY2f5x******BstddYZ sh14****60@163.com (RSA)</span>
<span class="token comment" spellcheck="true"># 3072 SHA256:Z65IEans5+7mZ5Fj8******lbYa2Qk******UP54oUeE sh14****60@163.com (RSA)</span>

<span class="token comment" spellcheck="true"># 可以通过 ssh-add -D 来清空私钥列表</span>
$ ssh-add -D

ssh-add命令是把专用密钥添加到ssh-agent的高速缓存中。该命令位置在/usr/bin/ssh-add，参数选项有：

-D：删除ssh-agent中的所有密钥. 
-d：从ssh-agent中的删除密钥 
-e pkcs11：删除PKCS<span class="token comment" spellcheck="true">#11共享库pkcs1提供的钥匙。 </span>
-s pkcs11：添加PKCS<span class="token comment" spellcheck="true">#11共享库pkcs1提供的钥匙。 </span>
-L：显示ssh-agent中的公钥 
-l：显示ssh-agent中的密钥 
-t life：对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥 -X：对ssh-agent进行解锁 
-x：对ssh-agent进行加锁

3，创建并修改config配置文件：

<span class="token comment" spellcheck="true"># 在 ~/.ssh 目录下新建一个 config 文件：</span>
$ <span class="token function">touch</span> config

添加内容：

<span class="token comment" spellcheck="true"># github</span>
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/github_id_rsa

<span class="token comment" spellcheck="true"># gitee</span>
Host gitee.com
    HostName gitee.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/gitee_id_rsa

<span class="token comment" spellcheck="true"># gitlab</span>
Host gitlab.com
    HostName gitlab.com <span class="token comment" spellcheck="true">#这里填你们公司的git网址即可</span>
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/gitlab_id_rsa

<span class="token comment" spellcheck="true"># 更多ssh-key添加...</span>

4，测试：

$ <span class="token function">ssh</span> -T git@github.com
$ <span class="token function">ssh</span> -T git@gitee.com

<span class="token comment" spellcheck="true"># 若出错的话，别急！通过debug来查看解决吧。(其中-v 是输出编译信息，然后根据编译信息自己去解决问题吧)：</span>
$ <span class="token function">ssh</span> -vT git@github.com

若输出：  

Hi <span class="token operator">&lt;</span>your_ssh_user_name<span class="token operator">></span><span class="token operator">!</span> You've successfully authenticated, but <span class="token operator">&lt;</span>GitHub<span class="token operator">|</span>GITEE.COM<span class="token operator">|</span><span class="token punctuation">..</span>.<span class="token operator">></span> does not provide shell access.  

则表示成功的连上 github 了。也可以试试链接公司的 gitlab 。这样，就可以在不同的仓库，用不同的账号登录了~~~</code></pre>
<h3 id="Step2：在托管平台上添加公钥授权："><a href="#Step2：在托管平台上添加公钥授权：" class="headerlink" title="Step2：在托管平台上添加公钥授权："></a>Step2：在托管平台上添加公钥授权：</h3><ul>
<li><p>Github 添加公钥授权：</p>
<pre class=" language-bash"><code class="language-bash">  1，Github -<span class="token operator">></span> Settings -<span class="token operator">></span> SSH and GPG keys
  2，SSH keys选项 -<span class="token operator">></span> New SSH key。
  3，Title：随便取个名字即可，如：SSH-key_myGithub。
  4，Key：将之前创建的 github 公钥（即 github_id_rsa.pub）里的内容，全复制粘贴进去。
  5，点击“Add SSH key”，保存。</code></pre>
</li>
<li><p>Gitee 添加公钥授权：</p>
<pre class=" language-bash"><code class="language-bash">  1，Gitee -<span class="token operator">></span> 设置 -<span class="token operator">></span> 安全设置<span class="token comment" spellcheck="true">#SSH公钥。</span>
  2，SSH公钥 -<span class="token operator">></span> 添加公钥。
  3，标题：随便取个名字即可。如：SSH-key_myGitee。
  4，公钥：将之前创建的 gitee 公钥（即 gitee_id_rsa.pub）里的内容，全复制粘贴进去。
  5，点击“确定”，保存。</code></pre>
</li>
</ul>
<h3 id="Step3：验证连接"><a href="#Step3：验证连接" class="headerlink" title="Step3：验证连接"></a>Step3：验证连接</h3><pre class=" language-bash"><code class="language-bash">1，进入终端。
2，输入命令：ssh -T git@github.com <span class="token comment" spellcheck="true"># gitee：ssh -T git@gitee.com</span>
3，若出现 “Are you sure……”，输入 <span class="token function">yes</span> 回车确认。
4，最后输出 “Hi <span class="token operator">&lt;</span>your_ssh_user_name<span class="token operator">></span><span class="token operator">!</span> You've successfully authenticated, but <span class="token operator">&lt;</span>GitHub<span class="token operator">|</span>GITEE.COM<span class="token operator">></span> does not provide shell access.  ”，表示成功连接。</code></pre>
<h2 id="3-创建-Github-Gitee-Pages-仓库"><a href="#3-创建-Github-Gitee-Pages-仓库" class="headerlink" title="3. 创建 Github/Gitee Pages 仓库"></a>3. 创建 Github/Gitee Pages 仓库</h2><h3 id="Github-Pages-仓库"><a href="#Github-Pages-仓库" class="headerlink" title="Github Pages 仓库"></a>Github Pages 仓库</h3><pre class=" language-bash"><code class="language-bash">1，GitHub 主页右上角加号 -<span class="token operator">></span> New repository。
2，Repository name 中输入“用户名.github.io”。
3，勾选 Public。必须 Public 才能使用。 
4，勾选 “Initialize this repository with a README”。
5，填好后点击 Create repository 创建。
6，创建后默认自动启用 HTTPS，博客地址为：https://用户名.github.io。</code></pre>
<p>例如，我的博客：<a href="https://jiyiqini.github.io">https://jiyiqini.github.io</a></p>
<h3 id="Gitee-Pages-仓库"><a href="#Gitee-Pages-仓库" class="headerlink" title="Gitee Pages 仓库"></a>Gitee Pages 仓库</h3><pre class=" language-bash"><code class="language-bash">1，Gitee 主页右上角加号 -<span class="token operator">></span> 新建仓库。
2，仓库名称中输入“用户名”。
3，勾选“开源”或“私有”均可。对于个人博客嘛，私有吧。
4，勾选“初始化仓库”，其它看情况可选（如：设置模板、选择分支模型）。
5，创建完成后，点击该仓库的 “服务” -<span class="token operator">></span> Gitee Pages <span class="token operator">></span> 勾选“强制使用HTTPS” -<span class="token operator">></span> 启动。博客地址为：https://用户名.gitee.io。</code></pre>
<p>例如，我的博客：<a href="https://jiyiqini.gitee.io">https://jiyiqini.gitee.io</a></p>
<p><strong>注意事项：</strong></p>
<ul>
<li>Github repo 权限只能为 <code>public</code> ，而 Gitee repo 权限可以是 <code>public</code>、也可是 <code>private</code>。</li>
<li>Github 的 repo name 必须为 <code>“用户名.github.io”</code> 格式，从而博客访问地址为：<code>https://用户名.github.io</code>；而 Gitee 的 repo name 任意。<strong><em>一般与用户名一致，这样博客地址就比较简洁，形如：<code>https://用户名.gitee.io</code></em></strong>。若 repo name 不保持与用户名一致，则需要有二级目录方可访问，如：<code>https://用户名.gitee.io/仓库名</code>。</li>
<li>Github 创建好仓库，默认为 <code>HTTPS</code> ，而 Gitee 需要去手动开启！</li>
</ul>
<h2 id="4-Hexo博客系统接入（核心）"><a href="#4-Hexo博客系统接入（核心）" class="headerlink" title="4. Hexo博客系统接入（核心）"></a>4. Hexo博客系统接入（核心）</h2><h3 id="hexo-安装与基本使用"><a href="#hexo-安装与基本使用" class="headerlink" title="hexo 安装与基本使用"></a>hexo 安装与基本使用</h3><p>☞ <a href="https://hexo.io/zh-cn/">Hexo</a>官方步骤参考：</p>
<blockquote>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g
$ hexo init blog
$ <span class="token function">cd</span> blog
$ <span class="token function">npm</span> <span class="token function">install</span>
$ hexo server</code></pre>
</blockquote>
<p>☞ Hexo 博客文件夹目录结构概览（<a href="https://hexo.io/zh-cn/docs/setup">更多详情</a>）：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>
├── _config.yml         <span class="token comment" spellcheck="true">#网点的配置信息</span>
├── db.json             <span class="token comment" spellcheck="true">#缓存文件</span>
├── node_modules        <span class="token comment" spellcheck="true">#安装的插件以及hexo所需的一些node.js模块。</span>
├── package-lock.json   <span class="token comment" spellcheck="true">#应用程序的信息</span>
├── package.json        <span class="token comment" spellcheck="true">#应用程序信息，配置hexo运行需要的js包。</span>
├── public              <span class="token comment" spellcheck="true">#最终所见网页的所有内容</span>
├── scaffolds           <span class="token comment" spellcheck="true">#模版文件夹。当您新建文章时，Hexo会根据scaffold来建立文件。Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</span>
│   ├── draft.md
│   ├── page.md
│   └── post.md
├── <span class="token function">source</span>              <span class="token comment" spellcheck="true">#存放用户资源，md等文档。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown和HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</span>
│   └── _posts
└── themes              <span class="token comment" spellcheck="true">#主题 文件夹。Hexo 会根据主题来生成静态页面。</span></code></pre>
<p><strong><em>具体个人搭建步骤：</em></strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ********** 1，npm安装hexo博客程序：</span>
$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli


<span class="token comment" spellcheck="true"># ********** 2，hexo初始化及相关依赖：</span>
<span class="token comment" spellcheck="true"># 假设，我的博客放在： ~/MyBlogs/Hexo-Blogs</span>
$ <span class="token function">cd</span> ~/MyBlogs/Hexo-Blogs <span class="token comment" spellcheck="true">#进入存放hexo博客程序的目标目录</span>
$ hexo init     <span class="token comment" spellcheck="true">#初始化。亦可：进入上一级目录~/MyBlogs下，再直接 hexo init Hexo-Blogs。</span>
$ <span class="token function">npm</span> <span class="token function">install</span>   <span class="token comment" spellcheck="true">#安装依赖组件</span>


<span class="token comment" spellcheck="true"># ********** 3，生成与预览：</span>
$ hexo g    <span class="token comment" spellcheck="true">#生成静态页面。或hexo generate</span>
$ hexo s    <span class="token comment" spellcheck="true">#启动本地预览。或hexo server</span>
<span class="token comment" spellcheck="true"># 浏览器打开终端提示的url：http://localhost:4000。若出现默认的hexo页面，表示本地博客成功。</span>
<span class="token comment" spellcheck="true"># Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。</span>

<span class="token comment" spellcheck="true"># ********** 4，部署 Hexo 到 GitHub Pages</span>
<span class="token comment" spellcheck="true"># 本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</span>
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save <span class="token comment" spellcheck="true">#安装 hexo-deployer-git。否则可能会出错“error deployer not found:git/github”</span>
$ 修改 <span class="token punctuation">..</span>/<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;your_hexo_blog&amp;#125;/_config.yml$deploy 中 Deployment 部分并保存：</span>
    <span class="token comment" spellcheck="true"># Deployment</span>
    <span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>
    deploy:
      type: <span class="token function">git</span>
      repo: https://github.com/<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;用户名&amp;#125;/&amp;#123;用户名&amp;#125;.github.io.git</span>
      branch: master
$ hexo d <span class="token comment" spellcheck="true">#发布网点到 Github Pages</span>
$ 浏览器访问 https://用户名.github.io，结束. <span class="token comment" spellcheck="true">#注意：第一次发布可能会有10分钟的延迟，在这期间可能看到的是空白页面。</span></code></pre>
<p>☞ ==<strong><em>每次修改完本地的文件后必须执行以下命令，以重新部署Github Pages：</em></strong>==</p>
<pre class=" language-bash"><code class="language-bash">hexo clean              <span class="token comment" spellcheck="true">#清除缓存</span>
hexo g 或 hexo generate <span class="token comment" spellcheck="true">#生成静态页面</span>
hexo d 或 deploy        <span class="token comment" spellcheck="true">#部署发布。发布前本地检查预览下：hexo s -> http://localhost:4000</span></code></pre>
<h3 id="hexo-同时部署-Github-Gitee-Pages"><a href="#hexo-同时部署-Github-Gitee-Pages" class="headerlink" title="hexo 同时部署 Github/Gitee Pages"></a>hexo 同时部署 Github/Gitee Pages</h3><p>即，在您的博客根目录下，编辑 <code>_config.yml</code> 配置文件，设置 <code>deploy</code> ，如：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Deployment</span>
<span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># 单平台部署，不用 - 分栏配置亦可以，直接如下：</span>
  <span class="token comment" spellcheck="true"># ref: https://hexo.io/docs/one-command-deployment</span>
  <span class="token comment" spellcheck="true"># type: git</span>
  <span class="token comment" spellcheck="true"># repo: https://github.com/用户名/用户名.github.io.git</span>
  <span class="token comment" spellcheck="true"># #repo: https://gitee.com/用户名/用户名.git</span>
  <span class="token comment" spellcheck="true"># branch: master</span>

  <span class="token comment" spellcheck="true"># 如果为多平台部署，请用 - 分栏配置：</span>
<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>用户名/用户名.github.io.git <span class="token comment" spellcheck="true">#或 https://github.com/用户名/用户名.github.io.git</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master
<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git 
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>用户名/用户名.git <span class="token comment" spellcheck="true">#或 https://gitee.com/用户名/用户名.git</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre>
<p><strong>注意事项：Github Pages 部署后，支持自动更新，无需额外操作，稍等一小会就可访问了，因 Github 服务器在国外。而 Gitee Pages 则不一样，部署后，不支持自动更新，需要手动去点击更新后才可以访问。</strong></p>
<h3 id="最后，一键部署。"><a href="#最后，一键部署。" class="headerlink" title="最后，一键部署。"></a>最后，一键部署。</h3><p>通常，我比较喜欢使用一键操作：</p>
<blockquote>
<p><code>hexo clean &amp;&amp; hexo g -d</code> 或 <code>hexo clean &amp;&amp; hexo d -g</code></p>
</blockquote>
<h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 基本常用</span>
hexo <span class="token punctuation">[</span>-<span class="token punctuation">]</span>h<span class="token operator">|</span><span class="token function">help</span>              <span class="token comment" spellcheck="true">#查看帮助</span>
hexo <span class="token punctuation">[</span>-<span class="token punctuation">]</span>v<span class="token operator">|</span>version           <span class="token comment" spellcheck="true">#查看 hexo 的版本，包括 hexo 所依赖的组件正在使用的版本，如：node、v8……</span>

hexo n/new <span class="token string">"postName"</span>       <span class="token comment" spellcheck="true">#新建文章。在source下_post中生成一个“postName.md”，打开开始写文章即可。即：/source/_post/&lt;postName.md></span>
hexo n/new page <span class="token string">"pageName"</span>  <span class="token comment" spellcheck="true">#新建页面。在source下生成page文件夹页并默认生成index.md，即：/source/&lt;pageName>/index.md</span>

hexo g/generate             <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>
hexo s/server               <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>
hexo d/deploy               <span class="token comment" spellcheck="true">#将.deploy目录部署到GitHub</span>
hexo p/publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span>  <span class="token comment" spellcheck="true">#发表草稿</span>

<span class="token comment" spellcheck="true"># 完成后部署</span>
<span class="token comment" spellcheck="true"># 两个命令的作用是相同的（--deploy全名等价于-简写）</span>
hexo deploy --generate 或 hexo generate --deploy
<span class="token comment" spellcheck="true">#简写即为：</span>
hexo g -d 或 hexo d -g  <span class="token comment" spellcheck="true">#生成后并部署（g和d顺序可交换）</span>
hexo g -d -m <span class="token string">'message'</span>  <span class="token comment" spellcheck="true">#生成后并部署带git-commit message</span>

<span class="token comment" spellcheck="true"># 服务器</span>
hexo s/server                   <span class="token comment" spellcheck="true">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span>
hexo s/server -s                <span class="token comment" spellcheck="true">#静态模式</span>
hexo s/server -p 5000           <span class="token comment" spellcheck="true">#更改端口为5000</span>
hexo s/server -i 192.168.1.1    <span class="token comment" spellcheck="true">#自定义 IP</span>

<span class="token comment" spellcheck="true"># 监视文件变动</span>
hexo generate               <span class="token comment" spellcheck="true">#使用 Hexo 生成静态文件快速而且简单</span>
hexo generate --watch       <span class="token comment" spellcheck="true">#监视文件变动</span></code></pre>
<h1 id="Hexo个性化设置（基础入门）"><a href="#Hexo个性化设置（基础入门）" class="headerlink" title="Hexo个性化设置（基础入门）"></a>Hexo个性化设置（基础入门）</h1><p>此章节仅讲解 hexo 如何设置主题，更多详细请移步: <a href="/dev-tools/hexo/How-To-Config/" title="《如何美化 hexo+next 个人博客？(入门篇2)》">《如何美化 hexo+next 个人博客？(入门篇2)》</a></p>
<h2 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h2><p>Hexo官方推荐或Github上搜索，都有很多主题。</p>
<blockquote>
<ol>
<li><a href="https://hexo.io/themes">https://hexo.io/themes</a></li>
</ol>
</blockquote>
<p>☞ <strong>切换主题步骤：</strong></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#********** 1，进入&lt;your_blogs>/thems目录</span>
$ <span class="token function">cd</span> themes

<span class="token comment" spellcheck="true">#********** 2，下载主题（例如：https://github.com/theme-next/hexo-theme-next.git）</span>
$ <span class="token function">git</span> clone <span class="token operator">&lt;</span>git_theme_repo_url<span class="token operator">></span>

<span class="token comment" spellcheck="true">#********** 3, 配置&lt;your_blogs>/_config.yml</span>
    <span class="token comment" spellcheck="true"># vim _config.yml</span>
    <span class="token comment" spellcheck="true"># Extensions</span>
    <span class="token comment" spellcheck="true">## Plugins: https://hexo.io/plugins/</span>
    <span class="token comment" spellcheck="true">## Themes: https://hexo.io/themes/</span>
    theme: hexo-theme-next <span class="token comment" spellcheck="true">#landscape</span>

<span class="token comment" spellcheck="true">#********** 4, 重启server（本地预览或部署Github）</span>
$ hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s    <span class="token comment" spellcheck="true">#更新并本地预览服务</span>
$ hexo cleann <span class="token operator">&amp;&amp;</span> hexo d -g          <span class="token comment" spellcheck="true">#更新并部署发布</span></code></pre>
<h2 id="布局切换"><a href="#布局切换" class="headerlink" title="布局切换"></a>布局切换</h2><h1 id="Hexo搭建遇到问题（仅入门常见的几个）"><a href="#Hexo搭建遇到问题（仅入门常见的几个）" class="headerlink" title="Hexo搭建遇到问题（仅入门常见的几个）"></a>Hexo搭建遇到问题（仅入门常见的几个）</h1><p>此章节仅讲解 hexo 入门搭建中遇到的几个报错与解决，更多异常与处理请移步: <a href="/dev-tools/hexo/Hexo-Issues/" title="《常见的 Hexo 报错与解决》">《常见的 Hexo 报错与解决》</a></p>
<ul>
<li><p>若出现 <code>error deployer not found:git 或者 error deployer not found:github</code> 的错误：</p>
<blockquote>
<p><strong>解决办法</strong>：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token variable">$npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre>
</blockquote>
</li>
<li><p>若出现类似 <code>FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: ...</code> 错误：</p>
<blockquote>
<p><strong>解决办法</strong>：</p>
<pre class=" language-bash"><code class="language-bash">_config.yml中配置项的冒号后面要用空格隔开，再跟配置内容。
<span class="token comment" spellcheck="true">#例如：</span>
<span class="token comment" spellcheck="true">#deploy:</span>
<span class="token comment" spellcheck="true">#  type: git</span>
<span class="token comment" spellcheck="true">#  repo: https://github.com/用户名/用户名.github.io.git</span>
<span class="token comment" spellcheck="true">#  branch: master</span></code></pre>
</blockquote>
</li>
<li><p>中文乱码问题：</p>
<blockquote>
<p><strong>解决办法</strong>：</p>
<pre class=" language-bash"><code class="language-bash">将文件的内容编码改为UTF8格式</code></pre>
</blockquote>
</li>
<li><p><code>hexo sever</code>能够成功运行，但是 <code>localhost:4000</code> 无法访问：</p>
<blockquote>
<p><strong>解决办法</strong>：</p>
<pre class=" language-bash"><code class="language-bash">$ hexo s -p 5000 <span class="token comment" spellcheck="true">#改用其他端口5000启动</span></code></pre>
</blockquote>
</li>
<li><p><code>hexo d</code> 和 <code>hexo -v</code> 若出现如下稀奇古怪错误，已确保所有配置都正确，但还是会报错：</p>
<pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># hexo -v 提示错误：</span>
  <span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'lineno'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>Use <span class="token variable"><span class="token variable">`</span>node --trace-warnings <span class="token punctuation">..</span>.<span class="token variable">`</span></span> to show where the warning was created<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'column'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'filename'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'lineno'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'column'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>node:13857<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'filename'</span> of module exports inside circular dependency
  hexo: 4.2.0
  hexo-cli: 3.1.0
  os: Darwin 19.4.0 darwin x64
  node: 14.2.0 <span class="token comment" spellcheck="true">#------》注意这一行！！！</span>
  v8: 8.1.307.31-node.32
  uv: 1.37.0
  zlib: 1.2.11
  brotli: 1.0.7
  ares: 1.16.0
  modules: 83
  nghttp2: 1.40.0
  napi: 6
  llhttp: 2.0.4
  openssl: 1.1.1g
  cldr: 36.1
  icu: 66.1
  tz: 2019c
  unicode: 13.0

  <span class="token comment" spellcheck="true"># hexo d 提示错误：</span>
  <span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'lineno'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>Use <span class="token variable"><span class="token variable">`</span>node --trace-warnings <span class="token punctuation">..</span>.<span class="token variable">`</span></span> to show where the warning was created<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'column'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'filename'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'lineno'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'column'</span> of module exports inside circular dependency
  <span class="token punctuation">(</span>node:13872<span class="token punctuation">)</span> Warning: Accessing non-existent property <span class="token string">'filename'</span> of module exports inside circular dependency
  INFO  Start processing
  INFO  Files loaded <span class="token keyword">in</span> 125 ms
  INFO  0 files generated <span class="token keyword">in</span> 42 ms
  INFO  Deploying: <span class="token function">git</span>
  INFO  Clearing .deploy_git folder<span class="token punctuation">..</span>.
  INFO  Copying files from public folder<span class="token punctuation">..</span>.
  FATAL Something's wrong. Maybe you can <span class="token function">find</span> the solution here: https://hexo.io/docs/troubleshooting.html
  TypeError <span class="token punctuation">[</span>ERR_INVALID_ARG_TYPE<span class="token punctuation">]</span>: The <span class="token string">"mode"</span> argument must be integer. Received an instance of Object</code></pre>
<blockquote>
<p><strong>解决办法：</strong></p>
<ul>
<li><strong>原因</strong>：一般由于 hexo 不能使用最新版本的 node 版本（如，我的版本比较高 14.2.0） ，安装或切换为某个低的稳定版本即可（如，我切换成 v12.22.4 就正常了）。</li>
<li><strong>解决</strong>：  <pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> n stable   <span class="token comment" spellcheck="true">#n下载最新稳定版本。若需要切换回指定版本，则使用 sudo n 14.2.0(即版本号)</span>
$ hexo <span class="token function">v</span><span class="token operator">|</span>version  <span class="token comment" spellcheck="true">#查看版本，正常了。</span>
$ hexo d<span class="token operator">|</span>deploy   <span class="token comment" spellcheck="true">#重新发布，正常了。</span></code></pre>
</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>技术篇</category>
        <category>工具指南</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>如何美化 hexo+next 个人博客？(入门篇2)</title>
    <url>/dev-tools/hexo/How-To-Config/</url>
    <content><![CDATA[<p>Hexo博客搭建成功后，其实我们就已经可以愉快地进行写文章了。但是，由于个人喜好，我们可能需要自定义设置一下创建的博客系统。这样，既也助于我们有更好的心情去编写文章，又能吸引更多访客的阅读。So，我们来看看如何进行常见的个性化设置吧？</p>
<span id="more"></span>

<!-- [toc] -->

<blockquote>
<p><strong>更多参考：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/dta0502/article/details/89607895">Hexo-Yilia 进阶笔记(CSDN)</a></li>
<li><a href="https://tding.top/archives/9a232bbe.html">Hexo-Yilia 进阶笔记(Hexo)</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1684713?from=article.detail.1626165">Hexo-Matery 主题美化</a></li>
</ul>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初始创建好的 <code>Hexo+next</code> 基本可以用，也简洁。但是，我们还是有需要进一步美化一下。</p>
<p>无非就是主题与排版，围绕的核心配置文件不外乎：</p>
<blockquote>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span>/<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;your_hexo_blog&amp;#125;</span>
   ├────────_config.yml <span class="token comment" spellcheck="true">#全局配置</span>
   ├────────themes/hexo-theme-next/_config.yml <span class="token comment" spellcheck="true">#next主题配置：后面的大多数都在这里配置</span></code></pre>
</blockquote>
<p>现在，就按我自己的喜好做如下个性化配置吧！（例如：<a href="https://jiyiqini.github.io">我的个人博客</a>）</p>
<p><em>PS: 本文是基于 Hexo+next 讲解的。</em></p>
<h1 id="新增网站头信息（Site）"><a href="#新增网站头信息（Site）" class="headerlink" title="新增网站头信息（Site）"></a>新增网站头信息（Site）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 位于 ../&lt;your_hexo_blog>/_config.yml#Site：</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 博客标题。例如：“我的学习之旅”
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'博客副标题，用于简单描述。'</span>
<span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'作者个人描述，例如一个座右铭：好好学习，天天向上。'</span>
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> 关键字 <span class="token comment" spellcheck="true">#默认为空</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 作者名称
<span class="token key atrule">language</span><span class="token punctuation">:</span> 博客语言类型。<span class="token comment" spellcheck="true">#例如：zh-CN</span>
<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">'时区'</span> <span class="token comment" spellcheck="true">#默认为空，表示当前用户所在时区</span></code></pre>
<h1 id="配置“关于-分类-标签-搜索-404”等常见入口"><a href="#配置“关于-分类-标签-搜索-404”等常见入口" class="headerlink" title="配置“关于/分类/标签/搜索/404”等常见入口"></a>配置“关于/分类/标签/搜索/404”等常见入口</h1><blockquote>
<p>基本步骤：  </p>
<ol>
<li><code>hexo new page xxx</code> –&gt; 编辑对应的 <code>index.md</code> 内容  </li>
<li><code>../themes/theme-hexo-next/_config.yml$menu</code> 中开启：  <pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Menu Settings</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Usage: `Key: /link/ || icon`</span>
<span class="token comment" spellcheck="true"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span>
<span class="token comment" spellcheck="true"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span>
<span class="token comment" spellcheck="true"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -> archives).</span>
<span class="token comment" spellcheck="true"># External url should start with http:// or https://</span>
<span class="token key atrule">menu</span><span class="token punctuation">:</span>
<span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>home
<span class="token key atrule">about</span><span class="token punctuation">:</span> /about/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>user
<span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>tags
<span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>th
<span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>archive
<span class="token comment" spellcheck="true">#schedule: /schedule/ || fa fa-calendar</span>
<span class="token comment" spellcheck="true">#sitemap: /sitemap.xml || fa fa-sitemap</span>
<span class="token comment" spellcheck="true">#commonweal: /404/ || fa fa-heartbeat</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Enable / Disable menu icons / item badges.</span>
<span class="token key atrule">menu_settings</span><span class="token punctuation">:</span>
<span class="token key atrule">icons</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true">#是否启用图标</span>
<span class="token key atrule">badges</span><span class="token punctuation">:</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true">#是否显示角标数（栏目下文章数目）</span></code></pre>
</li>
</ol>
</blockquote>
<ul>
<li><p><strong>关于：</strong></p>
<pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># 创建 about</span>
  $ hexo new page about

  <span class="token comment" spellcheck="true"># 编辑内容（../source/about/index.md）</span>
  ---
  title: 关于介绍              <span class="token comment" spellcheck="true">#当前页标题</span>
  date: 2020-05-16 18:04:21   <span class="token comment" spellcheck="true">#当前文件创建时间</span>
  comments: <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">#禁用评论</span>
  ---
  <span class="token punctuation">..</span>.更多详细介绍，根据markdown语法编写即可<span class="token punctuation">..</span>.</code></pre>
</li>
<li><p><strong>分类：</strong></p>
<pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># 创建 categories</span>
  $ hexo new page categories

  <span class="token comment" spellcheck="true"># 编辑内容（../source/categories/index.md）</span>
  ---
  title: 文章分类              <span class="token comment" spellcheck="true">#当前页标题</span>
  date: 2020-05-16 13:21:33   <span class="token comment" spellcheck="true">#当前文件创建时间</span>
  categories: Testing         <span class="token comment" spellcheck="true">#分类名</span>
  type: <span class="token string">"categories"</span>          <span class="token comment" spellcheck="true">#设置页面类型</span>
  comments: <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">#禁止评论</span>
  ---
  <span class="token punctuation">..</span>.更多详细介绍，根据markdown语法编写即可<span class="token punctuation">..</span>.</code></pre>
</li>
<li><p><strong>标签：</strong></p>
<pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># 创建 tags</span>
  $ hexo new page tags

  <span class="token comment" spellcheck="true"># 编辑内容（../source/tags/index.md）</span>
  ---
  title: 文章分类              <span class="token comment" spellcheck="true">#当前页标题</span>
  date: 2020-05-16 13:21:07   <span class="token comment" spellcheck="true">#当前文件创建时间</span>
  type: <span class="token string">"tags"</span>                <span class="token comment" spellcheck="true">#设置页面类型</span>
  comments: <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">#禁止评论</span>
  ---
  <span class="token punctuation">..</span>.更多详细介绍，根据markdown语法编写即可<span class="token punctuation">..</span>.</code></pre>
</li>
<li><p><strong>404：</strong></p>
<pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># 创建 404</span>
  $ hexo new page 404

  <span class="token comment" spellcheck="true"># 编辑内容（../source/404/index.md）</span>
  ---
  title: 404                  <span class="token comment" spellcheck="true">#404 Not Found：该页无法显示</span>
  date: 2020-05-16 14:11:34   <span class="token comment" spellcheck="true">#当前文件创建时间</span>
  comments: <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">#禁止评论</span>
  permalink: /404
  type: <span class="token string">"404"</span>
  layout: <span class="token string">"404"</span>
  ---
  <span class="token punctuation">..</span>.更多详细介绍，根据markdown语法编写即可<span class="token punctuation">..</span>.</code></pre>
</li>
<li><p><strong>搜索：</strong></p>
<pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># hexo 站点目录下执行安装命令：</span>
  $ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb

  <span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
  <span class="token comment" spellcheck="true"># 编辑global配置（../&lt;your_hexo_blog>/_config.yml#search）</span>
  <span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
  <span class="token comment" spellcheck="true"># Search</span>
  search:
    path: search.xml    <span class="token comment" spellcheck="true">#索引文件的路径，相对于站点根目录</span>
    field: post         <span class="token comment" spellcheck="true">#搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</span>
    content: <span class="token boolean">true</span>
    format: html
    limit: 10000        <span class="token comment" spellcheck="true">#限制搜索的条目数</span></code></pre>
</li>
</ul>
<h1 id="配置字体"><a href="#配置字体" class="headerlink" title="配置字体"></a>配置字体</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 编辑global配置（../&lt;your_hexo_blog>/_config.yml#Font-Settings），若没有则添加。</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>

<span class="token comment" spellcheck="true"># Font-Settings</span>
<span class="token key atrule">font</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># Use custom fonts families or not.</span>
  <span class="token comment" spellcheck="true"># Depended options: `external` and `family`.</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

  <span class="token comment" spellcheck="true"># Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font options:</span>
  <span class="token comment" spellcheck="true"># `external: true` will load this font family from `host` above.</span>
  <span class="token comment" spellcheck="true"># `family: Times New Roman`. Without any quotes.</span>
  <span class="token comment" spellcheck="true"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span>

  <span class="token comment" spellcheck="true"># Global font settings used for all elements inside &lt;body>.</span>
  <span class="token key atrule">global</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> 
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for site title (.site-title).</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span> 

  <span class="token comment" spellcheck="true"># Font settings for headlines (&lt;h1> to &lt;h6>).</span>
  <span class="token key atrule">headings</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> Roboto Slab
    <span class="token key atrule">size</span><span class="token punctuation">:</span> 

  <span class="token comment" spellcheck="true"># Font settings for posts (.post-body).</span>
  <span class="token key atrule">posts</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for &lt;code> and code blocks.</span>
  <span class="token key atrule">codes</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 编辑theme配置（../themes/theme-hexo-next/_config.yml#font），默认在</span>
<span class="token comment" spellcheck="true"># next主题配置中也有Font Settings。</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Font Settings</span>
<span class="token comment" spellcheck="true"># See: https://theme-next.org/docs/theme-settings/#Fonts-Customization</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Find fonts on Google Fonts (https://www.google.com/fonts)</span>
<span class="token comment" spellcheck="true"># All fonts set here will have the following styles:</span>
<span class="token comment" spellcheck="true">#   light | light italic | normal | normal italic | bold | bold italic</span>
<span class="token comment" spellcheck="true"># Be aware that setting too much fonts will cause site running slowly</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># To avoid space between header and sidebar in scheme Pisces / Gemini, Web Safe fonts are recommended for `global` (and `title`):</span>
<span class="token comment" spellcheck="true"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>

<span class="token key atrule">font</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

  <span class="token comment" spellcheck="true"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font options:</span>
  <span class="token comment" spellcheck="true"># `external: true` will load this font family from `host` above.</span>
  <span class="token comment" spellcheck="true"># `family: Times New Roman`. Without any quotes.</span>
  <span class="token comment" spellcheck="true"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span>

  <span class="token comment" spellcheck="true"># Global font settings used for all elements inside &lt;body>.</span>
  <span class="token key atrule">global</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> Lato
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for site title (.site-title).</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for headlines (&lt;h1> to &lt;h6>).</span>
  <span class="token key atrule">headings</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for posts (.post-body).</span>
  <span class="token key atrule">posts</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span>

  <span class="token comment" spellcheck="true"># Font settings for &lt;code> and code blocks.</span>
  <span class="token key atrule">codes</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    family<span class="token punctuation">:</span></code></pre>
<h1 id="配置个人信息栏（头像、内联链接、友情链接等）"><a href="#配置个人信息栏（头像、内联链接、友情链接等）" class="headerlink" title="配置个人信息栏（头像、内联链接、友情链接等）"></a>配置个人信息栏（头像、内联链接、友情链接等）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.头像。编辑theme配置（../themes/hexo-theme-next/_config.yml#avatar）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Sidebar Avatar</span>
<span class="token key atrule">avatar</span><span class="token punctuation">:</span>
  <span class="token key atrule">url</span><span class="token punctuation">:</span> /images/avatar.jpg   <span class="token comment" spellcheck="true">#将个人头像图片放在 ../themes/hexo-theme-next/source/images/ 下。例如：avatar.jpg</span>
  <span class="token key atrule">rounded</span><span class="token punctuation">:</span> <span class="token boolean important">true             </span><span class="token comment" spellcheck="true">#头像是否显示为圆图</span>
  <span class="token key atrule">rotated</span><span class="token punctuation">:</span> <span class="token boolean important">true             </span><span class="token comment" spellcheck="true">#鼠标悬浮在头像上，是否启用头像旋转的特效</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.社交链接。编辑theme配置（../themes/hexo-theme-next/_config.yml#social）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Usage: `Key: permalink || icon`</span>
<span class="token comment" spellcheck="true"># Key is the link label showing to end users.</span>
<span class="token comment" spellcheck="true"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span>
<span class="token key atrule">social</span><span class="token punctuation">:</span>
  <span class="token key atrule">GitHub</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/jiyiqini <span class="token punctuation">|</span><span class="token punctuation">|</span> fab fa<span class="token punctuation">-</span>github  <span class="token comment" spellcheck="true">#Github，填写个人github主页地址</span>
  <span class="token key atrule">E-Mail</span><span class="token punctuation">:</span> mailto<span class="token punctuation">:</span>sh1426574360@163.com <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>envelop  <span class="token comment" spellcheck="true">#E-Mail，填写个人邮箱地址</span>
  <span class="token comment" spellcheck="true">#Weibo: https://weibo.com/2949425821 || fab fa-weibo</span>
  <span class="token comment" spellcheck="true">#Google: https://plus.google.com/yourname || fab fa-google</span>
  <span class="token comment" spellcheck="true">#Twitter: https://twitter.com/yourname || fab fa-twitter</span>
  <span class="token comment" spellcheck="true">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span>
  <span class="token comment" spellcheck="true">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span>
  <span class="token comment" spellcheck="true">#YouTube: https://youtube.com/yourname || fab fa-youtube</span>
  <span class="token comment" spellcheck="true">#Instagram: https://instagram.com/yourname || fab fa-instagram</span>
  <span class="token comment" spellcheck="true">#Skype: skype:yourname?call|chat || fab fa-skype</span>

<span class="token key atrule">social_icons</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true          </span><span class="token comment" spellcheck="true">#是否开启社交链接icon</span>
  <span class="token key atrule">icons_only</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">transition</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3.友情链接。编辑theme配置（../themes/hexo-theme-next/_config.yml#links_settings）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">links_settings</span><span class="token punctuation">:</span>
  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>link
  <span class="token key atrule">title</span><span class="token punctuation">:</span> 友情链接
  <span class="token comment" spellcheck="true"># Available values: block | inline</span>
  <span class="token key atrule">layout</span><span class="token punctuation">:</span> inline    <span class="token comment" spellcheck="true">#友情链接排版（block竖排列 inline横排列）</span>
<span class="token key atrule">links</span><span class="token punctuation">:</span>
    <span class="token key atrule">简书</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.jianshu.com/u/xxxx    <span class="token comment" spellcheck="true">#简书博客</span>
    <span class="token key atrule">掘金</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//juejin.im/user/xxx        <span class="token comment" spellcheck="true">#掘金博客</span>
    <span class="token key atrule">更多其它</span><span class="token punctuation">:</span> 其它链接地址<span class="token punctuation">...</span></code></pre>
<h1 id="配置GitHub角标"><a href="#配置GitHub角标" class="headerlink" title="配置GitHub角标"></a>配置GitHub角标</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># GitHub链接主页。编辑theme配置（../themes/hexo-theme-next/_config.yml#github_banner）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># `Follow me on GitHub` banner in the top-right corner.</span>
<span class="token key atrule">github_banner</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                              </span><span class="token comment" spellcheck="true">#是否启动右上角的github-banner，默认关闭</span>
  <span class="token key atrule">permalink</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/jiyiqini    <span class="token comment" spellcheck="true">#你的github主页地址</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span> 小主，关注我吧~                       <span class="token comment" spellcheck="true">#当鼠标放在该banner上，提示的文本。</span></code></pre>
<h1 id="配置back2top与阅读进度"><a href="#配置back2top与阅读进度" class="headerlink" title="配置back2top与阅读进度"></a>配置back2top与阅读进度</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.回到顶部。编辑theme配置（../themes/hexo-theme-next/_config.yml#back2top）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">back2top</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true          </span><span class="token comment" spellcheck="true">#是否开启回到顶部功能</span>
  <span class="token key atrule">sidebar</span><span class="token punctuation">:</span> <span class="token boolean important">false        </span><span class="token comment" spellcheck="true">#是否显示在侧边。选择false吧，让它单独在另外一侧好看些～</span>
  <span class="token key atrule">scrollpercent</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true">#滚动进度百分比是否显示在“回到顶部按钮”的文本中</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.阅读进度。编辑theme配置（../themes/hexo-theme-next/_config.yml#back2top）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">reading_progress</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true          </span><span class="token comment" spellcheck="true">#是否开启阅读进度</span>
  <span class="token key atrule">position</span><span class="token punctuation">:</span> top         <span class="token comment" spellcheck="true">#阅读进度条的位置：top | bottom</span>
  <span class="token key atrule">color</span><span class="token punctuation">:</span> "<span class="token comment" spellcheck="true">#37c6c0"      #自定义进度条颜色</span>
  <span class="token key atrule">height</span><span class="token punctuation">:</span> 3px           <span class="token comment" spellcheck="true">#自定义进度条高度</span></code></pre>
<h1 id="配置code-style"><a href="#配置code-style" class="headerlink" title="配置code-style"></a>配置code-style</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 插入代码配置。编辑theme配置（../themes/hexo-theme-next/_config.yml#codeblock）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">codeblock</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># Code Highlight theme</span>
  <span class="token comment" spellcheck="true"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span>
  <span class="token comment" spellcheck="true"># See: https://github.com/chriskempson/tomorrow-theme</span>
  <span class="token key atrule">highlight_theme</span><span class="token punctuation">:</span> normal
  <span class="token comment" spellcheck="true"># Add copy button on codeblock</span>
  <span class="token key atrule">copy_button</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true">#是否开启复制代码功能</span>
    <span class="token key atrule">show_result</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true">#是否显示复制成功提示</span>
    <span class="token key atrule">style</span><span class="token punctuation">:</span> mac          <span class="token comment" spellcheck="true">#代码显示样式，可选：default | flat | mac</span></code></pre>
<h1 id="配置footer"><a href="#配置footer" class="headerlink" title="配置footer"></a>配置footer</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 阅读进度。编辑theme配置（../themes/hexo-theme-next/_config.yml#footer）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">footer</span><span class="token punctuation">:</span>
  <span class="token key atrule">since</span><span class="token punctuation">:</span> <span class="token number">2020   </span><span class="token comment" spellcheck="true">#建立博客的年份。若未填写，则默认为当前年份。例如：我是2020年搭建的博客，故写2020</span>
  <span class="token key atrule">counter</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#是否开启游客访问历史记录</span>

  <span class="token comment" spellcheck="true"># Icon between year and copyright info.</span>
  <span class="token key atrule">icon</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>heart   <span class="token comment" spellcheck="true"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span>
    <span class="token key atrule">animated</span><span class="token punctuation">:</span> <span class="token boolean important">false     </span><span class="token comment" spellcheck="true"># If you want to animate the icon, set it to true.</span>
    <span class="token key atrule">color</span><span class="token punctuation">:</span> "<span class="token comment" spellcheck="true">#ff0000"    # Change the color of icon, using Hex Code.</span>

  <span class="token comment" spellcheck="true"># If not defined, `author` from Hexo `_config.yml` will be used.</span>
  <span class="token key atrule">copyright</span><span class="token punctuation">:</span> 

  <span class="token comment" spellcheck="true"># Powered by Hexo &amp; NexT</span>
  <span class="token key atrule">powered</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#例如：“由 Hexo &amp; NexT.Gemini 强力驱动”</span>

  <span class="token comment" spellcheck="true"># Beian ICP and gongan information for Chinese users. See: http://www.beian.miit.gov.cn, http://www.beian.gov.cn</span>
  <span class="token key atrule">beian</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">icp</span><span class="token punctuation">:</span>
    <span class="token key atrule">gongan_id</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># The digit in the num of gongan beian.</span>
    <span class="token key atrule">gongan_num</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># The full num of gongan beian.</span>
    <span class="token key atrule">gongan_icon_url</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span></code></pre>
<h1 id="配置字数统计与预览时间"><a href="#配置字数统计与预览时间" class="headerlink" title="配置字数统计与预览时间"></a>配置字数统计与预览时间</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.当前博客站点目录下，执行安装命令：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ npm i <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>wordcount

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.阅读进度。编辑theme配置（../themes/hexo-theme-next/_config.yml#post_wordcount）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Post wordcount display settings</span>
<span class="token comment" spellcheck="true"># Dependencies: https://github.com/willin/hexo-wordcount</span>
<span class="token comment" spellcheck="true"># ---------------------------------------------------------------</span>
<span class="token key atrule">post_wordcount</span><span class="token punctuation">:</span>
  <span class="token key atrule">item_text</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">wordcount</span><span class="token punctuation">:</span> <span class="token boolean important">true       </span><span class="token comment" spellcheck="true">#字数统计</span>
  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true">#预览时间</span>
  <span class="token key atrule">totalcount</span><span class="token punctuation">:</span> <span class="token boolean important">true      </span><span class="token comment" spellcheck="true">#总字数,显示在页面底部</span>
  <span class="token key atrule">separated_meta</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3.配置显示样式。编辑post.swig配置（../themes/hexo-theme-next/layout/_macro/post.swig）</span>
<span class="token comment" spellcheck="true"># 在合适的位置插入布局代码，例如在categories之后和LeanCloud之前，另换一行显示：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token punctuation">...</span>
&amp;<span class="token comment" spellcheck="true">#123;# 字数阅读统计功能 #&amp;#125;</span>
&amp;<span class="token comment" spellcheck="true">#123;%- if theme.post_wordcount.item_text %&amp;#125;</span>
&lt;div<span class="token punctuation">></span>
  &lt;span title="&amp;<span class="token comment" spellcheck="true">#123;&amp;#123; __('post.wordcount') &amp;#125;&amp;#125;">本文约 &amp;#123;&amp;#123; wordcount(post.content)&amp;#125;&amp;#125; 字，&lt;/span></span>
  &lt;span title="&amp;<span class="token comment" spellcheck="true">#123;&amp;#123; __('post.min2read') &amp;#125;&amp;#125;">阅读大概 &amp;#123;&amp;#123; min2read(post.content)&amp;#125;&amp;#125; 分钟&lt;/span></span>
&lt;/div<span class="token punctuation">></span>
&amp;<span class="token comment" spellcheck="true">#123;% endif %&amp;#125;</span>
<span class="token punctuation">...</span></code></pre>
<h1 id="添加文末结束标语（passage-end-tag）"><a href="#添加文末结束标语（passage-end-tag）" class="headerlink" title="添加文末结束标语（passage-end-tag）"></a>添加文末结束标语（passage-end-tag）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1. 在 ../themes/next/layout/_macro/ 下新建 passage-end-tag.swig。</span>
<span class="token comment" spellcheck="true"># 填充内容如下：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
&lt;div<span class="token punctuation">></span>
    &amp;<span class="token comment" spellcheck="true">#123;% if not is_index %&amp;#125;</span>
        &lt;div style="text<span class="token punctuation">-</span>align<span class="token punctuation">:</span>center;color<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#ccc;font-size:14px;"></span>
        <span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span> 本文结束<span class="token important">&amp;nbsp</span>;&lt;i class="fa fa<span class="token punctuation">-</span>paw"<span class="token punctuation">></span>&lt;/i<span class="token punctuation">></span><span class="token important">&amp;nbsp</span>;感谢阅读 <span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>
        &lt;/div<span class="token punctuation">></span>
    &amp;<span class="token comment" spellcheck="true">#123;% endif %&amp;#125;</span>
&lt;/div<span class="token punctuation">></span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2. 打开 ../themes/next/layout/_macro/post.swig 文件，在 post-body（即：END POST BODY）之后，添加如下:</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
&amp;<span class="token comment" spellcheck="true">#123;# 文末部分，即 END POST BODY 之后#&amp;#125;</span>
&amp;<span class="token comment" spellcheck="true">#123;%- if not is_index %&amp;#125;</span>
  <span class="token punctuation">...</span>
  &amp;<span class="token comment" spellcheck="true">#123;#每篇文章末尾统一添加“本文结束”标记#&amp;#125;</span>
  &amp;<span class="token comment" spellcheck="true">#123;% if theme.passage_end_tag.enable %&amp;#125;</span>
    &amp;<span class="token comment" spellcheck="true">#123;% include 'passage-end-tag.swig' %&amp;#125;</span>
  &amp;<span class="token comment" spellcheck="true">#123;% endif %&amp;#125;</span>
  <span class="token punctuation">...</span>
&amp;<span class="token comment" spellcheck="true">#123;% endif %&amp;#125;</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3. 在主题配置文件下添加配置，在 ../themes/next/_config.yml 文件中添加开关：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 文章末尾添加“本文结束”标记</span>
<span class="token key atrule">passage_end_tag</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
<h1 id="添加评论功能（Valine）"><a href="#添加评论功能（Valine）" class="headerlink" title="添加评论功能（Valine）"></a>添加评论功能（Valine）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.注册LeanCloud，获取AppId和AppKey。</span>
<span class="token comment" spellcheck="true"># 在合适的位置插入布局代码，例如在categories之后和LeanCloud之前，另换一行显示：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
1. 注册LeanCloud账户。
2. 实名制（姓名、手机号、身份证号）
3. 创建应用，随便取个应用名。例如：Jiyiqini<span class="token punctuation">-</span>Hexo<span class="token punctuation">-</span>Blogs
4. 实名制和创建应用成功后，会得到分配的AppId和AppKey。然后进行下面一步～

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.配置Valine。编辑theme配置（../themes/hexo-theme-next/_config.yml#valine）</span>
<span class="token comment" spellcheck="true"># 在合适的位置插入布局代码，例如在categories之后和LeanCloud之前，另换一行显示：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Valine评论系统</span>
<span class="token comment" spellcheck="true"># See: https://leancloud.cn/dashboard/applist.html#/apps</span>
<span class="token comment" spellcheck="true"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span>
<span class="token key atrule">valine</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">appid</span><span class="token punctuation">:</span> xxxx<span class="token punctuation">-</span>xxxx      <span class="token comment" spellcheck="true">#在LeanCloud应用注册获取AppId</span>
  <span class="token key atrule">appkey</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>yyyy     <span class="token comment" spellcheck="true">#在LeanCloud应用注册获取AppKey</span>
  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">true          </span><span class="token comment" spellcheck="true">#是否启用邮件通知</span>
  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false         </span><span class="token comment" spellcheck="true">#是否启用验证码</span>
  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> 发表评论或建议 <span class="token comment" spellcheck="true">#默认评论区hint("Just go go")</span>
  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> monsterid     <span class="token comment" spellcheck="true"># Gravatar style.头像风格，默认为mm，可进入网址：https://valine.js.org/visitor.html查看头像设置，这里有许多头像风格，进行设置</span>
  <span class="token key atrule">guest_info</span><span class="token punctuation">:</span> nick<span class="token punctuation">,</span>mail<span class="token punctuation">,</span>link <span class="token comment" spellcheck="true"># 自定义评论框头部（Custom comment header）</span>
  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10          </span><span class="token comment" spellcheck="true">#分页大小阈值，例如：达到10条评论后分页</span>
  <span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>cn       <span class="token comment" spellcheck="true">#语言，可选: en, zh-cn</span>
  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">false        </span><span class="token comment" spellcheck="true">#Article reading statistic.是否允许游客评论，进入官网查看设置：https://valine.js.org/visitor.html</span>
  <span class="token key atrule">comment_count</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true">#If false, comment count will only be displayed in post page, not in home page</span>
  <span class="token key atrule">recordIP</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true">#Whether to record the commenter IP</span>
  <span class="token key atrule">serverURLs</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true">#When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span>
  <span class="token comment" spellcheck="true">#post_meta_order: 0</span>
  <span class="token comment" spellcheck="true">#background: /medias/comment_bg.png</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3.在需要的文章Front-Matter前，按需配置是否支持评论</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true">#例如：分类（../source/categories/index.md）</span>
<span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 文章分类
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-05-16 13:21:33</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Testing
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span>
<span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false             </span><span class="token comment" spellcheck="true">#禁止评论</span>
<span class="token punctuation">---</span></code></pre>
<blockquote>
<p><strong>类似参考：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_43827595/article/details/101450966">hexo yilia主题添加评论系统详细教程</a></li>
</ul>
</blockquote>
<h1 id="添加卡通看板娘（Live2D）"><a href="#添加卡通看板娘（Live2D）" class="headerlink" title="添加卡通看板娘（Live2D）"></a>添加卡通看板娘（Live2D）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1.当前博客站点目录下，执行安装命令（安装live2d）：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ npm install <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>helper<span class="token punctuation">-</span>live2d

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2.当前博客站点目录下，执行安装命令（安装例如模型shizuku）：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ npm install live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3.设置显示。编辑theme配置（../themes/theme-hexo-next/layout/_layout.swig）</span>
<span class="token comment" spellcheck="true"># 添加：在&lt;/body>前一行添加 &amp;#123;&amp;#123; live2d() &amp;#125;&amp;#125;</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
&lt;<span class="token tag">!DOCTYPE</span> html<span class="token punctuation">></span>
&lt;html lang="&amp;<span class="token comment" spellcheck="true">#123;&amp;#123; config.language &amp;#125;&amp;#125;"></span>
&lt;head<span class="token punctuation">></span><span class="token punctuation">...</span>&lt;/head<span class="token punctuation">></span>
&lt;body<span class="token punctuation">></span>
    <span class="token punctuation">...</span>
    &amp;<span class="token comment" spellcheck="true">#123;#### 添加：卡通看板娘 ####&amp;#125;</span>
    &amp;<span class="token comment" spellcheck="true">#123;&amp;#123; live2d() &amp;#125;&amp;#125;</span>
&lt;/body<span class="token punctuation">></span>
&lt;/html<span class="token punctuation">></span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 4.配置Live2D。编辑global配置（../&lt;your_hexo_blog>/_config.yml#Live2D）</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Live2D</span>
<span class="token comment" spellcheck="true"># https://github.com/EYHN/hexo-helper-live2d</span>
<span class="token comment" spellcheck="true"># Refer: https://fjkang.github.io/2017/12/08/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%90%8C%E7%89%A9/</span>
<span class="token comment" spellcheck="true"># live2d:</span>
<span class="token comment" spellcheck="true">#   model: z16 # 模型名称 默认值: z16</span>
<span class="token comment" spellcheck="true">#   width: 150 # 宽度 默认值: 150</span>
<span class="token comment" spellcheck="true">#   height: 300 # 高度 默认值: 300</span>
<span class="token comment" spellcheck="true">#   scaling: 1 # 分辨率缩放倍率 默认值: 2</span>
<span class="token comment" spellcheck="true">#   opacityDefault: 0.7 # 初始的透明度 默认值: 0.7</span>
<span class="token comment" spellcheck="true">#   opacityHover: 1 # 鼠标悬浮时的透明度 默认值: 1</span>
<span class="token comment" spellcheck="true">#   mobileShow: true # 是否在移动设备上显示 默认值: true</span>
<span class="token comment" spellcheck="true">#   mobileScaling: 0.5 # 移动设备缩放倍率 默认值: 0.5</span>
<span class="token comment" spellcheck="true">#   position: right # 模型左右侧放置位置 默认值: right</span>
<span class="token comment" spellcheck="true">#   horizontalOffset: 0 # 元素的水平偏移 默认值: 0</span>
<span class="token comment" spellcheck="true">#   verticalOffset: -20 # 元素的底部偏移 默认值: -20</span>
<span class="token comment" spellcheck="true">#   id: live2dcanvas # 元素的id 默认值: live2dcanvas</span>
<span class="token comment" spellcheck="true">#   deviceJsSource: local # current-device 脚本的来源 默认值: local</span>

<span class="token comment" spellcheck="true"># Live2D</span>
<span class="token comment" spellcheck="true"># https://github.com/EYHN/hexo-helper-live2d</span>
<span class="token comment" spellcheck="true"># Refer: http://yearito.cn/posts/hexo-theme-beautify.html</span>
<span class="token key atrule">live2d</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/
  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/
  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ Relative)

  <span class="token comment" spellcheck="true"># 脚本加载源</span>
  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment" spellcheck="true">#默认从本地加载脚本</span>
  <span class="token comment" spellcheck="true"># scriptFrom: jsdelivr # 从 jsdelivr CDN 加载脚本</span>
  <span class="token comment" spellcheck="true"># scriptFrom: unpkg # 从 unpkg CDN 加载脚本</span>
  <span class="token comment" spellcheck="true"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 从自定义地址加载脚本</span>
  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true">#开启true。只在有 &amp;#123;&amp;#123; live2d() &amp;#125;&amp;#125; 标签的页面上加载 / 在所有页面上加载</span>
  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false        </span><span class="token comment" spellcheck="true">#是否在控制台打印日志</span>

  <span class="token comment" spellcheck="true"># 选择看板娘模型</span>
  <span class="token key atrule">model</span><span class="token punctuation">:</span>
    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku  <span class="token comment" spellcheck="true"># npm package的名字。这里使用的shizuku模型（npm i live2d-widget-model-shizuku）</span>
    <span class="token comment" spellcheck="true"># use: wanko # /live2d_models/ 目录下的模型文件夹名称</span>
    <span class="token comment" spellcheck="true"># use: ./wives/wanko # 站点根目录下的模型文件夹名称</span>
    <span class="token comment" spellcheck="true"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 自定义网络数据源</span>
  <span class="token key atrule">display</span><span class="token punctuation">:</span>
    <span class="token key atrule">position</span><span class="token punctuation">:</span> left  <span class="token comment" spellcheck="true">#显示在左边还是右边</span>
    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">100      </span><span class="token comment" spellcheck="true">#宽度</span>
    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">180     </span><span class="token comment" spellcheck="true">#高度</span>
  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>
    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">react</span><span class="token punctuation">:</span>
    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true">#默认透明度</span></code></pre>
<h1 id="添加鼠标点击特效（❤️、爆炸）"><a href="#添加鼠标点击特效（❤️、爆炸）" class="headerlink" title="添加鼠标点击特效（❤️、爆炸）"></a>添加鼠标点击特效（❤️、爆炸）</h1><p>☞ <strong>添加步骤：</strong></p>
<blockquote>
<ol>
<li><code>../themes/next/source/js</code> 下创建特效js. </li>
<li><code>../themes/next/layout/_layout.swig#head</code> 部分引用js和其它辅助js。</li>
</ol>
</blockquote>
<p>1.主题配置项：<code>../themes/theme-hexo-next/_config.yml#cursor_effect</code></p>
<pre class=" language-yaml"><code class="language-yaml">  <span class="token comment" spellcheck="true"># Customize different effects while clicking cursor.</span>
  <span class="token comment" spellcheck="true"># type values: love 浮出爱心 | explosion 爆炸 | ...</span>
  <span class="token key atrule">cursor_effect</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> love</code></pre>
<p>2.配置：<code>../themes/theme-hexo-next/layout/_custom/custom.swig</code></p>
<pre class=" language-yaml"><code class="language-yaml">  &amp;<span class="token comment" spellcheck="true">#123;% if theme.cursor_effect.enable %&amp;#125;</span>
    &amp;<span class="token comment" spellcheck="true">#123;% if theme.cursor_effect.type == "love" %&amp;#125;</span>
      &lt;script src="/js/effects/cursor/love.min.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>
    &amp;<span class="token comment" spellcheck="true">#123;% elseif theme.cursor_effect.type == "explosion" %&amp;#125;</span>
      &lt;canvas class="fireworks" style="position<span class="token punctuation">:</span> <span class="token key atrule">fixed;left</span><span class="token punctuation">:</span> <span class="token key atrule">0;top</span><span class="token punctuation">:</span> <span class="token key atrule">0;z-index</span><span class="token punctuation">:</span> 1; pointer<span class="token punctuation">-</span><span class="token key atrule">events</span><span class="token punctuation">:</span> none;" <span class="token punctuation">></span>&lt;/canvas<span class="token punctuation">></span>
      &lt;script src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>
      &lt;script src="/js/effects/cursor/explosion.min.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>
    &amp;<span class="token comment" spellcheck="true">#123;% endif %&amp;#125;</span>
  &amp;<span class="token comment" spellcheck="true">#123;% endif %&amp;#125;</span></code></pre>
<p>3.配置：<code>/themes/theme-hexo-next/layout/_layout.swig</code></p>
<pre class=" language-yaml"><code class="language-yaml">  &amp;<span class="token comment" spellcheck="true">#123;% include '_custom/custom.swig' %&amp;#125;</span></code></pre>
<ul>
<li><p><em>示例特效js：红心（love.min.js）</em></p>
<pre class=" language-bash"><code class="language-bash">  <span class="token operator">!</span>function<span class="token punctuation">(</span>e,t,a<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;function n()&amp;#123;c(".heart&amp;#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&amp;#125;.heart:after,.heart:before&amp;#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&amp;#125;.heart:after&amp;#123;top: -5px;&amp;#125;.heart:before&amp;#123;left: -5px;&amp;#125;"),o(),r()&amp;#125;function r()&amp;#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&amp;#125;function o()&amp;#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&amp;#123;t&amp;&amp;t(),i(e)&amp;#125;&amp;#125;function i(e)&amp;#123;var a=t.createElement("div");a.className="heart",d.push(&amp;#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&amp;#125;),t.body.appendChild(a)&amp;#125;function c(e)&amp;#123;var a=t.createElement("style");a.type="text/css";try&amp;#123;a.appendChild(t.createTextNode(e))&amp;#125;catch(t)&amp;#123;a.styleSheet.cssText=e&amp;#125;t.getElementsByTagName("head")[0].appendChild(a)&amp;#125;function s()&amp;#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&amp;#125;var d=[];e.requestAnimationFrame=function()&amp;#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&amp;#123;setTimeout(e,1e3/60)&amp;#125;&amp;#125;(),n()&amp;#125;(window,document);</span></code></pre>
</li>
<li><p><em>示例特效js：爆炸（explosion.min.js）</em></p>
<pre class=" language-bash"><code class="language-bash">  <span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> updateCoords<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&amp;#125;function setParticuleDirection(e)&amp;#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&amp;#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&amp;#125;&amp;#125;function createParticule(e,t)&amp;#123;var a=&amp;#123;&amp;#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&amp;#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&amp;#125;,a&amp;#125;function createCircle(e,t)&amp;#123;var a=&amp;#123;&amp;#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&amp;#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&amp;#125;,a&amp;#125;function renderParticule(e)&amp;#123;for(var t=0;t&lt;e.animatables.length;t++)&amp;#123;e.animatables[t].target.draw()&amp;#125;&amp;#125;function animateParticules(e,t)&amp;#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&amp;#123;n.push(createParticule(e,t))&amp;#125;anime.timeline().add(&amp;#123;targets:n,x:function(e)&amp;#123;return e.endPos.x&amp;#125;,y:function(e)&amp;#123;return e.endPos.y&amp;#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&amp;#125;).add(&amp;#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&amp;#123;value:0,easing:"linear",duration:anime.random(600,800)&amp;#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&amp;#125;)&amp;#125;function debounce(e,t)&amp;#123;var a;return function()&amp;#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&amp;#123;e.apply(n,i)&amp;#125;,t)&amp;#125;&amp;#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&amp;#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&amp;#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&amp;#125;,500),render=anime(&amp;#123;duration:1/0,update:function()&amp;#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&amp;#125;&amp;#125;);document.addEventListener(tap,function(e)&amp;#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&amp;#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&amp;#125;"use strict";function updateCoords(e)&amp;#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&amp;#125;function setParticuleDirection(e)&amp;#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&amp;#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&amp;#125;&amp;#125;function createParticule(e,t)&amp;#123;var a=&amp;#123;&amp;#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&amp;#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&amp;#125;,a&amp;#125;function createCircle(e,t)&amp;#123;var a=&amp;#123;&amp;#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&amp;#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&amp;#125;,a&amp;#125;function renderParticule(e)&amp;#123;for(var t=0;t&lt;e.animatables.length;t++)&amp;#123;e.animatables[t].target.draw()&amp;#125;&amp;#125;function animateParticules(e,t)&amp;#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&amp;#123;n.push(createParticule(e,t))&amp;#125;anime.timeline().add(&amp;#123;targets:n,x:function(e)&amp;#123;return e.endPos.x&amp;#125;,y:function(e)&amp;#123;return e.endPos.y&amp;#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&amp;#125;).add(&amp;#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&amp;#123;value:0,easing:"linear",duration:anime.random(600,800)&amp;#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&amp;#125;)&amp;#125;function debounce(e,t)&amp;#123;var a;return function()&amp;#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&amp;#123;e.apply(n,i)&amp;#125;,t)&amp;#125;&amp;#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&amp;#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&amp;#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&amp;#125;,500),render=anime(&amp;#123;duration:1/0,update:function()&amp;#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&amp;#125;&amp;#125;);document.addEventListener(tap,function(e)&amp;#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&amp;#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&amp;#125;;</span></code></pre>
</li>
</ul>
<h1 id="添加背景线条特效（canvas-nest）"><a href="#添加背景线条特效（canvas-nest）" class="headerlink" title="添加背景线条特效（canvas-nest）"></a>添加背景线条特效（canvas-nest）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1. 当前博客站点目录下，../themes/next/_config.yml 配置文件中开启 canvas_nest</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># https://github.com/hustcc/canvas-nest.js</span>
<span class="token comment" spellcheck="true"># https://github.com/theme-next/theme-next-canvas-nest</span>
<span class="token comment" spellcheck="true"># 配置详见： https://github.com/hustcc/canvas-nest.js#configuration</span>
<span class="token comment" spellcheck="true"># 动态线条效果，会向鼠标集中</span>
<span class="token key atrule">canvas_nest</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                 </span><span class="token comment" spellcheck="true"># 打开这个开关</span>
  <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">'0,0,250'</span>             <span class="token comment" spellcheck="true"># color of lines, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)</span>
  <span class="token key atrule">pointColor</span><span class="token punctuation">:</span> <span class="token string">'156,39,176'</span>     <span class="token comment" spellcheck="true"># color of points, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)</span>
  <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token string">'0.5'</span>               <span class="token comment" spellcheck="true"># the opacity of line (0~1), default: 0.5.</span>
  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token string">'99'</span>                  <span class="token comment" spellcheck="true"># the number of lines, default: 99.</span>
  <span class="token key atrule">zIndex</span><span class="token punctuation">:</span> <span class="token string">'-1'</span>                 <span class="token comment" spellcheck="true"># z-index property of the background, default: -1.</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2. 完成第1步，还需要提供2个js文件：canvas-nest-nomobile.min.js、canvas-nest.min.js ，</span>
<span class="token comment" spellcheck="true"># 将其放到 "../themes/hexo-theme-next/source/lib/canvas-nest" 目录下，否则会报错。</span>
<span class="token comment" spellcheck="true"># 参考依赖：Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ git clone https<span class="token punctuation">:</span>//github.com/theme<span class="token punctuation">-</span>next/theme<span class="token punctuation">-</span>next<span class="token punctuation">-</span>canvas<span class="token punctuation">-</span>nest.git source/lib/canvas<span class="token punctuation">-</span>nest
$ 最后，重新编译部署即可：hexo clean &amp;&amp; hexo g <span class="token punctuation">-</span>d

<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">-</span>

<span class="token comment" spellcheck="true"># 另外，还有一种方法也会使线条特效生效，但打开浏览器控制台还是提示 </span>
<span class="token comment" spellcheck="true"># source/lib/canvas-nest/canvas-nest-nomobile.min.js、canvas-nest.min.js </span>
<span class="token comment" spellcheck="true"># 这2个js找不到的错误。故，还是推荐上面的方法。</span>
1. 当前博客站点目录下，创建文件 &lt;your_hexo_blog<span class="token punctuation">></span>/source/_data/footer.swig
2. footer.swig内容为：&lt;script color="0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>255" opacity="0.5" zIndex="<span class="token punctuation">-</span>1" count="99" src="https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/canvas<span class="token punctuation">-</span>nest.js@1/dist/canvas<span class="token punctuation">-</span>nest.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>
3. 在“../themes/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>next/_config.yml”配置中找到 custom_file_path 节点，打开注释 “footer<span class="token punctuation">:</span> source/_data/footer.swig” 这一行。</code></pre>
<h1 id="添加站内搜索功能（searchdb）"><a href="#添加站内搜索功能（searchdb）" class="headerlink" title="添加站内搜索功能（searchdb）"></a>添加站内搜索功能（searchdb）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1. 安装 hexo-generator-searchdb 插件</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
$ npm install <span class="token punctuation">-</span>g hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>searchdb <span class="token punctuation">-</span><span class="token punctuation">-</span>save <span class="token comment" spellcheck="true"># 干脆全局安装吧 -g</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2. 博客根站点下，即 &lt;your_hexo_blog>/_config.yml 配置 search：</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Search</span>
<span class="token key atrule">search</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml    <span class="token comment" spellcheck="true">#索引文件的路径，相对于站点根目录</span>
  <span class="token key atrule">field</span><span class="token punctuation">:</span> post         <span class="token comment" spellcheck="true">#搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</span>
  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">format</span><span class="token punctuation">:</span> html
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000        </span><span class="token comment" spellcheck="true">#限制搜索的条目数</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3. next主题下，即 &lt;your_hexo_blog>/themes/hexo-theme-next/_config.yml 配置 Local Search：打开开关</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">local_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 打开开关</span>
  <span class="token comment" spellcheck="true"># If auto, trigger search by changing input.</span>
  <span class="token comment" spellcheck="true"># If manual, trigger search by pressing enter key or search button.</span>
  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> auto
  <span class="token comment" spellcheck="true"># Show top n results per article, show all results by setting to -1</span>
  <span class="token key atrule">top_n_per_article</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token comment" spellcheck="true"># Unescape html strings to the readable one.</span>
  <span class="token key atrule">unescape</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment" spellcheck="true"># Preload the search data when the page loads.</span>
  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 4. 本以为到第3步就ok了，可惜还是不行。最后，还需要把 algolia_search 关掉。即 &lt;your_hexo_blog>/themes/hexo-theme-next/_config.yml 配置 algolia_search：关闭它。</span>
<span class="token comment" spellcheck="true"># Algolia Search</span>
<span class="token comment" spellcheck="true"># For more information: https://www.algolia.com</span>
<span class="token key atrule">algolia_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 关闭这个</span>
  <span class="token punctuation">...</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>

$ 最后，重新编译部署即可：hexo clean &amp;&amp; hexo g <span class="token punctuation">-</span>d</code></pre>
<h1 id="添加打赏功能（Reward）"><a href="#添加打赏功能（Reward）" class="headerlink" title="添加打赏功能（Reward）"></a>添加打赏功能（Reward）</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 1. 编辑主题配置文件，即：&lt;your_hexo_blog>/themes/hexo-theme-next/_config.yml 。 开启赞赏功能、提供收款码图片等。</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># Reward (Donate)</span>
<span class="token comment" spellcheck="true"># Front-matter variable (unsupport animation).</span>
<span class="token key atrule">reward_settings</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># If true, reward will be displayed in every article by default.</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">animation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">comment</span><span class="token punctuation">:</span> 若对您有帮助？求鼓励，求支持！   <span class="token comment" spellcheck="true"># 打赏按钮上方的文字</span>

<span class="token comment" spellcheck="true"># 注：为了隐私及通常，此处的赞赏码图片我不放在主题下的images里（hexo-next默认是这里）。</span>
<span class="token comment" spellcheck="true"># 我新建 images 在根站点的 source 下，即：&lt;hexo_blog>/source/images，与 _post/categories/tags/about/404 等目录平级。</span>
<span class="token key atrule">reward</span><span class="token punctuation">:</span>
  <span class="token key atrule">wechatpay</span><span class="token punctuation">:</span> ../../images/private/wechatpay.png   <span class="token comment" spellcheck="true">#/images/wechatpay.png</span>
  <span class="token key atrule">alipay</span><span class="token punctuation">:</span> ../../images/private/alipay.png         <span class="token comment" spellcheck="true">#/images/alipay.png</span>
  <span class="token comment" spellcheck="true">#paypal: /images/paypal.png</span>
  <span class="token comment" spellcheck="true">#bitcoin: /images/bitcoin.png</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 2. 修改默认“打赏”按钮文字，即：&lt;hexo_blog>/themes/hexo-theme-next/languages/zh-CN.yml</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token key atrule">reward</span><span class="token punctuation">:</span>
  <span class="token key atrule">donate</span><span class="token punctuation">:</span> 打赏支持
  <span class="token punctuation">...</span>

<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token comment" spellcheck="true"># 3. 简单美化打赏位置，即：&lt;hexo_blog>/themes/hexo-theme-next/layout/_macro/post.swig ，如：添加一个虚线分隔，或者移动赞赏区域位置。</span>
<span class="token comment" spellcheck="true">#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#</span>
<span class="token punctuation">...</span>
&amp;<span class="token comment" spellcheck="true">#123;%- if post.reward_settings.enable %&amp;#125;</span>
  &lt;hr<span class="token punctuation">></span>
  &amp;<span class="token comment" spellcheck="true">#123;&amp;#123; partial('_partials/post/post-reward.swig') &amp;#125;&amp;#125;</span>
  &lt;hr<span class="token punctuation">></span>
&amp;<span class="token comment" spellcheck="true">#123;%- endif %&amp;#125;</span>
<span class="token punctuation">...</span></code></pre>
<hr>
<h1 id="Front-Matter-系列使用指南"><a href="#Front-Matter-系列使用指南" class="headerlink" title="Front-Matter 系列使用指南"></a>Front-Matter 系列使用指南</h1><p>通常，文章开头的 <code>fron-matter模板</code> 示例为：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 标题
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 子标题
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-05-17 01:07:05</span>
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token number">100  </span><span class="token comment" spellcheck="true">#文章置顶权重，越大越靠前。不填写，默认通过创建时间倒序</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类1<span class="token punctuation">,</span>1子类A<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类1<span class="token punctuation">,</span>1子类B<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类2<span class="token punctuation">,</span>2子类A<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类2<span class="token punctuation">,</span>2子类B<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>分类2<span class="token punctuation">,</span>2子类C<span class="token punctuation">]</span>
<span class="token punctuation">-</span> 分类3
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>关键字1<span class="token punctuation">,</span>关键字2<span class="token punctuation">,</span>关键字N<span class="token punctuation">...</span><span class="token punctuation">]</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签1<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签2<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签N<span class="token punctuation">...</span><span class="token punctuation">]</span>
<span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token punctuation">---</span></code></pre>
<h2 id="categories（分类）"><a href="#categories（分类）" class="headerlink" title="categories（分类）"></a>categories（分类）</h2><p>Hexo+next 默认不支持多级分类，但可以通过 <code>[a,b,c,...]</code> 或 <code>- - 空格缩进</code> 2种形式来实现分类层级。</p>
<ul>
<li><p><strong>☞格式1：</strong></p>
<blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>父分类1<span class="token punctuation">,</span>父分类1的子分类1<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>父分类1<span class="token punctuation">,</span>父分类1的子分类2<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>父分类2<span class="token punctuation">,</span>父分类2的子分类1<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>父分类2<span class="token punctuation">,</span>父分类2的子分类2<span class="token punctuation">]</span>
<span class="token punctuation">-</span> 分类3</code></pre>
</blockquote>
</li>
<li><p><strong>☞格式2：</strong></p>
<blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 父分类1
  <span class="token punctuation">-</span> 父分类1的子分类1
  <span class="token punctuation">-</span> 父分类1的子分类2
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 父分类2
  <span class="token punctuation">-</span> 父分类2的子分类1
  <span class="token punctuation">-</span> 父分类2的子分类2
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 分类3</code></pre>
</blockquote>
</li>
</ul>
<h2 id="tags（标签）"><a href="#tags（标签）" class="headerlink" title="tags（标签）"></a>tags（标签）</h2><ul>
<li><p><strong>☞格式1：</strong></p>
<blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签1<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签2<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>标签N<span class="token punctuation">...</span><span class="token punctuation">]</span></code></pre>
</blockquote>
</li>
<li><p><strong>☞格式2：</strong></p>
<blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 标签1
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 标签2
<span class="token punctuation">-</span> <span class="token punctuation">-</span> 标签N<span class="token punctuation">...</span></code></pre>
</blockquote>
</li>
</ul>
<h2 id="scaffolds（模板）"><a href="#scaffolds（模板）" class="headerlink" title="scaffolds（模板）"></a>scaffolds（模板）</h2><ul>
<li><p><code>draft.md</code>：对应 <code>hexo new draft &#39;NewDraftName&#39; &gt; ./source/NewDraftName/index.md</code>    </p>
<blockquote>
<pre class=" language-text"><code class="language-text">#模板填充例如：
---
title: &#123;&#123; title &#125;&#125;
tags:
---</code></pre>
</blockquote>
</li>
<li><p><code>page.md</code>：对应 <code>hexo new page &#39;NewPageName&#39; &gt; ./source/NewPageName/index.md</code></p>
<blockquote>
<pre class=" language-text"><code class="language-text">#模板填充例如：
---
title: &#123;&#123; title &#125;&#125;      #标题
date: &#123;&#123; date &#125;&#125;        #创建日期时间
comments: false         #禁止评论
---</code></pre>
</blockquote>
</li>
<li><p><code>post.md</code>：对应 <code>hexo new &#39;NewPostName&#39; &gt; ./source/_post/NewPostName.md</code></p>
<blockquote>
<pre class=" language-text"><code class="language-text">#模板填充例如：
---
title: &#123;&#123; title &#125;&#125;
date: &#123;&#123; date &#125;&#125;
comments: true
categories: 
- [cat1,cat1-1]
- [cat2]
#keywords: [关键字1,关键字2]
#top: 10000 #置顶权重
tags: 
- [tag1] 
- [tag2] 
---

摘要....

<!-- more -->

正文...</code></pre>
</blockquote>
</li>
</ul>
<h1 id="hexo-内置标签插件"><a href="#hexo-内置标签插件" class="headerlink" title="hexo 内置标签插件"></a>hexo 内置标签插件</h1><h2 id="如何引用站内文章？（pos-link）"><a href="#如何引用站内文章？（pos-link）" class="headerlink" title="如何引用站内文章？（pos_link）"></a>如何引用站内文章？（pos_link）</h2><p>在 hexo-markdown 中如何引用站内文章，使用内置的标签插件 <code>post_link</code> 实现：</p>
<blockquote>
<pre class=" language-text"><code class="language-text">语法：
&#123;% post_link 文章文件名（不要后缀） 文章标题（可选，默认使用引用文章title） %&#125;

示例：
&#123;% post_link dev-tools/hexo/How-To-Config %&#125;
&#123;% post_link dev-tools/hexo/How-To-Config 《嘿嘿，引用名字我修改了》%&#125;</code></pre>
</blockquote>
]]></content>
      <categories>
        <category>技术篇</category>
        <category>工具指南</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>个性化</tag>
        <tag>美化</tag>
        <tag>主题</tag>
      </tags>
  </entry>
</search>
